#
# This source file is part of the Apodini open source project
#
# SPDX-FileCopyrightText: 2021 Paul Schmiedmayer and the project authors (see CONTRIBUTORS.md) <paul.schmiedmayer@tum.de>
#
# SPDX-License-Identifier: MIT
#

name: Build and Test

on:
  workflow_call:
    inputs:
      packagename:
        description: 'Name of the package e.g., passed ass the scheme to xcodebuild on macOS builds'
        required: true
        type: string
      path:
        description: 'The path where the Swift Package is located. Defaults to $GITHUB_WORKSPACE'
        required: false
        type: string
        default: '.'
      codecoverage:
        description: 'Report the test coverage to codecov'
        required: false
        type: boolean
        default: true

jobs:
  linux:
    name: Linux ${{ matrix.linux }} ${{ matrix.configuration }}
    container:
      image: swift:${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        linux: [bionic, focal, amazonlinux2, centos8]
        configuration: [debug, release, release_testing]
    defaults:
      run:
        working-directory: ${{ inputs.path }}
    steps:
    - uses: actions/checkout@v2
    - name: Install apt-get Dependencies
      if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev lsof zsh
    - name: Install yum Dependencies
      if: ${{ startsWith( matrix.linux, 'amazonlinux' ) }}
      run: yum update -y && yum install -y sqlite-devel
    - name: Install yum Dependencies
      if: ${{ startsWith( matrix.linux, 'centos' ) }}
      run: yum update -y --nobest && yum install -y sqlite-devel
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-spm-${{ hashFiles('Package.resolved') }}
    - name: Check Swift version
      run: swift --version
    - name: Release Build
      if: matrix.configuration == 'release'
      run: swift build -c release
    - name: Release Build & Test
      if: matrix.configuration == 'release_testing'
      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    - name: Debug Build & Test
      if: matrix.configuration == 'debug'
      run: swift test -c debug
