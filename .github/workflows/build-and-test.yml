#              
# This source file is part of the Apodini open source project
#
# SPDX-FileCopyrightText: 2019-2021 Paul Schmiedmayer and the Apodini project authors (see CONTRIBUTORS.md) <paul.schmiedmayer@tum.de>
#
# SPDX-License-Identifier: MIT
#

name: Build and Test

on:
  push:
    branches:
      - develop
      - release
  pull_request:
    branches:
      - develop
      - release
  workflow_dispatch:

jobs:
#  builddocs:
#    name: Build Docs
#    runs-on: macos-12
#    steps:
#    - uses: actions/checkout@v2
#    - uses: maxim-lobanov/setup-xcode@v1.2.3
#      with:
#        xcode-version: latest
#    - name: Check Xcode version
#      run: xcodebuild -version
#    - name: Check Swift version
#      run: swift --version
#    - name: Test Generating Docs
#      run: |
#          xcodebuild docbuild -scheme Apodini-Package -destination platform=macOS,arch=x86_64 -derivedDataPath ./.xcodebuild
#          cp -r $(find ./.xcodebuild -type d -name 'Apodini.doccarchive') ./Apodini.doccarchive
#          echo "The DocC archive can be found at ./Apodini.doccarchive"
#  macos:
#    name: macOS ${{ matrix.configuration }}
#    runs-on: macos-12
#    strategy:
#      fail-fast: false
#      matrix:
#        configuration: [debug, release, release_testing]
#    steps:
#    - uses: actions/checkout@v2
#    - uses: maxim-lobanov/setup-xcode@v1.2.3
#      with:
#        xcode-version: latest
#    - uses: actions/cache@v2
#      with:
#        path: .build
#        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
#    - name: Check Xcode version
#      run: xcodebuild -version
#    - name: Check Swift version
#      run: swift --version
#    - name: Release Build # Ensuring release build runs successfully without -enable-testing flag
#      if: matrix.configuration == 'release'
#      run: swift build -c release
#    - name: Release Build & Test
#      if: matrix.configuration == 'release_testing'
#      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
#      env:
#        ENABLE_DEPLOYMENT_PROVIDER_TESTS: YES
#    - name: Debug Build & Test
#      if: matrix.configuration == 'debug'
#      run: swift test -c debug --enable-code-coverage -Xswiftc -DCOVERAGE
#      env:
#        ENABLE_DEPLOYMENT_PROVIDER_TESTS: YES
#    - name: Convert coverage report
#      if: matrix.configuration == 'debug'
#      run: xcrun llvm-cov export -format="lcov" .build/debug/ApodiniPackageTests.xctest/Contents/MacOS/ApodiniPackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
#    - name: Upload coverage to Codecov
#      uses: codecov/codecov-action@v1
  linux:
    name: Linux ${{ matrix.linux }} ${{ matrix.configuration }}
    container:
      image: swift:5.5-${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        linux: [bionic, focal, amazonlinux2, centos8]
        configuration: [debug, release, release_testing]
    steps:
    - uses: actions/checkout@v2
    - name: Install libsqlite3, lsof, zsh, and wget
      if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev lsof zsh wget
    - name: Install libsqlite3 and wget
      if: startsWith( matrix.linux, 'amazonlinux' )
      run: yum update -y && yum install -y sqlite-devel wget
    - name: Install libsqlite3 and wget
      if: startsWith( matrix.linux, 'centos' )
      run: yum update -y --nobest && yum install -y sqlite-devel wget
    - name: Install gRPCurl
      run: |
        wget 'https://github.com/fullstorydev/grpcurl/releases/download/v1.8.5/grpcurl_1.8.5_linux_x86_64.tar.gz'
        tar -zxvf grpcurl_1.8.5_linux_x86_64.tar.gz grpcurl
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-${{matrix.configuration}}-spm2-${{ hashFiles('Package.resolved') }}
    - name: Check Swift version
      run: swift --version
    - name: Release Build # Ensuring release build runs successfully without -enable-testing flag
      if: matrix.configuration == 'release'
      run: swift build -c release
    - name: Release Build & Test
      if: matrix.configuration == 'release_testing'
      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    - name: Debug Build & Test
      if: matrix.configuration == 'debug'
      run: swift test -c debug
