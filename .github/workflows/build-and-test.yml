name: Build and Test

on:
  push:
    branches:
      - develop
      - release
  pull_request:
    branches:
      - develop
      - release
  workflow_dispatch:
    inputs:

jobs:
  latest-beta-swift-version-macos:
    name: Latest (Beta) Swift Version macOS
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v2
    - uses: maxim-lobanov/setup-xcode@v1.2.3
      with:
        xcode-version: '13.0'
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
    - name: Check Xcode version
      run: xcodebuild -version
    - name: Check Swift version
      run: swift --version
    - name: Debug Build & Test
      run: swift test
  macos:
    name: macOS ${{ matrix.configuration }}
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        configuration: [debug, release, release_testing]
    steps:
    - uses: actions/checkout@v2
    - uses: maxim-lobanov/setup-xcode@v1.2.3
      with:
        xcode-version: latest-stable
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
    - name: Check Xcode version
      run: xcodebuild -version
    - name: Check Swift version
      run: swift --version
    - name: Release Build # Ensuring release build runs successfully without -enable-testing flag
      if: matrix.configuration == 'release'
      run: swift build -c release
    - name: Release Build & Test
      if: matrix.configuration == 'release_testing'
      run: swift test -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
      env:
        ENABLE_DEPLOYMENT_PROVIDER_TESTS: YES
    - name: Debug Build & Test
      if: matrix.configuration == 'debug'
      run: swift test -c debug --enable-code-coverage -Xswiftc -DCOVERAGE
      env:
        ENABLE_DEPLOYMENT_PROVIDER_TESTS: YES
    - name: Convert coverage report
      if: matrix.configuration == 'debug'
      run: xcrun llvm-cov export -format="lcov" .build/debug/ApodiniPackageTests.xctest/Contents/MacOS/ApodiniPackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
  linux:
    name: Linux ${{ matrix.linux }} ${{ matrix.configuration }}
    container:
	image: swiftlang/swift:nightly-5.5-${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        linux: [bionic, focal, amazonlinux2, centos8]
        configuration: [debug, release, release_testing]
    steps:
    - uses: actions/checkout@v2
    - name: Install libsqlite3, lsof and zsh
      if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev lsof zsh
    - name: Install libsqlite3
      if: startsWith( matrix.linux, 'amazonlinux' )
      run: yum update -y && yum install -y sqlite-devel
    - name: Install libsqlite3
      if: startsWith( matrix.linux, 'centos' )
      run: yum update -y --nobest && yum install -y sqlite-devel
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-spm-${{ hashFiles('Package.resolved') }}
    - name: Check Swift version
      run: swift --version
    - name: Release Build # Ensuring release build runs successfully without -enable-testing flag
      if: matrix.configuration == 'release'
      run: swift build -Xswiftc -Xfrontend -Xswiftc -sil-verify-none -c release
    - name: Release Build & Test
      if: matrix.configuration == 'release_testing'
      run: swift test -Xswiftc -DWORKAROUND -Xswiftc -Xfrontend -Xswiftc -sil-verify-none -c release -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
    - name: Debug Build & Test
      if: matrix.configuration == 'debug'
      run: swift test -Xswiftc -DWORKAROUND -Xswiftc -Xfrontend -Xswiftc -sil-verify-none -c debug
