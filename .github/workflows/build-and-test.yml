name: Build and Test

on:
  push:
    branches:
      - develop
      - release
  pull_request:
    branches:
      - develop
      - release
  workflow_dispatch:
    inputs:
      runDeploymentProviderTests:
        description: 'Run the Apodini Deployment Provider Tests'
        required: false
        default: false

jobs:
  linux:
    name: Linux ${{ matrix.linux }} ${{ matrix.configuration }} test build
    container:
      image: swift:${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        linux: [bionic, xenial, focal, amazonlinux2, centos8]
        configuration: [debug, release]
    steps:
    - uses: actions/checkout@v2
    - name: Install libsqlite3, lsof and zsh
      if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev lsof zsh
    - name: Install libsqlite3
      if: startsWith( matrix.linux, 'amazonlinux' )
      run: yum update -y && yum install -y sqlite-devel lsof zsh
    - name: Install libsqlite3
      if: startsWith( matrix.linux, 'centos' )
      run: yum update -y --nobest && yum install -y sqlite-devel lsof zsh
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-spm-${{ hashFiles('Package.resolved') }}
    - name: Check Swift version
      run: swift --version
    - name: Build
      if: matrix.configuration == 'release'
      run: swift build --configuration ${{ matrix.configuration }}
    - name: Build & Test
      if: matrix.configuration == 'debug'
      run: swift test --configuration ${{ matrix.configuration }}
    - name: Run Deployment Provider Tests
      if: ${{ github.event.inputs.runDeploymentProviderTests && matrix.linux == 'focal' && matrix.configuration == 'debug' }}
      run: |
        swift test --configuration ${{ matrix.configuration }} --filter ApodiniDeployTests.LocalhostDeploymentProviderTests
        swift test --configuration ${{ matrix.configuration }} --filter ApodiniDeployTests.LambdaDeploymentProviderTests
      env:
        ENABLE_DEPLOYMENT_PROVIDER_TESTS: YES
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
