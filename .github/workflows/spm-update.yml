name: Swift Package Update

on:
  schedule:
    - cron:  '0 0 * * 0'
  workflow_dispatch:
  
jobs:
  macos:
    name: macOS ${{ matrix.configuration }} test build
    runs-on: macos-latest
    strategy:
      matrix:
        configuration: [debug, release]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: maxim-lobanov/setup-xcode@v1.1
      with:
        xcode-version: latest
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-spm-cache-${{ hashFiles('Package.resolved') }}
    - name: Check Xcode version
      run: xcodebuild -version
    - name: Check Swift version
      run: swift --version
    - name: Update Swift Packages
      run: swift package update
    - name: Build Release
      if: matrix.configuration == 'release'
      run: swift build --configuration ${{ matrix.configuration }}
    - name: Build $ Test
      if: matrix.configuration == 'debug'
      run: swift test --configuration ${{ matrix.configuration }}
  linux:
    name: Linux ${{ matrix.linux }} ${{ matrix.configuration }} test build
    container:
      image: swift:${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        linux: [bionic, xenial, focal, amazonlinux2, centos8]
        configuration: [debug, release]
    steps:
    - uses: actions/checkout@v2
    - name: Install libsqlite3
      if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev
    - name: Install libsqlite3
      if: ${{ startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' ) }}
      run: yum update -y && yum install -y sqlite-devel
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-spm-cache-${{ hashFiles('Package.resolved') }}
    - name: Check Swift version
      run: swift --version
    - name: Update Swift Packages
      run: swift package update
    - name: Build
      if: matrix.configuration == 'release'
      run: swift build --configuration ${{ matrix.configuration }}
    - name: Build & Test
      if: matrix.configuration == 'debug'
      run: swift test --configuration ${{ matrix.configuration }} --enable-test-discovery
  
  createPR:
    name: Create Pull Request
    runs-on: macos-latest
    needs: [macos, linux]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: maxim-lobanov/setup-xcode@v1.1
      with:
        xcode-version: latest
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-spm-cache-${{ hashFiles('Package.resolved') }}
    - name: Check Xcode version
      run: xcodebuild -version
    - name: Check Swift version
      run: swift --version
    - name: Update Swift Packages (Dry Run)
      id: spm_update
      run: |
        swift package update --dry-run >> ${{ runner.temp }}/spm-out.txt
        body=$(cat ${{ runner.temp }}/spm-out.txt)
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0D'}" 
        echo ::set-output name=body::$body
    - name: Update Swift Packages
      run: swift package update
    - uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ secrets.PAT }}
        commit-message: Update dependencies
        title: Update dependencies
        body: |
          - Dependency updates
          ${{ steps.spm_update.outputs.body }}
        branch: update-dependencies
