
name: Swift Package Update

on:
  schedule:
    - cron:  '*/15 * * * *'
  workflow_dispatch:
  
jobs:
  macos:
    name: macOS ${{ matrix.configuration }} test build
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        configuration: [debug, release]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: maxim-lobanov/setup-xcode@v1.1
      with:
        xcode-version: latest
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-spm-cache-${{ hashFiles('Package.resolved') }}
    - name: Check Xcode version
      run: xcodebuild -version
    - name: Check Swift version
      run: swift --version
    - name: Update Swift Packages
      run: swift update
    - name: Build
      if: matrix.configuration == 'release'
      run: swift build --configuration ${{ matrix.configuration }}
    - name: Build & Test
      if: matrix.configuration == 'debug'
      run: swift test --configuration ${{ matrix.configuration }} --enable-code-coverage
    - name: Convert coverage report
      if: matrix.configuration == 'debug'
      run: xcrun llvm-cov export -format="lcov" .build/debug/ApodiniPackageTests.xctest/Contents/MacOS/ApodiniPackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    - name: Upload coverage to Codecov
      if: matrix.configuration == 'debug'
      uses: codecov/codecov-action@v1
  linux:
    name: Linux ${{ matrix.linux }} ${{ matrix.configuration }} test build
    container:
      image: swift:${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        linux: [bionic, xenial, focal, amazonlinux2, centos8]
        configuration: [debug, release]
    steps:
    - uses: actions/checkout@v2
    - name: Install libsqlite3
      if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev
    - name: Install libsqlite3
      if: ${{ startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' ) }}
      run: yum update -y && yum install -y sqlite-devel
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-${{matrix.linux}}-spm-cache-${{ hashFiles('Package.resolved') }}
    - name: Check Swift version
      run: swift --version
    - name: Update Swift Packages
      run: swift update
    - name: Build
      if: matrix.configuration == 'release'
      run: swift build --configuration ${{ matrix.configuration }}
    - name: Build & Test
      if: matrix.configuration == 'debug'
      run: swift test --configuration ${{ matrix.configuration }} --enable-test-discovery
   
   createPR:
    name: Publish Package
    runs-on: ubuntu-latest
    container:
      image: swift:bionic
    needs: macos, linux
    steps:
    - uses: actions/checkout@v2
    - name: Install libsqlite3
      run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev
    - uses: actions/cache@v2
      with:
        path: .build
        key: ${{ runner.os }}-bionic-spm-cache-${{ hashFiles('Package.resolved') }}
    - name: Check Swift version
      run: swift --version
    - name: Update Swift Packages (Dry Run)
      run: swift update --dry-run
    - name: Update Swift Packages
      run: swift update
    - uses: peter-evans/create-pull-request@v3
      
    
