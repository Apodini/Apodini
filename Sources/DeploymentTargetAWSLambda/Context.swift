import ApodiniUtils
import Logging
import Foundation


enum Context {
    internal static func makeError(code: Int = 0, _ message: String) -> Swift.Error {
        NSError(domain: "LambdaDeploy", code: code, userInfo: [
            NSLocalizedDescriptionKey: message
        ])
    }


    private static func _findExecutable(_ name: String) -> URL {
        guard let url = Task.findExecutable(named: name) else {
            fatalError("Unable to find executable '\(name)'")
        }
        return url
    }

    static let dockerBin = _findExecutable("docker")
    static let zipBin = _findExecutable("zip")
    static let logger = Logger(label: "de.lukaskollmer.ApodiniLambda")
    
    @available(
        swift,
        deprecated: 5.6,
        message: "Workaround as Bundle.module doesn't work on Swift 5.5 in Xcode. Check if this is checked in a future Swift version"
    )
    static var resourcesBundle: Bundle {
        #if swift(>=5.5) && Xcode
        // Returns the resource bundle associated with the current Swift module as generated by the Swift compiler
        class BundleFinder {}
        
        let bundleName = "Apodini_DeploymentTargetAWSLambda"
        
        let candidates = [
            // Bundle should be present here when the package is linked into an App.
            Bundle.main.resourceURL,

            // Bundle should be present here when the package is linked into a framework.
            Bundle(for: BundleFinder.self).resourceURL,

            // For command-line tools.
            Bundle.main.bundleURL
        ]

        for candidate in candidates {
            let bundlePath = candidate?.appendingPathComponent(bundleName + ".bundle")
            if let bundle = bundlePath.flatMap(Bundle.init(url:)) {
                return bundle
            }
        }
        fatalError("unable to find bundle named Apodini_DeploymentTargetAWSLambda")
        #else
        return Bundle.module
        #endif
    }
}
