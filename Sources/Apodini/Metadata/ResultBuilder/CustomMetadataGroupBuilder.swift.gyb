//
// Created by Andreas Bauer on 16.05.21.
//

// swiftlint:disable all
// This file was automatically generated and should not be edited.
%{
    import itertools # user for the itertools.permutations call

    # Defines the maximum amount of function parameters
    num_each = 10

    def map_num_to_type(num):
        if num == 0:
            return "Content"
        elif num == 1:
            return "Group"
        else:
            return "INVALID"

    print("Generating CustomMetadataGroupBuilder...")
}%

/// The `CustomMetadataGroupBuilder` is responsible for building `CustomMetadataGroup`s.
/// See `CustomMetadataGroup` for more info.
@_functionBuilder
public enum CustomMetadataGroupBuilder<Group: CustomMetadataGroup, Content: AnyMetadata> {
    public static func buildBlock(_ m0: Content) -> Content {
        m0
    }

    public static func buildBlock(_ g0: Group) -> Group {
        g0
    }
% for num in range(2, num_each + 1):
%{
    print("Generating param count {}/{}...".format(num, num_each))
    indices = range(0, num)
}%
    % for group_count in range(0, num + 1):
%{
    print("... parameter permutations {}/{}".format(group_count + 1, num + 1))

    layout = [0] * (num - group_count)
    layout.extend([1] * group_count)

    permutations = list( map(list, set( itertools.permutations(layout) )) )
    permutations.sort()
}%
        % for permutation in permutations:
%{
    generic_names = list( map(map_num_to_type, permutation) )
    parameter_names = ['m{}'.format(idx) for idx in indices]

    params = ', '.join(['_ {}: {}'.format(param, generic) for param, generic in zip(parameter_names, generic_names)])
}%

    public static func buildBlock(${params}) -> AnyMetadata {
        TupleMetadata<(${', '.join(generic_names)})>((${', '.join(parameter_names)}))
    }
        % end
    % end
% end
}
%{
    print("Finished generating CustomMetadataGroupBuilder!")
}%
