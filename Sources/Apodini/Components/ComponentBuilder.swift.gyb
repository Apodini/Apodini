// swiftlint:disable all
// This file was automatically generated and should not be edited.
%{
    # Edit this if you want to include more components in a single tuple component
    maximumNumberOfComponents = 100
}%

#if swift(>=5.4)
@resultBuilder
public enum ComponentBuilder {}
#else
@_functionBuilder
public enum ComponentBuilder {}
#endif
extension ComponentBuilder {
    public static func buildIf<T: Component>(_ component: T?) -> T? {
        return component
    }
    
    public static func buildBlock<T: Component>(_ arg0: T) -> T {
        return arg0
    }

    public static func buildEither<T: Component>(first: T) -> T {
        return first
    }
    
    public static func buildEither<T: Component>(second: T) -> T {
        return second
    }

    public static func buildIf<T: Component>(first: T) -> T {
        return first
    }

    % for num_components in range(2, maximumNumberOfComponents):
%{
        indices = range(0, num_components)
        generic_names_in = ['T{}'.format(idx) for idx in indices]
        generics = ', '.join(['{}: Component'.format(name) for name in generic_names_in])
        generic_names_out = ['T{}'.format(idx) for idx in indices]
        param_names = ['arg{}'.format(idx) for idx in indices]
        params = ', '.join(['_ {}: {}'.format(param, type) for param, type in zip(param_names, generic_names_in)])
        tuple_ctor_args = param_names
}%
    public static func buildBlock<${generics}>(${params}) -> some Component {
        return TupleComponent<(${', '.join(generic_names_out)})>((${', '.join(tuple_ctor_args)}))
    }
    
    % end
}
