//
// This source file is part of the Apodini open source project
// 
// SPDX-FileCopyrightText: 2019-2021 Paul Schmiedmayer and the Apodini project authors (see CONTRIBUTORS.md) <paul.schmiedmayer@tum.de>
//
// SPDX-License-Identifier: MIT
//

// swiftlint:disable all
// This file was automatically generated and should not be edited.
%{
    # Edit this if you want to include more components in a single tuple component
    max_num_components = 100
}%

// Set this to either `LegacyComponentBuilder` or `NewComponentBuilder` to switch between
// - the (working) overload-based old implementation, or
// - the (still WIP) variadic-generics-based new implementation.
public typealias ComponentBuilder = LegacyComponentBuilder


@resultBuilder
public enum NewComponentBuilder {
    public static func buildOptional<C: Component>(_ component: C?) -> C? {
        component
    }
    
    public static func buildEither<C: Component>(first: C) -> C {
        first
    }
    
    public static func buildEither<C: Component>(second: C) -> C {
        second
    }
    
    // Technically speaking this overload isn't necessary (since the other -buildBlock overload
    // also can handle single-parameter invocations), but we do keep this as to maintain the type
    // of the Component for single-component blocks.
    public static func buildBlock<C: Component>(_ component: C) -> C {
        component
    }
    
    public static func buildBlock<each C: Component>(_ component: repeat each C) -> some Component {
        TupleComponent<repeat each C>(repeat each component)
    }
}



@resultBuilder
public struct LegacyComponentBuilder {
    public static func buildOptional<C: Component>(_ component: C?) -> C? {
        component
    }
    public static func buildEither<C: Component>(first: C) -> C {
        first
    }
    public static func buildEither<C: Component>(second: C) -> C {
        second
    }
    public static func buildBlock<C: Component>(_ arg0: C) -> C {
        arg0
    }
% for num_components in range(2, max_num_components + 1):
%   arg_names = [f'arg{idx}' for idx in range(0, num_components)]
    public static func buildBlock(${', '.join([f'_ {name}: some Component' for name in arg_names])}) -> some Component {
        TupleComponent(${', '.join(arg_names)})
    }
% end
}
