{"seeAlsoSections":[{"title":"Ecosystem","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/DatabaseConnection","doc:\/\/Apodini\/documentation\/Apodini\/Authorization","doc:\/\/Apodini\/documentation\/Apodini\/PushNotifications","doc:\/\/Apodini\/documentation\/Apodini\/Observe","doc:\/\/Apodini\/documentation\/Apodini\/OpenAPI"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Job"},{"type":"text","text":"s allow developers to schedule repeating tasks. In contrast to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s, "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"s are not request based."},{"type":"text","text":" "},{"type":"text","text":"Use cases for "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"s could be running background database operations or fetching data from a remote server."},{"type":"text","text":" "},{"type":"text","text":"In Apodini such tasks are defined by conforming to the "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" protocol which includes a "},{"type":"codeVoice","code":"run"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"This method is executed at scheduled points in time or when triggered by an "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":"."}]},{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Job"},{"type":"text","text":"s can use all property wrappers that are not connected to incoming requests, e.g. "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":", "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@State"},{"type":"text","text":"."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more about our communication patterns: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern"},{"type":"text","text":"."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" and uses the "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" property wrapper to inject the "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" in order to send out push notifications."}]},{"type":"codeListing","syntax":"swift","code":["struct MondayService: Job {","    @Environment(\\.notificationCenter) var notificationCenter: NotificationCenter","","    func run() {","        notificationCenter.send(alert: .init(title: \"It's monday. The beginning of a new week\"), to: \"newsletter\")","    }","}"]},{"anchor":"Scheduling","level":2,"type":"heading","text":"Scheduling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apodini "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"s can be scheduled using the common syntax from "},{"type":"reference","isActive":true,"identifier":"https:\/\/man7.org\/linux\/man-pages\/man5\/crontab.5.html"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["┌───────────── minute (0 - 59)","│  ┌───────────── hour (0 - 23)","│  │  ┌───────────── day of the month (1 - 31)","│  │  │  ┌───────────── month (1 - 12)","│  │  │  │  ┌───────────── day of the week (0 - 6)","│  │  │  │  │              (Sunday to Saturday)","│  │  │  │  │","│  │  │  │  │","\\* \\* \\* \\* \\*"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Job"},{"type":"text","text":"s can be scheduled at server startup from the "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" property using the "},{"type":"codeVoice","code":"Schedule"},{"type":"text","text":" configuration or from an "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" by injecting the "},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" with "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":". The "},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" requires as arguments an instance of a "},{"type":"codeVoice","code":"Job"},{"type":"text","text":", the cron expression and a corresponding key path conforming to "},{"type":"codeVoice","code":"EnvironmentAccessible"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When scheduling "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"s, Apodini will create a single instance which can be used with "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" to listen to changes of properties annotated with "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" or when using "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" to read and change properties of a "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" using the specified key path."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition, the number of times a "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" is executed can also be defined from the "},{"type":"codeVoice","code":"Schedule"},{"type":"text","text":" configuration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s schedule the previously introduced "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MondayService"}]},{"type":"text","text":" to be executed every Monday on 9 am."},{"type":"text","text":" "},{"type":"text","text":"We therefore declare this using the "},{"type":"codeVoice","code":"Schedule"},{"type":"text","text":" configuration and also add a struct "},{"type":"emphasis","inlineContent":[{"type":"text","text":"KeyStore"}]},{"type":"text","text":" to define our key path."},{"type":"text","text":" "},{"type":"text","text":"Furthermore, we specify that the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MondayService"}]},{"type":"text","text":" should only be executed 5 times."}]},{"type":"codeListing","syntax":"swift","code":["struct KeyStore: EnvironmentAccessible {","    var mondayService: MondayService","}","","var configuration: Configuration {","    Schedule(MondayService(), on: \"0 9 * * 1\", runs: 5, \\KeyStore.mondayService)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We also want to add a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" to manually execute the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"MondayService"}]},{"type":"text","text":" and to cancel any further execution. Injecting the "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" allows us to execute the "},{"type":"codeVoice","code":"run"},{"type":"text","text":" method. Using the "},{"type":"codeVoice","code":"Scheduler"},{"type":"text","text":" in a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" we can dequeue the "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" with the corresponding key path."}]},{"type":"codeListing","syntax":"swift","code":["struct MondayServiceHandler: Handler {","    @Environment(\\KeyStore.mondayService) var mondayService: MondayService","","    func handle() -> String {","        mondayService.run()","        return \"Executed\"","    }","}","","struct CancelHandler: Handler {","    @Environment(\\.scheduler) var scheduler: Scheduler","","    func handle() -> String {","        scheduler.dequeue(\\KeyStore.mondayService)","        return \"Cancelled\"","    }","}",""]},{"anchor":"Triggering-events","level":2,"type":"heading","text":"Triggering events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s can listen to events that "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"s emit."},{"type":"text","text":" "},{"type":"text","text":"Using the "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" property wrapper subscribers will be notified everytime one of the annotated properties changes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"DateService"}]},{"type":"text","text":" will set a new date every 10 minutes and notify its subscribers."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"DateHandler"}]},{"type":"text","text":" listens to events of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"DateService"}]},{"type":"text","text":" and will send back responses as a service-side stream."}]},{"type":"codeListing","syntax":"swift","code":["struct DateService: Job {","    @Published var date = Date()","","    func run() {","        date = Date()","    }","}","","struct DateHandler: Handler {","    @ObservedObject(\\.dateService) var dateService: DateService","","    func handle() -> String {","        \"Current date: \\($dateService.date)\"","    }","}","","var configuration: Configuration {","    Schedule(DateService(), on: \"*\/10 * * * *\")","}"]},{"anchor":"Subscribing-to-events","level":2,"type":"heading","text":"Subscribing to events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Besides emitting events, "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"s can also listen to changes of other ``ObservedObject"},{"type":"codeVoice","code":"which are declared with the"},{"type":"text","text":"@ObservedObject` property wrapper."},{"type":"text","text":" "},{"type":"text","text":"This will also trigger the `run` method of a `Job`."},{"type":"text","text":" "},{"type":"text","text":"To differentiate between the scheduled execution and the execution of an `ObservableObject`, the projected Boolean value `changed` of the property wrapper can be used. Projected values of property wrappers are accessed using the `$` prefix operator."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"RegisterHandler"}]},{"type":"text","text":" is responsible to count every access to its path and store this information in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"VisitorObservedObject"}]},{"type":"text","text":". Using "},{"type":"codeVoice","code":"Environment(value, keyPath)"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" stored property, which takes as arguments a key path and the corresponding value, we can declare the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"VisitorObservedObject"}]},{"type":"text","text":" as a Singleton. This allows us to use the "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" in the web service with the property wrappers "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" and the key path. The "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" will send a weekly push notification based on the total number of visitors and also when someone accessed the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"RegisterHandler"}]},{"type":"text","text":" by listening to changes to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"VisitorObservedObject"}]},{"type":"text","text":". To differentiate between these two cases we use the property "},{"type":"codeVoice","code":"changed"},{"type":"text","text":" of "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":"  to check if the "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" was triggered by being scheduled or by the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"VisitorObservedObject"}]},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["struct TestWebService: WebService {","    struct VisitorObservedObject: ObservableObject {","        @Published var count = 0","    }","","    struct SummaryJob: Job {","        @ObservedObject(\\KeyStore.visitorObservedObject) var visitors: VisitorObservedObject","","        @Environment(\\.notificationCenter) var notificationCenter: NotificationCenter","","        func run() {","            if _visitors.changed {","                notificationCenter.send(alert: Alert(title: \"We have a new customer\"), to: \"visitorTopic\")","            } else {","                notificationCenter.send(alert: Alert(title: \"This week we had a total of \\(visitorObject.count) visitors\", to: \"visitorTopic\"))","            }","        }","    }","","    struct RegisterHandler: Handler {","        @Environment(\\KeyStore.visitorObservedObject) var visitors: VisitorObservedObject","","        func handle() -> String {","            visitors.count += 1","            return \"Welcome to our site!\"","        }","    }","","    var content: some Component {","        RegisterHandler()","    }","","    var configuration: Configuration {","        EnvironmentObject(VisitorObservedObject(), \\KeyStore.visitorObservedObject)","        Schedule(SummaryJob(), on: \"0 9 * * 5\", \\KeyStore.summaryJob)","    }","","    struct KeyStore: EnvironmentAccessible {","        var visitorObservedObject: VisitorObservedObject","        var summaryJob: SummaryJob","    }","}"]}]}],"variants":[{"paths":["\/documentation\/apodini\/jobs"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/Jobs","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A guide to schedule repeating tasks in Apodini."}],"kind":"article","metadata":{"modules":[{"name":"Apodini"}],"role":"collectionGroup","title":"Jobs"},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"]]},"topicSections":[{"title":"Implementation","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/PushNotifications"]}],"references":{"doc://Apodini/documentation/Apodini/Observe":{"role":"collectionGroup","title":"Observe a web service","abstract":[{"type":"text","text":"Instrument an Apodini web service to make it observable."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Observe","kind":"article","type":"topic","url":"\/documentation\/apodini\/observe"},"doc://Apodini/documentation/Apodini/Handler":{"role":"symbol","title":"Handler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Handler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" which defines an endpoint and can handle requests."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Handler"}],"url":"\/documentation\/apodini\/handler"},"doc://Apodini/documentation/Apodini/Metadata":{"role":"collectionGroup","title":"Metadata","abstract":[{"type":"text","text":"Map requirements of your web service into the implementation."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadata"},"https://man7.org/linux/man-pages/man5/crontab.5.html":{"title":"crontab","titleInlineContent":[{"type":"text","text":"crontab"}],"type":"link","identifier":"https:\/\/man7.org\/linux\/man-pages\/man5\/crontab.5.html","url":"https:\/\/man7.org\/linux\/man-pages\/man5\/crontab.5.html"},"doc://Apodini/documentation/Apodini/Authorization":{"role":"collectionGroup","title":"Apodini Authorization","abstract":[{"type":"text","text":"Formulate Authorization Requirements using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata"},{"type":"text","text":" system."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Authorization","kind":"article","type":"topic","url":"\/documentation\/apodini\/authorization"},"doc://Apodini/documentation/Apodini/DatabaseConnection":{"role":"collectionGroup","title":"Database Connection","abstract":[{"type":"text","text":"Connect Apodini project to a database system."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DatabaseConnection","kind":"article","type":"topic","url":"\/documentation\/apodini\/databaseconnection"},"doc://Apodini/documentation/Apodini/OpenAPI":{"role":"article","title":"OpenAPI Interface Exporter","abstract":[{"type":"text","text":"This document provides a short introduction to using the "},{"type":"codeVoice","code":"OpenAPIInterfaceExporter"},{"type":"text","text":", a static exporter for Apodini."},{"type":"text","text":" "},{"type":"text","text":"It can be used to expose an OpenAPI specification (version 3.0.3) for an exported RESTful API, as done by the "},{"type":"codeVoice","code":"RESTInterfaceExporter"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/OpenAPI","kind":"article","type":"topic","url":"\/documentation\/apodini\/openapi"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"doc://Apodini/documentation/Apodini/PushNotifications":{"role":"collectionGroup","title":"Push Notifications","abstract":[{"type":"text","text":"A guide to use push notifications in Apodini."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PushNotifications","kind":"article","type":"topic","url":"\/documentation\/apodini\/pushnotifications"}}}