{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This file describes how the gRPC interface exporter and the protocol buffer IDL exporter are exporting the web service described in Apodini’s DSL."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol buffers are Google’s language-neutral, platform-neutral, extensible mechanism for serializing structured data. "},{"type":"reference","isActive":true,"identifier":"https:\/\/developers.google.com\/protocol-buffers\/"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When we use "},{"type":"strong","inlineContent":[{"type":"text","text":"gRPC"}]},{"type":"text","text":" or "},{"type":"strong","inlineContent":[{"type":"text","text":"GRPC"}]},{"type":"text","text":", we mean that this part of the program is responsible for the communication, i.e., remote procedure calls."},{"type":"text","text":" "},{"type":"text","text":"When we use "},{"type":"strong","inlineContent":[{"type":"text","text":"protocol buffers"}]},{"type":"text","text":" or "},{"type":"strong","inlineContent":[{"type":"text","text":"Protobuffer"}]},{"type":"text","text":", we mean that this part of the program is responsible to work with Google’s IDL."}]},{"anchor":"Exporters","level":2,"type":"heading","text":"Exporters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Apodini.ProtobufferInterfaceExporter"},{"type":"text","text":" exports a protocol buffer declaration of your "},{"type":"codeVoice","code":"Apodini.WebService"},{"type":"text","text":" in accordance to Google’s "},{"type":"reference","isActive":true,"identifier":"https:\/\/developers.google.com\/protocol-buffers\/docs\/proto3"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":".proto"},{"type":"text","text":" declaration is available at "},{"type":"codeVoice","code":"apodini\/proto"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Apodini.GRPCInterfaceExporter"},{"type":"text","text":" exports endpoints for gRPC clients."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":".proto"},{"type":"text","text":" declaration shall be used to create a gRPC client that can communicate with your "},{"type":"codeVoice","code":"Apodini.WebService"},{"type":"text","text":" without any more work."}]},{"anchor":"Translation","level":2,"type":"heading","text":"Translation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will look into some examples of how "},{"type":"codeVoice","code":"Apodini.ProtobufferInterfaceExporter"},{"type":"text","text":" translates "},{"type":"codeVoice","code":"Apodini.Handler"},{"type":"text","text":"s into protocol buffer "},{"type":"codeVoice","code":"Service"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Message"},{"type":"text","text":"s."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example results in a service with name "},{"type":"codeVoice","code":"V1GreetService"},{"type":"text","text":" and a single RPC method called "},{"type":"codeVoice","code":"greeter"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var content: some Component {","    Group(\"greet\") {","        Greeter()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"becomes"}]},{"type":"codeListing","syntax":"proto","code":["service V1GreetService {","    rpc greeter(\/**\/) returns (\/**\/);","}"]},{"anchor":"Parameters","level":3,"type":"heading","text":"Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All "},{"type":"codeVoice","code":"@Parameters"},{"type":"text","text":" are dealt with in the same way for gRPC."},{"type":"text","text":" "},{"type":"text","text":"In gRPC the only way a handler can receive parameters is via the message payload."},{"type":"text","text":" "},{"type":"text","text":"This means all parameters will be decoded from the message payload, no matter of which type ("},{"type":"codeVoice","code":".body"},{"type":"text","text":", "},{"type":"codeVoice","code":".path"},{"type":"text","text":", …) a "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":" is."}]},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Handler {","    @Parameter var name: String","","    func handle() -> String {","        \"Hello \\(name)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"becomes"}]},{"type":"codeListing","syntax":"proto","code":["message GreeterMessage {","    string name = 1;","}"]},{"anchor":"Field-Numbers","level":3,"type":"heading","text":"Field Numbers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Protobuffers use unique numbers \/ field tags to identify each field of a message."},{"type":"text","text":" "},{"type":"text","text":"The exporters will enumerate all parameters in the order they are placed in the source file by default."}]},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Handler {","   @Parameter","   var name: String","","   @Parameter","   var isFormal: Bool","","   func handle() -> String {","       \/\/ ...","   } ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"becomes"}]},{"type":"codeListing","syntax":"proto","code":["message GreeterMessage {","    string name = 1;","    bool isFormal = 2;","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same holds for non-primitive parameters with nested data structures."}]},{"anchor":"Options","level":2,"type":"heading","text":"Options"},{"anchor":"Custom-Service-Names","level":3,"type":"heading","text":"Custom Service Names"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Service names are derived from the "},{"type":"codeVoice","code":"Apodini.Component"},{"type":"text","text":" tree by default."},{"type":"text","text":" "},{"type":"text","text":"All path components leading to a handler will be concatenated to a unique name."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The service name can be explicitly set by using the "},{"type":"codeVoice","code":".serviceName"},{"type":"text","text":" modifier."}]},{"type":"codeListing","syntax":"swift","code":["var content: some Component {","    Group(\"greet\") {","        Greeter()","        Text(\"Hallo Welt\")","    }","    .serviceName(\"GreetService\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"becomes"}]},{"type":"codeListing","syntax":"proto","code":["service GreetService {","    rpc greeter(\/**\/) returns (\/**\/);","    rpc text(\/**\/) returns (\/**\/);","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Apodini.Component"},{"type":"text","text":" tree needs to be flattend to be representable as a gRPC service."},{"type":"text","text":" "},{"type":"text","text":"Only the "},{"type":"codeVoice","code":".serviceName"},{"type":"text","text":" modifier applied at the deepest level of the tree will be considered."},{"type":"text","text":" "},{"type":"text","text":"Thus, the following example would result in the same output as shown above:"}]},{"type":"codeListing","syntax":"swift","code":["var content: some Component {","    Group(\"messaging\") {","        Group(\"greet\") {","            Greeter()","            Text(\"Hallo Welt\")","        }","        .serviceName(\"GreetService\")","    }","    .serviceName(\"MessagingService\")","}"]},{"anchor":"Custom-Method-Names","level":3,"type":"heading","text":"Custom Method Names"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Apodini.Handler"},{"type":"text","text":"s will be exported as methods, with the name of the handler type as the method name."},{"type":"text","text":" "},{"type":"text","text":"The names of methods can also be explicitly set by using the "},{"type":"codeVoice","code":".methodName"},{"type":"text","text":" modifier."}]},{"type":"codeListing","syntax":"swift","code":["var content: some Component {","    Group(\"greet\") {","        Greeter()","            .methodName(\"greetByName\")","        Text(\"Hallo Welt\")","    }","    .serviceName(\"GreetService\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"becomes"}]},{"type":"codeListing","syntax":"proto","code":["service GreetService {","    rpc greetByName(\/**\/) returns (\/**\/);","    rpc text(\/**\/) returns (\/**\/);","}"]},{"anchor":"Custom-Field-Numbers","level":3,"type":"heading","text":"Custom Field Numbers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apodini allows you to manually define field tags."},{"type":"text","text":" "},{"type":"text","text":"For parameters of Components, this can be done using the "},{"type":"codeVoice","code":"gRPCParameterOptions.fieldTag"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Component {","   @Parameter(\"name\", .gRPC(.fieldTag(2))","   var name: String","   \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For non-primitive parameters and nested data structures, this can be done using the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s of "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" structs."},{"type":"text","text":" "},{"type":"text","text":"Please refer to the documentation of the ProtobufferCoding module "},{"type":"reference","isActive":true,"identifier":".\/..\/..\/Sources\/ProtobufferCoding\/README.md"},{"type":"text","text":"."}]},{"anchor":"Mixing-automatic-inference-and-custom-field-numbers","level":3,"type":"heading","text":"Mixing automatic inference and custom field numbers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also only add manually defined field numbers to some of the parameters, and let Apodini infer the field numbers for the others."},{"type":"text","text":" "},{"type":"text","text":"Apodini will enumerate all parameters in the order they are place in the source file and override the unique numbers with the manually annotated field tag."}]},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Handler {","   @Parameter","   var firstName: String","","   \/\/ The infered unique number would be 2,","   \/\/ but the annotation overrides it with 5.","   @Parameter(\"lastName\", .gRPC(.fieldTag(5))","   var lastName: String ","","   @Parameter","   var isFormal: Bool","","   func handle() -> String {","       \/\/ ...","   } ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"becomes"}]},{"type":"codeListing","syntax":"proto","code":["message GreeterMessage {","    string firstName = 1;","    string lastName = 5;","    bool isFormal = 3;","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/protocolbuffers"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Describe how to export the webservice via IDL exporter."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Protocol Buffers","role":"collectionGroup","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"],["doc:\/\/Apodini\/documentation\/Apodini","doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks"]]},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/BuildingExporters","doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation","doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","doc:\/\/Apodini\/documentation\/Apodini\/RetrieveRelationship","doc:\/\/Apodini\/documentation\/Apodini\/DSLComponents","doc:\/\/Apodini\/documentation\/Apodini\/Semantic-Model","doc:\/\/Apodini\/documentation\/Apodini\/Inter-Component-Communication"],"generated":true}],"references":{"doc://Apodini/documentation/Apodini/RetrieveRelationship":{"role":"collectionGroup","title":"Retrieving Relationship Information","abstract":[{"type":"text","text":"This proposal describes how relationship information can be generated from the DSL, introduces some concepts"},{"type":"text","text":" "},{"type":"text","text":"to give hints for relationship retrieval and adds mechanisms to manually define hints."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/RetrieveRelationship","kind":"article","type":"topic","url":"\/documentation\/apodini\/retrieverelationship"},"https://developers.google.com/protocol-buffers/docs/proto3":{"title":"proto3 Language Guide","titleInlineContent":[{"type":"text","text":"proto3 Language Guide"}],"type":"link","identifier":"https:\/\/developers.google.com\/protocol-buffers\/docs\/proto3","url":"https:\/\/developers.google.com\/protocol-buffers\/docs\/proto3"},"doc://Apodini/documentation/Apodini/BuildingExporters":{"role":"collectionGroup","title":"Building Exporters","abstract":[{"type":"text","text":"Writing a web service with Apodini is easy - as long as there are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s suitable for your purposes. If that is not the case, you might need to adapt one, or build a new one."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingExporters","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingexporters"},"https://developers.google.com/protocol-buffers/":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/developers.google.com\/protocol-buffers\/","url":"https:\/\/developers.google.com\/protocol-buffers\/"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"doc://Apodini/documentation/Apodini/ExporterConfiguration":{"role":"collectionGroup","title":"Configuration of Exporters","abstract":[{"type":"text","text":"Extensive configuration options for Apodini Exporters."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","kind":"article","type":"topic","url":"\/documentation\/apodini\/exporterconfiguration"},"doc://Apodini/documentation/Apodini/Semantic-Model":{"role":"collectionGroup","title":"Semantic Model","abstract":[{"type":"text","text":"The semantic model is an intermediary model that is somewhere in the middle between the web service declaration you write using the Apodini DSL and the behavior of the web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Semantic-Model","kind":"article","type":"topic","url":"\/documentation\/apodini\/semantic-model"},"./../../Sources/ProtobufferCoding/README.md":{"title":"here","titleInlineContent":[{"type":"text","text":"here"}],"type":"link","identifier":".\/..\/..\/Sources\/ProtobufferCoding\/README.md","url":".\/..\/..\/Sources\/ProtobufferCoding\/README.md"},"doc://Apodini/documentation/Apodini/BuildingBlocks":{"role":"collectionGroup","title":"Apodini’s Building Blocks","abstract":[{"type":"text","text":"This chapter introduces you to the most important building blocks of an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingblocks"},"doc://Apodini/documentation/Apodini/HandlerDelegation":{"role":"collectionGroup","title":"Delegating Handlers","abstract":[{"type":"text","text":"Defining reusable and assertive "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation","kind":"article","type":"topic","url":"\/documentation\/apodini\/handlerdelegation"},"doc://Apodini/documentation/Apodini/InterfaceExporter":{"role":"symbol","title":"InterfaceExporter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InterfaceExporter"}],"abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" is a type which requires access to the web service’s structure and"},{"type":"text","text":" "},{"type":"text","text":"internals."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InterfaceExporter"}],"url":"\/documentation\/apodini\/interfaceexporter"},"doc://Apodini/documentation/Apodini/Inter-Component-Communication":{"role":"article","title":"Inter-Component Communication","abstract":[{"type":"text","text":"Web services deployed with Apodini Deployer can be distributed across different nodes. Inter-component communication enables the communication between components between these nodes."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Inter-Component-Communication","kind":"article","type":"topic","url":"\/documentation\/apodini\/inter-component-communication"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/DSLComponents":{"role":"collectionGroup","title":"DSL Components","abstract":[{"type":"text","text":"Apodini DSL central building blocks."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DSLComponents","kind":"article","type":"topic","url":"\/documentation\/apodini\/dslcomponents"}}}