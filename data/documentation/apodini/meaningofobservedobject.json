{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" wraps an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":". An "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" may have multiple "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties. A "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" that contains an "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" registers callbacks to these "},{"type":"codeVoice","code":"Published"},{"type":"text","text":" properties and evaluates the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" on each update."}]},{"anchor":"Lifetime","level":2,"type":"heading","text":"Lifetime"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The lifetime of the "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" itself depends on the way it is created. The developer could pass it in from the outside (e.g. from a lower "},{"type":"codeVoice","code":"Component"},{"type":"text","text":") as sort of a singleton which lives until the process dies. If the "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" is created inside the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" it is recreated every time a new connection is established but lives for the complete lifetime of the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":"s can be globally declared by defining them in the "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" computed property of the web service using "},{"type":"codeVoice","code":"EnvironmentObject(value, keyPath)"},{"type":"text","text":". This "},{"type":"codeVoice","code":"Configuration"},{"type":"text","text":" takes as arguments a key path that is used to retrieve the "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" from a property wrapper "},{"type":"codeVoice","code":"@ObservedObject(\\.keyPath)"},{"type":"text","text":" and the corresponding value that should be injected. The key path has to conform to "},{"type":"codeVoice","code":"EnvironmentAccessible"},{"type":"text","text":" and can be defined in a separate struct in the web service. Locally defined "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"s don’t require the use of a key path."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example configuration of a global "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Bird: ObservableObject {","    var name: String","    var age: Int","}","","struct BirdHandler: Handler {","    @Environment(\\KeyStore.bird) var bird: Bird","","    \/\/ ...","}","","struct KeyStore: EnvironmentAccessible {","    var bird: Bird","}","","var configuration: Configuration {","    EnvironmentObject(Bird(), \\KeyStore.bird)","}"]},{"anchor":"Differentiate-ObservableObjects","level":3,"type":"heading","text":"Differentiate ObservableObjects"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The property wrapper "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" provides a Boolean property  "},{"type":"codeVoice","code":"changed"},{"type":"text","text":" that can be accessed  an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" prefixed with "},{"type":"codeVoice","code":"_"},{"type":"text","text":": "},{"type":"codeVoice","code":"_observableObject.changed"},{"type":"text","text":". This value will evaluate to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the corresponding "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" caused the execution of the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":". In every other case, "},{"type":"codeVoice","code":"changed"},{"type":"text","text":" will evaluate to "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]},{"anchor":"Influence","level":3,"type":"heading","text":"Influence"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The presence of "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" properties on a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" signalizes exporting the endpoint as a Service-Side Stream makes sense. If the exporter decides to do so the lifetime of the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" has to be extended accordingly. The "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" should stay alive until either "},{"type":"codeVoice","code":".end"},{"type":"text","text":" or "},{"type":"codeVoice","code":".final(E)"},{"type":"text","text":" was returned."}]},{"anchor":"Implementation-Details","level":3,"type":"heading","text":"Implementation-Details"},{"anchor":"Request-Response","level":4,"type":"heading","text":"Request-Response"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Exporters that only support the Request-Response pattern cannot handle multiple service-messages. The default behavior would be to return the first non-"},{"type":"codeVoice","code":".nothing"},{"type":"text","text":" "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" as the response and destruct the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" afterwards."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/apodini.github.io\/resources\/markdown-labels\/document_type_vision.svg"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An advanced feature would be to allow for the developer to customize the strategy used for a certain endpoint, e.g. using "},{"type":"codeVoice","code":".downgrade(using strategy: Strategy)"},{"type":"text","text":" on the according "},{"type":"codeVoice","code":"Component"},{"type":"text","text":". "},{"type":"codeVoice","code":"Strategy"},{"type":"text","text":" could be the default "},{"type":"codeVoice","code":".cutOff"},{"type":"text","text":" or "},{"type":"codeVoice","code":".collect"},{"type":"text","text":". The latter would result in the exported response-type to be "},{"type":"codeVoice","code":"[Response]"},{"type":"text","text":" and the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" collecting all "},{"type":"codeVoice","code":".send(Response)"},{"type":"text","text":" until the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is destructed when "},{"type":"codeVoice","code":".end"},{"type":"text","text":" or "},{"type":"codeVoice","code":".final(E)"},{"type":"text","text":" is returned."}]},{"anchor":"Client-Side-Stream","level":4,"type":"heading","text":"Client-Side Stream"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Refer to Request-Response."}]},{"anchor":"Service-Side-Stream","level":4,"type":"heading","text":"Service-Side Stream"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Service-Side Stream can fully support the features provided by "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":". The "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" stays alive until either "},{"type":"codeVoice","code":".end"},{"type":"text","text":" or "},{"type":"codeVoice","code":".final(E)"},{"type":"text","text":" is returned."}]},{"anchor":"Bidirectional-Stream","level":4,"type":"heading","text":"Bidirectional Stream"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Refer to Service-Side Stream."}]},{"anchor":"Control-Flow","level":2,"type":"heading","text":"Control Flow"},{"anchor":"Influence","level":3,"type":"heading","text":"Influence"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@ObservableObject"},{"type":"text","text":"s emit events if one of their "},{"type":"codeVoice","code":"wrappedProperty"},{"type":"text","text":"‘s "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" emits an event. The "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is evaluated each time one of the observed "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":"s’ value changes."}]},{"anchor":"Implementation-Details","level":3,"type":"heading","text":"Implementation Details"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each exporter that supports "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":"s must subscribe to them, no matter what communication patterns it supports. Even for a request-response pattern the initial request providing "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":"s could result in an "},{"type":"codeVoice","code":"Action.nothing"},{"type":"text","text":" being returned. In that case the required non-"},{"type":"codeVoice","code":".nothing"},{"type":"text","text":" "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" will result from an event that comes from one of the "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":"s."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/meaningofobservedobject"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/MeaningOfObservedObject","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Description of ObservedObject property wrapper and its usage in Apodini."}],"kind":"article","metadata":{"roleHeading":"Article","title":"ObservedObject","role":"article","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini","doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","doc:\/\/Apodini\/documentation\/Apodini\/Tooling"]]},"seeAlsoSections":[{"title":"Tooling","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/MeaningOfParameter","doc:\/\/Apodini\/documentation\/Apodini\/MeaningOfState","doc:\/\/Apodini\/documentation\/Apodini\/MeaningOfEnvironment"],"generated":true}],"references":{"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/MeaningOfParameter":{"role":"article","title":"Parameter","abstract":[{"type":"text","text":"Specifying input for endpoints with Parameter property wrapper in Apodini."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/MeaningOfParameter","kind":"article","type":"topic","url":"\/documentation\/apodini\/meaningofparameter"},"doc://Apodini/documentation/Apodini/Tooling":{"role":"collectionGroup","title":"Tooling","abstract":[{"type":"text","text":"Description service structure for endpoints."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Tooling","kind":"article","type":"topic","url":"\/documentation\/apodini\/tooling"},"doc://Apodini/documentation/Apodini/MeaningOfEnvironment":{"role":"collectionGroup","title":"Environment","abstract":[{"type":"text","text":"Description of Environment property wrapper and its usage in Apodini."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/MeaningOfEnvironment","kind":"article","type":"topic","url":"\/documentation\/apodini\/meaningofenvironment"},"doc://Apodini/documentation/Apodini/MeaningOfState":{"role":"article","title":"State","abstract":[{"type":"text","text":"Description of State property wrapper and its usage in Apodini."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/MeaningOfState","kind":"article","type":"topic","url":"\/documentation\/apodini\/meaningofstate"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"https://apodini.github.io/resources/markdown-labels/document_type_vision.svg":{"alt":"document type: vision","type":"image","identifier":"https:\/\/apodini.github.io\/resources\/markdown-labels\/document_type_vision.svg","variants":[{"url":"https:\/\/apodini.github.io\/resources\/markdown-labels\/document_type_vision.svg","traits":["1x","light"]}]}}}