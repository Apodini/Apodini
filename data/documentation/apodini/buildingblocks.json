{"seeAlsoSections":[{"title":"Basics","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Metadata","doc:\/\/Apodini\/documentation\/Apodini\/AllAboutReuse","doc:\/\/Apodini\/documentation\/Apodini\/CommandLineArguments","doc:\/\/Apodini\/documentation\/Apodini\/StatefulHandlers","doc:\/\/Apodini\/documentation\/Apodini\/InformationAPI","doc:\/\/Apodini\/documentation\/Apodini\/UnitTesting"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An Apodini "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" consists of two parts. The "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" and the "},{"type":"codeVoice","code":"content"},{"type":"text","text":". The former contains "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Configuration"},{"type":"text","text":" elements, which allow for modifying the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application"},{"type":"text","text":", i.e. the backbone of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"content"},{"type":"text","text":" holds a tree of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s define the structure of your web service. At the leaves of this tree are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s. Those define the interface and application logic of a certain endpoint of your web service. In other words, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s allow you to place "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s in a certain "},{"type":"codeVoice","code":"Context"},{"type":"text","text":"."}]},{"anchor":"Defining-Structure","level":3,"type":"heading","text":"Defining Structure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a quick look at code to see how "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s work."}]},{"type":"codeListing","syntax":"swift","code":["struct MyWebService: WebService {","    var configuration: Configuration {","        ...","    }","","    var content: some Component {","        MyFirstHandler()","        Group(\"some\", \"path\") {","            MySecondHandler()","            Group(\"elements\") {","                MyThirdHandler()","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"content"},{"type":"text","text":" is a result builder. Each leaf we add to "},{"type":"codeVoice","code":"content"},{"type":"text","text":" is a new endpoint. In this example there are three endpoints, the application logic of which is defined by "},{"type":"codeVoice","code":"MyFirstHandler"},{"type":"text","text":", "},{"type":"codeVoice","code":"MySecondHandler"},{"type":"text","text":", and "},{"type":"codeVoice","code":"MyThirdHandler"},{"type":"text","text":" respectively."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can easily factor out certain sub-components if we think they might be a good unit of reuse, or if we fear to lose overview. In this example, provide the complete content of another web service twice. Once in english and once in german under the "},{"type":"codeVoice","code":"de"},{"type":"text","text":" sub-route."}]},{"type":"codeListing","syntax":"swift","code":["struct MyLocalizedWebService: WebService {","    var configuration: Configuration {","        ...","    }","","    var content: some Component {","        MyNestedComponent()","        Group(\"de\") {","            MyNestedComponent(language: \"de\")","        }","    }","}","","struct MyNestedComponent: Component {","    let language: String = \"en\"","","    var content: some Component {","        MyOneHandler(language: language)","        Group(\"elements\") {","            MyOtherHandler()","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Group"},{"type":"text","text":" is just one of many "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s. As mentioned previously, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s put endpoints in a certain "},{"type":"codeVoice","code":"Context"},{"type":"text","text":". "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Group"},{"type":"text","text":" adds identifiers to the "},{"type":"codeVoice","code":"Context"},{"type":"text","text":"s of its contained endpoints. In HTTP verbs that means it adds segments to the endpoint’s path. Most "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Modifier"},{"type":"text","text":"s. They wrap a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" and append to its "},{"type":"codeVoice","code":"Context"},{"type":"text","text":". An example is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/operation(_:)"},{"type":"text","text":"."}]},{"anchor":"Configuring-Middleware","level":3,"type":"heading","text":"Configuring Middleware"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apodini itself is middleware-agnostic. That is, you don’t write "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s to operate on HTTP requests, to use JSON encoding or anything like that. The same applies to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Group"},{"type":"text","text":" is the basis for HTTP paths, but it is also the basis for gRPC service names or message identifiers in a global WebSocket endpoint. The building blocks that define how your web service looks like on the wire are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s. Most packages defining an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" also provide an accompanying "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Configuration"},{"type":"text","text":" you can add to your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":". E.g. for "},{"type":"codeVoice","code":"ApodiniHTTP"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["import ApodiniHTTP","","struct MyLocalizedWebService: WebService {","    var configuration: Configuration {","        HTTP(decoder: myConfiguredDecoder)","    }","","    var content: some Component {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also have multiple "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s configured at once."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some exporters might even bring accompanying specification exporters. E.g. "},{"type":"codeVoice","code":"ApodiniREST"},{"type":"text","text":" has a compatible "},{"type":"codeVoice","code":"ApodiniOpenAPI"},{"type":"text","text":" exporter, which automatically generates and serves a fitting OpenAPI document for the service exported by "},{"type":"codeVoice","code":"ApodiniREST"},{"type":"text","text":". Since "},{"type":"codeVoice","code":"ApodiniOpenAPI"},{"type":"text","text":" depends on "},{"type":"codeVoice","code":"ApodiniREST"},{"type":"text","text":", it is a sub-configuration of the "},{"type":"codeVoice","code":"ApodiniREST"},{"type":"text","text":" exporter:"}]},{"type":"codeListing","syntax":"swift","code":["import ApodiniREST","import ApodiniOpenAPI","","struct MyLocalizedWebService: WebService {","    var configuration: Configuration {","        REST {","            OpenAPI()","        }","    }","","    var content: some Component {","        ...","    }","}"]},{"anchor":"Writing-Application-Logic","level":3,"type":"heading","text":"Writing Application Logic"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that you’ve seen how you can structure and export your web service, let’s fill it with logic!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To do so, we have to implement "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s are structs that respond to incoming messages using a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f"},{"type":"text","text":" function. Each connection gets its own independent instance of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":". The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f"},{"type":"text","text":" function uses "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s defined by Apodini to get access to the frameworks features. The most important "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":". The former provides you with middleware-agnostic access to input. The latter allows you to retrieve global and local information that either Apodini, a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Configuration"},{"type":"text","text":" or you placed on the environment."}]},{"anchor":"Defining-Input","level":4,"type":"heading","text":"Defining Input"},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Handler {","    @Parameter var name: String = \"World\"","","    func handle() -> String {","        \"Hello, \\(name)!\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is just a very simple “Hello World” endpoint. If no parameter for "},{"type":"codeVoice","code":"name"},{"type":"text","text":" is found by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":", the default "},{"type":"codeVoice","code":"\"World\""},{"type":"text","text":" is used. If we don’t provide a default and the client doesn’t provide a "},{"type":"codeVoice","code":"name"},{"type":"text","text":", the framework would abort with a bad request error. Of course we can also have multiple "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":"s on one endpoint. You can use any "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type as a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":". As shown in the example, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" will use some default strategy to search for a fitting value in the client’s request. That strategy completely depends on the exporter. E.g. the HTTP exporter would search for a HTTP query parameter named "},{"type":"codeVoice","code":"name"},{"type":"text","text":", since it is a simple "},{"type":"codeVoice","code":"String"},{"type":"text","text":" parameter. If it were something that is not "},{"type":"codeVoice","code":"CustomStringConvertible"},{"type":"text","text":" it would try to decode it from the request’s body. Exporter packages can define custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PropertyOption"},{"type":"text","text":"s that let you customize various things."}]},{"type":"codeListing","syntax":"swift","code":["struct CustomizedGreeter: Handler {","    @Parameter(\"country\", .http(.path), .gRPC(.fieldTag(2)) var name: String = \"World\"","","    @Parameter(.gRPC(.fieldTag(1)) var formal: Bool = false","","    func handle() -> String {","        \"\\(formal ? \"Greetings\" : \"Hi\"), \\(name)!\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, the "},{"type":"codeVoice","code":"name"},{"type":"text","text":" parameter is called "},{"type":"codeVoice","code":"country"},{"type":"text","text":" for all exporters. Furthermore, it is no longer a query parameter for HTTP exporters, but appended to the path as a path parameter. For the gRPC exporter, we have customized the order in which the parameters are defined in the protobuf file."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to customize the position of path parameters, take a look at "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PathParameter"},{"type":"text","text":"."}]}],"type":"aside","name":"Tip"},{"anchor":"Defining-Output","level":4,"type":"heading","text":"Defining Output"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output of your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" is defined by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f"},{"type":"text","text":"‘s response type. That must be of type "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Content"},{"type":"text","text":", i.e. "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":". "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f"},{"type":"text","text":" can be "},{"type":"codeVoice","code":"async"},{"type":"text","text":", but if you have to work with NIO’s "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"s, you can also return those."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to return raw data on a single endpoint, e.g. for file-hosting, you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Blob"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Content"},{"type":"text","text":" type."}]}],"type":"aside","name":"Tip"},{"anchor":"Working-with-the-Environment","level":4,"type":"heading","text":"Working with the Environment"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Often, the client’s input is not enough to calculate a response. In that cases we use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":". It allows you to gain access to e.g. service classes. Items on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":" are identified by "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":"s. Usually, we store them on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["extension Application {","    var myService: MyService {","        guard let service = self.storage[\\Application.myService] else {","            self.storage[\\Application.myService] = MyService()","            return self.myService","        }","        return service","    }","}","","struct MyWebService: WebService {","    var configuration: Configuration {","        EnvironmentValue(MyService(configuration: someConfig), \\Application.myService)","        \/\/ ...","    }","    \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The extension on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application"},{"type":"text","text":" defines how the service class can be retrieved. This implementation tries to get it from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application"},{"type":"text","text":"’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application\/storage"},{"type":"text","text":", or returns a default version. However, you could also e.g. get it from a global variable. If you store it on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application\/storage"},{"type":"text","text":", you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentValue"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Configuration"},{"type":"text","text":" to inject a different version."}]},{"type":"codeListing","syntax":"swift","code":["struct MyHandler: Handler {","    @Parameter var name: String","","    @Environment(\\.myService) var myService","","    func handle() -> String {","        myService.greet(name)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then access the environment value on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":" property wrapper."}]},{"anchor":"Throwing-Errors","level":4,"type":"heading","text":"Throwing Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can throw any "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" from your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f"},{"type":"text","text":" function. However, you should only throw "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ApodiniError"},{"type":"text","text":"s. They provide guidance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s what type of error it is and can be customized with e.g. HTTP error codes. To throw an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ApodiniError"},{"type":"text","text":", you declare on your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" that it "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Throws"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct MyThrowingHandler: Handler {","    @Throws(.forbidden,","            description: \"UserService could not find the given UUID or user has no active subscription\"","    ) var noSubscriptionError","","    @Parameter var id: UUID","    ","    @Environment(\\.userService) var userService","","    func handle() throws -> some ResponseTransformable {","        guard userService.isRegistered(id) else {","            throw noSubscriptionError(reason: \"unknown id \\(id)\")","        }","        guard userService.hasValidSubscription(id) else {","            throw noSubscriptionError(reason: \"account has no active subscription\", .httpResponseStatus(.paymentRequired))","        }","","        \/\/ ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Declaring the error as a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Throws"},{"type":"text","text":" property on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" makes it available to specification document exporters such as ApodiniOpenAPI. You should declare all information that is known at startup-time there. If you want to add additional information depending on the client’s input you can modify the error before throwing it by calling it as a function. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ApodiniError"},{"type":"text","text":" can be customized with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PropertyOption"},{"type":"text","text":"s, to customize how certain exporters represent the error."}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ApodiniError"},{"type":"text","text":" has two different message types. The "},{"type":"codeVoice","code":"reason"},{"type":"text","text":" is public. It should not expose implementation details the client should not get hold of. The "},{"type":"codeVoice","code":"description"},{"type":"text","text":" can be more specific. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s should only expose the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" in "},{"type":"codeVoice","code":"DEBUG"},{"type":"text","text":" mode or if explicitly configured to do so."}]}]}],"variants":[{"paths":["\/documentation\/apodini\/buildingblocks"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This chapter introduces you to the most important building blocks of an Apodini web service."}],"kind":"article","metadata":{"modules":[{"name":"Apodini"}],"role":"collectionGroup","title":"Apodini’s Building Blocks"},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"]]},"topicSections":[{"title":"Defining Structure","abstract":[{"type":"text","text":"The basic elements for defining the structure of your web service:"}],"identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Component","doc:\/\/Apodini\/documentation\/Apodini\/Modifier","doc:\/\/Apodini\/documentation\/Apodini\/Group","doc:\/\/Apodini\/documentation\/Apodini\/Handler\/operation(_:)"]},{"title":"Configuring Middleware","abstract":[{"type":"text","text":"Here you can find information on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s you can use to build your web services:"}],"identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Configuration","doc:\/\/Apodini\/documentation\/Apodini\/WebSocket","doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers"]},{"title":"Writing Application Logic","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Handler","doc:\/\/Apodini\/documentation\/Apodini\/Property","doc:\/\/Apodini\/documentation\/Apodini\/Parameter","doc:\/\/Apodini\/documentation\/Apodini\/PathParameter","doc:\/\/Apodini\/documentation\/Apodini\/Environment","doc:\/\/Apodini\/documentation\/Apodini\/PropertyOption","doc:\/\/Apodini\/documentation\/Apodini\/Content","doc:\/\/Apodini\/documentation\/Apodini\/Blob","doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentValue","doc:\/\/Apodini\/documentation\/Apodini\/Storage","doc:\/\/Apodini\/documentation\/Apodini\/Application","doc:\/\/Apodini\/documentation\/Apodini\/ApodiniError","doc:\/\/Apodini\/documentation\/Apodini\/Throws"]}],"references":{"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/Handler":{"role":"symbol","title":"Handler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Handler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" which defines an endpoint and can handle requests."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Handler"}],"url":"\/documentation\/apodini\/handler"},"doc://Apodini/documentation/Apodini/Property":{"role":"symbol","title":"Property","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Property"}],"abstract":[{"type":"text","text":"This protocol is implemented by all of Apodini’s property wrappers that are used access functionality or information on a handling "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Property"}],"url":"\/documentation\/apodini\/property"},"doc://Apodini/documentation/Apodini/Environment":{"role":"symbol","title":"Environment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Environment"}],"abstract":[{"type":"text","text":"A property wrapper to inject pre-defined values  to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Environment"}],"url":"\/documentation\/apodini\/environment"},"doc://Apodini/documentation/Apodini/Component":{"role":"symbol","title":"Component","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Component"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" is the central building block of  Apodini. Each component handles a specific functionality of the Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Component"}],"url":"\/documentation\/apodini\/component"},"doc://Apodini/documentation/Apodini/Metadata":{"role":"collectionGroup","title":"Metadata","abstract":[{"type":"text","text":"Map requirements of your web service into the implementation."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadata"},"doc://Apodini/documentation/Apodini/PathParameter":{"role":"symbol","title":"PathParameter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathParameter"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"@PathComponent"},{"type":"text","text":" can be used in "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"s to indicate that a part of a path is a parameter and can be read out in a "},{"type":"codeVoice","code":"Handler"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PathParameter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathParameter"}],"url":"\/documentation\/apodini\/pathparameter"},"doc://Apodini/documentation/Apodini/UnitTesting":{"role":"collectionGroup","title":"Unit Testing in Apodini","abstract":[{"type":"text","text":"Show how to create a typical test class for an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/UnitTesting","kind":"article","type":"topic","url":"\/documentation\/apodini\/unittesting"},"doc://Apodini/documentation/Apodini/PropertyOption":{"role":"symbol","title":"PropertyOption","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PropertyOption"}],"abstract":[{"type":"text","text":"A value that can be associated with a "},{"type":"codeVoice","code":"PropertyOptionKey"},{"type":"text","text":" that can be collected in an "},{"type":"codeVoice","code":"PropertyOptionSet"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PropertyOption","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PropertyOption"}],"url":"\/documentation\/apodini\/propertyoption"},"doc://Apodini/documentation/Apodini/Handler/handle()-3440f":{"defaultImplementations":3,"role":"symbol","title":"handle()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"}],"abstract":[{"type":"text","text":"A function that is called when a request reaches the "},{"type":"codeVoice","code":"Handler"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/apodini\/handler\/handle()-3440f"},"doc://Apodini/documentation/Apodini/Throws":{"role":"symbol","title":"Throws","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Throws"}],"abstract":[{"type":"text","text":"A property wrapper that can be used on "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s to obtain "},{"type":"codeVoice","code":"ApodiniError"},{"type":"text","text":"s."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Throws","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Throws"}],"url":"\/documentation\/apodini\/throws"},"doc://Apodini/documentation/Apodini/Parameter":{"role":"symbol","title":"Parameter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parameter"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":" property wrapper can be used to express input in "},{"type":"codeVoice","code":"Components"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parameter"}],"url":"\/documentation\/apodini\/parameter"},"doc://Apodini/documentation/Apodini/AllAboutReuse":{"role":"collectionGroup","title":"All About Reuse","abstract":[{"type":"text","text":"Despite its declarative nature, Apodini’s API is really flexible and enables you to build reusable components on many different levels."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/AllAboutReuse","kind":"article","type":"topic","url":"\/documentation\/apodini\/allaboutreuse"},"doc://Apodini/documentation/Apodini/WebService":{"role":"symbol","title":"WebService","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebService"}],"abstract":[{"type":"text","text":"Each Apodini program consists of a "},{"type":"codeVoice","code":"WebService"},{"type":"text","text":"component that is used to describe the Web API of the Web Service"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WebService"}],"url":"\/documentation\/apodini\/webservice"},"doc://Apodini/documentation/Apodini/Storage":{"role":"symbol","title":"Storage","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Storage"}],"abstract":[{"type":"text","text":"Enables swift extensions to declare “stored” properties for use in application configuration"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Storage","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Storage"}],"url":"\/documentation\/apodini\/storage"},"doc://Apodini/documentation/Apodini/CommandLineArguments":{"role":"collectionGroup","title":"Command Line Arguments Parsing","abstract":[{"type":"text","text":"Parse Command Line Arguments in an Apodini web service to dynamically adapt the configuration of the web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommandLineArguments","kind":"article","type":"topic","url":"\/documentation\/apodini\/commandlinearguments"},"doc://Apodini/documentation/Apodini/Group":{"role":"symbol","title":"Group","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Group"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Group","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Group"}],"url":"\/documentation\/apodini\/group"},"doc://Apodini/documentation/Apodini/Configuration":{"role":"symbol","title":"Configuration","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Configuration"}],"abstract":[{"type":"codeVoice","code":"Configuration"},{"type":"text","text":"s are used to register services to Apodini."},{"type":"text","text":" "},{"type":"text","text":"Each "},{"type":"codeVoice","code":"Configuration"},{"type":"text","text":" handles different kinds of services."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Configuration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Configuration"}],"url":"\/documentation\/apodini\/configuration"},"doc://Apodini/documentation/Apodini/Application":{"role":"symbol","title":"Application","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"abstract":[{"type":"text","text":"Configuration and state of the application"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Application"}],"url":"\/documentation\/apodini\/application"},"doc://Apodini/documentation/Apodini/Handler/operation(_:)":{"role":"symbol","title":"operation(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"operation"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Operation","preciseIdentifier":"s:7Apodini9OperationO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"HandlerMetadataModifier","preciseIdentifier":"s:7Apodini23HandlerMetadataModifierV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Handler.operation(...)"},{"type":"text","text":" modifier can be used to explicitly specify the "},{"type":"codeVoice","code":"Operation"},{"type":"text","text":" Metadata for the given "},{"type":"codeVoice","code":"Handler"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/operation(_:)","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/handler\/operation(_:)"},"doc://Apodini/documentation/Apodini/EnvironmentValue":{"role":"symbol","title":"EnvironmentValue","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentValue"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Configuration"},{"type":"text","text":" which helps to store and retrieve objects using "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" and the correspond key path."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EnvironmentValue"}],"url":"\/documentation\/apodini\/environmentvalue"},"doc://Apodini/documentation/Apodini/ApodiniError":{"role":"symbol","title":"ApodiniError","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApodiniError"}],"abstract":[{"type":"text","text":"An error that can be thrown from "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s and receives special treatment from compliant interface exporters."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ApodiniError","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApodiniError"}],"url":"\/documentation\/apodini\/apodinierror"},"doc://Apodini/documentation/Apodini/Modifier":{"role":"symbol","title":"Modifier","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Modifier"}],"abstract":[{"type":"text","text":"A modifier which can be invoked on a "},{"type":"codeVoice","code":"Component"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Modifier","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Modifier"}],"url":"\/documentation\/apodini\/modifier"},"doc://Apodini/documentation/Apodini/StatefulHandlers":{"role":"collectionGroup","title":"Stateful Handlers","abstract":[{"type":"text","text":"Usually endpoints only handle one request and answer with one response. However, in certain cases, this is not enough. Apodini sets no restrictions on this."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/StatefulHandlers","kind":"article","type":"topic","url":"\/documentation\/apodini\/statefulhandlers"},"doc://Apodini/documentation/Apodini/WebSocket":{"role":"article","title":"WebSocket Interface Exporter","abstract":[{"type":"text","text":"The WebSocket exporter uses a custom "},{"type":"strong","inlineContent":[{"type":"text","text":"JSON"}]},{"type":"text","text":" based protocol on top of WebSocket’s "},{"type":"strong","inlineContent":[{"type":"text","text":"text"}]},{"type":"text","text":" messages. This protocol can handle multiple concurrent connections on the same or different endpoints over one WebSocket channel. The Apodini service listens on "},{"type":"codeVoice","code":"\/apodini\/websocket"},{"type":"text","text":" for clients that want to communicate via the WebSocket Interface Exporter."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebSocket","kind":"article","type":"topic","url":"\/documentation\/apodini\/websocket"},"doc://Apodini/documentation/Apodini/Application/storage":{"role":"symbol","title":"storage","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"storage"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Storage","preciseIdentifier":"s:7Apodini7StorageV"}],"abstract":[{"type":"text","text":"Enables swift extensions to declare “stored” properties for use in application configuration"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application\/storage","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/application\/storage"},"doc://Apodini/documentation/Apodini/InterfaceExporter":{"role":"symbol","title":"InterfaceExporter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InterfaceExporter"}],"abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" is a type which requires access to the web service’s structure and"},{"type":"text","text":" "},{"type":"text","text":"internals."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InterfaceExporter"}],"url":"\/documentation\/apodini\/interfaceexporter"},"doc://Apodini/documentation/Apodini/Blob":{"role":"symbol","title":"Blob","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Blob"}],"abstract":[{"type":"text","text":"A binary large object (blob) that can be used to return binary data from a "},{"type":"codeVoice","code":"Handler"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Blob","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Blob"}],"url":"\/documentation\/apodini\/blob"},"doc://Apodini/documentation/Apodini/ProtocolBuffers":{"role":"collectionGroup","title":"Protocol Buffers","abstract":[{"type":"text","text":"Describe how to export the webservice via IDL exporter."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","kind":"article","type":"topic","url":"\/documentation\/apodini\/protocolbuffers"},"doc://Apodini/documentation/Apodini/Content":{"role":"symbol","title":"Content","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Content"}],"abstract":[{"type":"text","text":"Types that can be returned from a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"‘s "},{"type":"codeVoice","code":"handle"},{"type":"text","text":" function should conform to "},{"type":"codeVoice","code":"Content"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"codeVoice","code":"Content"},{"type":"text","text":" includes the conformance to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":". If the types implement the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" requirements the type doesn’t need to provide additional"},{"type":"text","text":" "},{"type":"text","text":"implementation steps to conform to "},{"type":"codeVoice","code":"ResponseTransformable"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Content","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Content"}],"url":"\/documentation\/apodini\/content"},"doc://Apodini/documentation/Apodini/InformationAPI":{"role":"collectionGroup","title":"Information","abstract":[{"type":"text","text":"The Information API maps middleware-specific metadata of the respective wire protocol into the framework"},{"type":"text","text":" "},{"type":"text","text":"making it accessible inside a Handler."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InformationAPI","kind":"article","type":"topic","url":"\/documentation\/apodini\/informationapi"}}}