{"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/BuildingExporters","doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","doc:\/\/Apodini\/documentation\/Apodini\/RetrieveRelationship","doc:\/\/Apodini\/documentation\/Apodini\/DSLComponents","doc:\/\/Apodini\/documentation\/Apodini\/Semantic-Model","doc:\/\/Apodini\/documentation\/Apodini\/Inter-Component-Communication"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In some situations, putting all of your application logic into a single "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is not practical. There might be a certain part of this logic that is reusable and required in multiple "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s. You might not want to initialize certain objects before you have done some assertions. Or there is just so much going on in your "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" that it becomes difficult to read. In all of these situations you need a "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":"."}]},{"anchor":"Calling-a-Delegate","level":3,"type":"heading","text":"Calling a `Delegate`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegating "},{"type":"codeVoice","code":"Handler"}]},{"type":"text","text":" is any "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" that uses at least one "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":". A "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" wraps any "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" and allows you to use the same functionality on that "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" as you can use on a regular "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":". The element wrapped by the "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" can - but doesn’t have to - be a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s look at an example. This is the internal implementation of "},{"type":"codeVoice","code":"Guard"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct GuardingHandler<D, G>: Handler where D: Handler, G: Guard {","    let guarded: Delegate<D>","    let `guard`: Delegate<G>","","    init(guarded: D, `guard`: G) {","        self.guarded = Delegate(guarded)","        self.guard = Delegate(`guard`)","    }","    ","    func handle() async throws -> D.Response {","        try await `guard`().check()","        return try await guarded().handle()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The delegating "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" first evaluates the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" and - if that didn’t throw - evaluates the "},{"type":"codeVoice","code":"guarded"},{"type":"text","text":" "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" to return its "},{"type":"codeVoice","code":"Response"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" has a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/instance()"},{"type":"text","text":" function. When you call this function, the "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" performs all the magic to its wrapped element that Apodini uses to make all the "},{"type":"codeVoice","code":"Property"},{"type":"text","text":"s on "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" functional. It decodes the input for "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":"s, injects local values into "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":" and makes sure all observing "},{"type":"codeVoice","code":"Property"},{"type":"text","text":"s actually observe their "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"s. After you have called the "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":", you can access all properties on the returned element and use its functionality."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also means that the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lifetime"}]},{"type":"text","text":" of all "},{"type":"codeVoice","code":"Property"},{"type":"text","text":"s on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegate"}]},{"type":"text","text":" starts the first time you call the "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" as a function. From there on, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unsolicited events"}]},{"type":"text","text":" events are observed. See "},{"type":"reference","isActive":true,"identifier":".\/Handling-Unsolicited-Events"},{"type":"text","text":" for more information."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Mutating changes on the returned element are not persisted to the next evaluation of the delegating "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course applying all this complex logic may result in errors. That is why calling the "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" may throw. While in most cases you’ll just pass those errors down, you could check for decoding errors here and try a different "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" if the fist one fails."}]},{"anchor":"Manipulating-Delegate","level":3,"type":"heading","text":"Manipulating `Delegate`"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" provides functionality for the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegating "},{"type":"codeVoice","code":"Handler"}]},{"type":"text","text":" to manipulate its contained element "},{"type":"strong","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" calling it. Those changes are persisted across evaluations of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegating "},{"type":"codeVoice","code":"Handler"}]},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["struct SomeDelegatingHandler: Handler {","    let delegate = Delegate(SomeHandler())","","    @Parameter var someParameter: String","","    @Environment(\\My.observableService) var observableService","    ","    func handle() throws -> SomeHandler.Response {","        return try delegate","                        \/\/ sets the specified `Binding` on `SomeHandler` to a `.constant()` value","                        .set(\\.$someStringBinding, to: someParameter)","                        \/\/ sets the specified `ObservedObject` on `SomeHandler` to the given value","                        .setObservable(\\.$observable, to: observableService.getObservable(for: someParameter))","                        \/\/ injects the given value (identified by the given `KeyPath`) into the local environment","                        .environment(\\My.name, someParameter)","                        \/\/ injects the given value (identified by its type) into the local environment","                        .environmentObject(someParameter)","                        .instance()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While "},{"type":"codeVoice","code":"set"},{"type":"text","text":" and "},{"type":"codeVoice","code":"setObservable"},{"type":"text","text":" only work if you know the concrete type of your "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegate"}]},{"type":"text","text":", "},{"type":"codeVoice","code":"environment"},{"type":"text","text":" and "},{"type":"codeVoice","code":"environmentObject"},{"type":"text","text":" can be used everywhere and are applied throughout the whole hierarchy of delegation. That is, if "},{"type":"codeVoice","code":"SomeHandler"},{"type":"text","text":" would also have a "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":", an "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":" of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":" on that "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":"‘s wrapped element could still access the "},{"type":"codeVoice","code":" "},{"type":"text","text":"someParameter"},{"type":"codeVoice","code":", if "},{"type":"text","text":"SomeHandler` doesn’t override it."}]},{"anchor":"Building-Generic-Delegating-Handlers","level":3,"type":"heading","text":"Building Generic Delegating `Handler`s"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While writing a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegating "},{"type":"codeVoice","code":"Handler"}]},{"type":"text","text":" for a specific "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is fine in many contexts, you may find yourself in a situation where you need a more generic solution."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"DelegationModifier"},{"type":"text","text":" allows you to add "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegating "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s"}]},{"type":"text","text":" on "},{"type":"codeVoice","code":"HandlerModifier"},{"type":"text","text":"s or even on any "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Guard"},{"type":"text","text":"s are one example that can be used on any "},{"type":"codeVoice","code":"Component"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var content: some Component {","    Group {","        Group {","            Text(\"Hello\")","                .guard(OneGuard())","        }.guard(OtherGuard())","    }.guard(GuardThatIsNotEvenUsed())","     .resetGuards()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can build your own modifier such as "},{"type":"codeVoice","code":".guard(_:)"},{"type":"text","text":" using "},{"type":"codeVoice","code":".delegated(by: )"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["extension Component {","    \/\/\/ Use a `DelegatingHandlerInitializer` to create a fitting delegating `Handler` for each of the `Component`'s endpoints.","    \/\/\/ All instances created by the `initializer` can delegate evaluations to their respective child-`Handler` using `Delegate`.","    \/\/\/ - Parameter prepend: If set to `true`, the modifier is prepended to all other calls to `delegated` instead of being appended as usual.","    \/\/\/ - Note: `prepend` should only be used if `I.Response` is `Self.Response` or `Self` is no `Handler`.","    public func delegated<I: DelegatingHandlerInitializer>(by initializer: I, prepend: Bool = false) -> DelegationModifier<Self, I>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usually, you want to have "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegating "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s"}]},{"type":"text","text":" evaluated in the same order they are defined on the "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"-tree. However, some - such as "},{"type":"codeVoice","code":"Guard"},{"type":"text","text":"s - are always to be evaluated before all others. In that case you can set "},{"type":"codeVoice","code":"prepend"},{"type":"text","text":" to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The more interesting part is the "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". It is called once for each endpoint that is modified, i.e. that lives on the "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" you use the "},{"type":"codeVoice","code":"Modifier"},{"type":"text","text":" on."}]},{"type":"codeListing","syntax":"swift","code":["public protocol DelegatingHandlerInitializer: AnyDelegatingHandlerInitializer {","    associatedtype Response: ResponseTransformable","    ","    \/\/\/ Build a paritally type-erased `Handler`-instance that delegates to the given `delegate`.","    func instance<D: Handler>(for delegate: D) throws -> SomeHandler<Response>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" type is only relevant to enforce that the modifier you are creating can only be used in the correct context."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usually, if you want to manipulate the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegate’s"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" you will impose certain restrictions on your modifier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"E.g. the "},{"type":"codeVoice","code":".response(_: )"},{"type":"text","text":" modifier is only available where the "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" type matches the "},{"type":"codeVoice","code":"responseTransformer"},{"type":"text","text":"’s input type."}]},{"type":"codeListing","syntax":"swift","code":["extension Handler {","    public func response<T: ResponseTransformer>(","        _ responseTransformer: T","    ) -> DelegationModifier<Self, ResponseTransformingHandlerInitializer<T>> where Self.Response.Content == T.InputContent","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thus, if you want you modifier to be usable on "},{"type":"codeVoice","code":"HandlerModifier"},{"type":"text","text":"s, make sure you specify the correct "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" type on your "},{"type":"codeVoice","code":"DelegatingHandlerInitializer"},{"type":"text","text":" as it is reflected by the `.delegated(by:) modifier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In any other context, the "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" does not matter. You can set it to "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Guard"},{"type":"text","text":" does this in its "},{"type":"codeVoice","code":"Component.guard(_:)"},{"type":"text","text":" function:"}]},{"type":"codeListing","syntax":"swift","code":["extension Component {","    public func `guard`<G: Guard>(_ guard: G) -> DelegationModifier<Self, GuardingHandlerInitializer<G, Never>>","}"]}]}],"variants":[{"paths":["\/documentation\/apodini\/handlerdelegation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Defining reusable and assertive "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s."}],"kind":"article","metadata":{"modules":[{"name":"Apodini"}],"role":"collectionGroup","title":"Delegating Handlers"},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"],["doc:\/\/Apodini\/documentation\/Apodini","doc:\/\/Apodini\/documentation\/Apodini\/Metadata","doc:\/\/Apodini\/documentation\/Apodini\/MetadataProviderGuide"]]},"topicSections":[{"title":"Instances","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Handler","doc:\/\/Apodini\/documentation\/Apodini\/HandlerModifier","doc:\/\/Apodini\/documentation\/Apodini\/Delegate","doc:\/\/Apodini\/documentation\/Apodini\/DelegatingHandlerInitializer","doc:\/\/Apodini\/documentation\/Apodini\/Property","doc:\/\/Apodini\/documentation\/Apodini\/Response","doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformer","doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformingHandlerInitializer","doc:\/\/Apodini\/documentation\/Apodini\/Guard"]}],"references":{"doc://Apodini/documentation/Apodini/DelegatingHandlerInitializer":{"role":"symbol","title":"DelegatingHandlerInitializer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DelegatingHandlerInitializer"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"DelegatingHandlerInitializer"},{"type":"text","text":" is used to dynamically stack "},{"type":"strong","inlineContent":[{"type":"text","text":"delegating"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s on"},{"type":"text","text":" "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"s. The "},{"type":"codeVoice","code":"DelegatingHandlerInitializer"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"instance"},{"type":"text","text":" method is called once for"},{"type":"text","text":" "},{"type":"text","text":"every related endpoint."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DelegatingHandlerInitializer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DelegatingHandlerInitializer"}],"url":"\/documentation\/apodini\/delegatinghandlerinitializer"},"doc://Apodini/documentation/Apodini/HandlerModifier":{"role":"symbol","title":"HandlerModifier","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"HandlerModifier"}],"abstract":[{"type":"text","text":"A modifier which can be invoked on a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" or a "},{"type":"codeVoice","code":"Component"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/HandlerModifier","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HandlerModifier"}],"url":"\/documentation\/apodini\/handlermodifier"},"doc://Apodini/documentation/Apodini/Guard":{"role":"symbol","title":"Guard","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Guard"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Guard"},{"type":"text","text":" can be used to inspect request and guard "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"s using the check method"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Guard"}],"url":"\/documentation\/apodini\/guard"},"doc://Apodini/documentation/Apodini/MetadataProviderGuide":{"role":"collectionGroup","title":"Metadata Provider Guide","abstract":[{"type":"text","text":"A guide on how to use the Metadata system from the perspective of a Metadata Provider."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/MetadataProviderGuide","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadataproviderguide"},"doc://Apodini/documentation/Apodini/ResponseTransformingHandlerInitializer":{"role":"symbol","title":"ResponseTransformingHandlerInitializer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseTransformingHandlerInitializer"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformingHandlerInitializer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ResponseTransformingHandlerInitializer"}],"url":"\/documentation\/apodini\/responsetransforminghandlerinitializer"},"./Handling-Unsolicited-Events":{"title":"Handling Unsolicited Events","titleInlineContent":[{"type":"text","text":"Handling Unsolicited Events"}],"type":"link","identifier":".\/Handling-Unsolicited-Events","url":".\/Handling-Unsolicited-Events"},"doc://Apodini/documentation/Apodini/BuildingExporters":{"role":"collectionGroup","title":"Building Exporters","abstract":[{"type":"text","text":"Writing a web service with Apodini is easy - as long as there are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s suitable for your purposes. If that is not the case, you might need to adapt one, or build a new one."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingExporters","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingexporters"},"doc://Apodini/documentation/Apodini/Property":{"role":"symbol","title":"Property","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Property"}],"abstract":[{"type":"text","text":"This protocol is implemented by all of Apodini’s property wrappers that are used access functionality or information on a handling "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Property"}],"url":"\/documentation\/apodini\/property"},"doc://Apodini/documentation/Apodini/Inter-Component-Communication":{"role":"article","title":"Inter-Component Communication","abstract":[{"type":"text","text":"Web services deployed with Apodini Deployer can be distributed across different nodes. Inter-component communication enables the communication between components between these nodes."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Inter-Component-Communication","kind":"article","type":"topic","url":"\/documentation\/apodini\/inter-component-communication"},"doc://Apodini/documentation/Apodini/Response":{"role":"symbol","title":"Response","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Response"}],"url":"\/documentation\/apodini\/response"},"doc://Apodini/documentation/Apodini/ExporterConfiguration":{"role":"collectionGroup","title":"Configuration of Exporters","abstract":[{"type":"text","text":"Extensive configuration options for Apodini Exporters."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","kind":"article","type":"topic","url":"\/documentation\/apodini\/exporterconfiguration"},"doc://Apodini/documentation/Apodini/Metadata":{"role":"collectionGroup","title":"Metadata","abstract":[{"type":"text","text":"Map requirements of your web service into the implementation."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadata"},"doc://Apodini/documentation/Apodini/DSLComponents":{"role":"collectionGroup","title":"DSL Components","abstract":[{"type":"text","text":"Apodini DSL central building blocks."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DSLComponents","kind":"article","type":"topic","url":"\/documentation\/apodini\/dslcomponents"},"doc://Apodini/documentation/Apodini/Semantic-Model":{"role":"collectionGroup","title":"Semantic Model","abstract":[{"type":"text","text":"The semantic model is an intermediary model that is somewhere in the middle between the web service declaration you write using the Apodini DSL and the behavior of the web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Semantic-Model","kind":"article","type":"topic","url":"\/documentation\/apodini\/semantic-model"},"doc://Apodini/documentation/Apodini/InterfaceExporter":{"role":"symbol","title":"InterfaceExporter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InterfaceExporter"}],"abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" is a type which requires access to the web service’s structure and"},{"type":"text","text":" "},{"type":"text","text":"internals."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InterfaceExporter"}],"url":"\/documentation\/apodini\/interfaceexporter"},"doc://Apodini/documentation/Apodini/Delegate/instance()":{"role":"symbol","title":"instance()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"instance"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"D"}],"abstract":[{"type":"text","text":"Prepare the wrapped delegate "},{"type":"codeVoice","code":"D"},{"type":"text","text":" for usage."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/instance()","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/delegate\/instance()"},"doc://Apodini/documentation/Apodini/ProtocolBuffers":{"role":"collectionGroup","title":"Protocol Buffers","abstract":[{"type":"text","text":"Describe how to export the webservice via IDL exporter."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","kind":"article","type":"topic","url":"\/documentation\/apodini\/protocolbuffers"},"doc://Apodini/documentation/Apodini/RetrieveRelationship":{"role":"collectionGroup","title":"Retrieving Relationship Information","abstract":[{"type":"text","text":"This proposal describes how relationship information can be generated from the DSL, introduces some concepts"},{"type":"text","text":" "},{"type":"text","text":"to give hints for relationship retrieval and adds mechanisms to manually define hints."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/RetrieveRelationship","kind":"article","type":"topic","url":"\/documentation\/apodini\/retrieverelationship"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/Delegate":{"role":"symbol","title":"Delegate","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Delegate"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" is a lazy version of "},{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":". That is, your delegate "},{"type":"codeVoice","code":"D"},{"type":"text","text":" can wrap"},{"type":"text","text":" "},{"type":"text","text":"multiple "},{"type":"codeVoice","code":"Property"},{"type":"text","text":"s and their functionality is maintained. The "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" type makes its wrapped"},{"type":"text","text":" "},{"type":"text","text":"instance of "},{"type":"codeVoice","code":"D"},{"type":"text","text":" discoverable to the Apodini runtime framework. Moreover, it delays initialization and verification"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":"s to the point where you call "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" as a function. This enables you to decode"},{"type":"text","text":" "},{"type":"text","text":"input lazily and to do manual error handling in case decoding fails."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Delegate"}],"url":"\/documentation\/apodini\/delegate"},"doc://Apodini/documentation/Apodini/ResponseTransformer":{"role":"symbol","title":"ResponseTransformer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseTransformer"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ResponseTransformer"},{"type":"text","text":" transforms a "},{"type":"codeVoice","code":"response"},{"type":"text","text":" of the type "},{"type":"codeVoice","code":"InputContent"},{"type":"text","text":" to a instance conforming to "},{"type":"codeVoice","code":"Content"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"ResponseTransformer"},{"type":"text","text":" is able to map "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" types without the need to deal with an "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" type  of the previous "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It only maps in the "},{"type":"codeVoice","code":".send"},{"type":"text","text":",  "},{"type":"codeVoice","code":".finish"},{"type":"text","text":" and "},{"type":"codeVoice","code":".automatic"},{"type":"text","text":" cases."},{"type":"text","text":" "},{"type":"text","text":"If the previous Handler or ResponseTransformer returned an "},{"type":"codeVoice","code":"Response.end"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Response.nothing"},{"type":"text","text":" it is not called and will not map anything."},{"type":"text","text":" "},{"type":"text","text":"Both types ("},{"type":"codeVoice","code":"InputContent"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"type":"text","text":") have to conform to "},{"type":"codeVoice","code":"Encodable"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ResponseTransformer"}],"url":"\/documentation\/apodini\/responsetransformer"},"doc://Apodini/documentation/Apodini/Handler":{"role":"symbol","title":"Handler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Handler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" which defines an endpoint and can handle requests."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Handler"}],"url":"\/documentation\/apodini\/handler"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"}}}