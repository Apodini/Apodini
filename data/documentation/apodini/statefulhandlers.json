{"seeAlsoSections":[{"title":"Basics","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","doc:\/\/Apodini\/documentation\/Apodini\/Metadata","doc:\/\/Apodini\/documentation\/Apodini\/AllAboutReuse","doc:\/\/Apodini\/documentation\/Apodini\/CommandLineArguments","doc:\/\/Apodini\/documentation\/Apodini\/InformationAPI","doc:\/\/Apodini\/documentation\/Apodini\/UnitTesting"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apodini’s API for handling requests is the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" protocol. And that doesn’t change if you want to get more than a single request-response cycle. Apodini defines a special "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response"},{"type":"text","text":" type and additional "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s to help you in achieving exactly the behavior you want."}]},{"anchor":"The-Connection","level":3,"type":"heading","text":"The Connection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once we leave the idea of a single request-response cycle behind, we talk about a connection. A request-response cycle is the shortest form of a connection. A connection always starts with a request and ends with a response, but there could be multiple messages heading either direction in between. In order to perceive the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Connection"},{"type":"text","text":" in your application logic, you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":" with "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application\/connection"},{"type":"text","text":". The most important part about the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Connection"},{"type":"text","text":" is its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Connection\/state"},{"type":"text","text":". It tells you if the client has finished sending requests, or not."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The rule is that your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" is evaluated once for each request and at least once with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Connection\/state"},{"type":"text","text":" being "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ConnectionState\/end"},{"type":"text","text":". For each evaluation of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":", you return a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response"},{"type":"text","text":". Returning "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response\/nothing"},{"type":"text","text":", means the evaluation should not result in a response being sent to the client. Returning "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response\/send(_:information:)-72126"},{"type":"text","text":" results in the content being sent to the client. However, the connection is not closed. With "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response\/final(_:information:)-6pe1o"},{"type":"text","text":", you can send content and close the connection. Finally, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response\/end"},{"type":"text","text":" closes the connection without sending an additional response."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" greets each "},{"type":"codeVoice","code":"name"},{"type":"text","text":" that is sent to it in a bidirectional connection."}]},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Handler {","    @Parameter var name: String","","    @Environment(\\.connection) var connection","","    func handle() -> Response<String> {","        if connection.state == .open {","            return .send(\"Hello, \\(name)!\")","        } else {","            return .end","        }","    }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s where the connection may consist of more than one request are always evaluated more than once. That is because Apodini is middleware-agnostic. In order to get consistency, exporters should always evaluate the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" once for every request, plus one additional final evaluation with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Connection\/state"},{"type":"text","text":" on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ConnectionState\/end"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Maintaining-State","level":3,"type":"heading","text":"Maintaining State"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the connection consists of multiple requests, you most likely want to maintain state across evaluations of your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":". This can be done just as in SwiftUI with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/State"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Handler {","    @Parameter var name: String","","    @Environment(\\.connection) var connection","","    @State var names: [String] = []","","    func handle() -> Response<String> {","        if connection.state == .open {","            names.append(name)","            return .nothing","        } else {","            return .final(\"Hello, \\(names.joined(separator: \", \"))!\")","        }","    }","}"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By wrapping "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/State"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":" into one "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty"},{"type":"text","text":", you can often hide some complexity from your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f"},{"type":"text","text":" function."}]}],"type":"aside","name":"Tip"},{"anchor":"Handling-Unsolicited-Events","level":3,"type":"heading","text":"Handling Unsolicited Events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When writing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s with a persistent connection, there is a good chance you will need unsolicited events. Events cause Apodini to evaluate the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":". "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s are evaluated when a request arrives, or when an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":" - which is observed by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" - changes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s look at how you can create "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":"s and how you can use them to trigger an evaluation of your application logic."}]},{"anchor":"TLDR","level":4,"type":"heading","text":"TL;DR"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It works just as in SwiftUI, except we use a custom implementation of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Published"},{"type":"text","text":" instead of Combine’s."}]},{"anchor":"Emitting-Events","level":4,"type":"heading","text":"Emitting Events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any "},{"type":"codeVoice","code":"class"},{"type":"text","text":" can be an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":" without having to implement anything. It only means that it makes sense to observe this object. You’ll learn how to observe an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":" below. However, first we have to emit "},{"type":"emphasis","inlineContent":[{"type":"text","text":"events"}]},{"type":"text","text":" from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":". This can be done by changing the value of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Published"},{"type":"text","text":" property on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["class Contact: ObservableObject {","    \/\/ not wrapped with `@Published`","    var name: String","    \/\/ wrapped with `@Published`","    @Published var age: Int","","    init(name: String, age: Int) {","        self.name = name","        self.age = age","    }","","    func haveBirthday() -> Int {","        age += 1","        return age","    }","","    func changeName(to name: String) {","        self.name = name","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, a call to "},{"type":"codeVoice","code":"haveBirthday()"},{"type":"text","text":" would emit an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"event"}]},{"type":"text","text":", whereas "},{"type":"codeVoice","code":"changeName(to:)"},{"type":"text","text":" won’t."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can have as many "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Published"},{"type":"text","text":" properties on an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":" as you want, however, they have to be "},{"type":"strong","inlineContent":[{"type":"text","text":"directly"}]},{"type":"text","text":" on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":", i.e. they cannot be wrapped in another type."}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Published"},{"type":"text","text":" does not check for equality, that second line below would still emit an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"event"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let john = Contact(name: \"John Appleseed\", age: 24)","john.age = john.age"]},{"anchor":"Handling-Events","level":4,"type":"heading","text":"Handling Events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are multiple ways to make Apodini observe an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":". They all work the same, the only difference is how they are initialized."}]},{"anchor":"ObservedObject","level":5,"type":"heading","text":"@ObservedObject"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservedObject"},{"type":"text","text":" you have to provide an initial value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a small example on how you could use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservedObject"},{"type":"text","text":" on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" with persistent connection:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ After the client connects to this endpoint, the `Stopwatch` sends a message","\/\/\/ containing the `TimeInterval` since the last incoming request every 100ms.","struct Stopwatch: Handler {","    @ObservedObject var tick: Timer = Timer(100)","","    @State var start: Date = Date()","","    @Environment(\\.connection) var connection","","    func handle() -> Response<TimeInterval> {","        \/\/ the client has signaled they want to close the connection","        guard connection.state == .open else {","            return .end","        }","","        \/\/ we check `$tick.changed` to find out if the current evaluation","        \/\/ was caused by a request or the `Timer`","        if !$tick.changed {","            \/\/ if the evaluation was not caused by the `Timer` we reset the","            \/\/ `Stopwatch`","            start = Date()","            tick = Timer(100)","        }","        return .send(Date().timeIntervalSince(start))","    }","}"]},{"anchor":"EnvironmentObject","level":5,"type":"heading","text":"@EnvironmentObject"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject"},{"type":"text","text":" does not require an initial value in its initializer. Instead, you are responsible to inject an object of the right type into the local environment via a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":". See more on how this works in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/AllAboutReuse"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["@EnvironmentObject var myObjectFromLocalEnvironment: SomeType"]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you forget to inject a value at some point, your program will crash when accessing the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":"!"}]}],"type":"aside","name":"Warning"},{"anchor":"Environment","level":5,"type":"heading","text":"@Environment"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":" is very similar to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject"},{"type":"text","text":" with two differences:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Injected values are not identified by their type, but based on the "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":" you pass to the initializer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":" also refers to the global environment (i.e. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentValue"},{"type":"text","text":"s) if there is no fitting value available in the local environment."}]}]}]},{"type":"codeListing","syntax":"swift","code":["@Environment(\\Some.keyPath) var myObjectFromLocalOrGlobalEnvironment"]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Again, if you forget to inject a value at some point, your program will crash when accessing the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":"!"}]}],"type":"aside","name":"Warning"},{"anchor":"Event-Cancellation","level":4,"type":"heading","text":"Event Cancellation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you change the value of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Published"},{"type":"text","text":" property, its value changes immediately and this can also be perceived when accessing the value via "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservedObject"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":" on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":". However, the evaluation that is triggered by the change is done asynchronically. That is, the following sequence of events is possible:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Published"},{"type":"text","text":" property is changed"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" is evaluated because of a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"request event"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" is evaluated because of the change to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Published"},{"type":"text","text":" property ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"unsolicited event"}]},{"type":"text","text":")"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In step 2, you can already see that the actual value has changed, however the "},{"type":"codeVoice","code":".changed"},{"type":"text","text":" property of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservedObject"},{"type":"text","text":"\/"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject"},{"type":"text","text":"\/"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":" you are accessing the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":" through is still "},{"type":"codeVoice","code":"false"},{"type":"text","text":". The "},{"type":"codeVoice","code":".changed"},{"type":"text","text":" property is only set "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for step 3 (in a synchronous manner)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Moreover, in step 2, the evaluation could cause the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":" to be replaced by a different "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject"},{"type":"text","text":". In that case, the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unsolicited event"}]},{"type":"text","text":" would be cancelled and step 3 would be omitted."}]},{"anchor":"Representation-on-the-Wire","level":3,"type":"heading","text":"Representation on the Wire"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You might think now: ok, but what about e.g. HTTP 1.x, which can only handle one request and one response? How is this even supposed to work?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The answer is: it might not and that is ok."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not every exporter will be able to represent your endpoint exactly as you imagined, just because your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" requires functionality that isn’t supported by the exporter’s middleware. In that case the exporter should print a warning on startup. However, the exporter should always try to get as close as possible to the desired functionality. E.g. a HTTP exporter could establish a session with the client to create the illusion of a connection, or it could allow the client to multiplex a series of message into the body of a single request. Finally, if all that doesn’t help, you just need to switch to a different exporter\/middleware that actually fulfills your requirements."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes it can happen that the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" misinterprets how your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" should be represented on the wire. If that happens, you can try to make it explicit using "},{"type":"codeVoice","code":"CommunicationPattern"},{"type":"text","text":". Check out "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPatternMetadata"},{"type":"text","text":" for more information on how to do that."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to read more about the reasoning and details of this, head over to the advanced section: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern"},{"type":"text","text":"."}]}]}],"variants":[{"paths":["\/documentation\/apodini\/statefulhandlers"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/StatefulHandlers","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Usually endpoints only handle one request and answer with one response. However, in certain cases, this is not enough. Apodini sets no restrictions on this."}],"kind":"article","metadata":{"modules":[{"name":"Apodini"}],"role":"collectionGroup","title":"Stateful Handlers"},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"]]},"topicSections":[{"title":"The Connection","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Connection","doc:\/\/Apodini\/documentation\/Apodini\/ConnectionState","doc:\/\/Apodini\/documentation\/Apodini\/Response","doc:\/\/Apodini\/documentation\/Apodini\/ConnectionEffect"]},{"title":"Maintaining State","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/State","doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty"]},{"title":"Handling Unsolicited Events","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject","doc:\/\/Apodini\/documentation\/Apodini\/Published","doc:\/\/Apodini\/documentation\/Apodini\/ObservedObject","doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject","doc:\/\/Apodini\/documentation\/Apodini\/Environment","doc:\/\/Apodini\/documentation\/Apodini\/Delegate"]}],"references":{"doc://Apodini/documentation/Apodini/CommunicationPatternMetadata":{"role":"symbol","title":"CommunicationPatternMetadata","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CommunicationPatternMetadata"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPatternMetadata"},{"type":"text","text":" can be used to explicitly declare a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"CommunicationPattern"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPatternMetadata","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CommunicationPatternMetadata"}],"url":"\/documentation\/apodini\/communicationpatternmetadata"},"doc://Apodini/documentation/Apodini/Delegate":{"role":"symbol","title":"Delegate","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Delegate"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" is a lazy version of "},{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":". That is, your delegate "},{"type":"codeVoice","code":"D"},{"type":"text","text":" can wrap"},{"type":"text","text":" "},{"type":"text","text":"multiple "},{"type":"codeVoice","code":"Property"},{"type":"text","text":"s and their functionality is maintained. The "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" type makes its wrapped"},{"type":"text","text":" "},{"type":"text","text":"instance of "},{"type":"codeVoice","code":"D"},{"type":"text","text":" discoverable to the Apodini runtime framework. Moreover, it delays initialization and verification"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":"s to the point where you call "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" as a function. This enables you to decode"},{"type":"text","text":" "},{"type":"text","text":"input lazily and to do manual error handling in case decoding fails."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Delegate"}],"url":"\/documentation\/apodini\/delegate"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/Parameter":{"role":"symbol","title":"Parameter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parameter"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":" property wrapper can be used to express input in "},{"type":"codeVoice","code":"Components"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parameter"}],"url":"\/documentation\/apodini\/parameter"},"doc://Apodini/documentation/Apodini/UnitTesting":{"role":"collectionGroup","title":"Unit Testing in Apodini","abstract":[{"type":"text","text":"Show how to create a typical test class for an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/UnitTesting","kind":"article","type":"topic","url":"\/documentation\/apodini\/unittesting"},"doc://Apodini/documentation/Apodini/ConnectionState/end":{"role":"symbol","title":"ConnectionState.end","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"end"}],"abstract":[{"type":"text","text":"The request is the last in the current client stream."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ConnectionState\/end","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/connectionstate\/end"},"doc://Apodini/documentation/Apodini/Response/end":{"role":"symbol","title":"end","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"end"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Response","preciseIdentifier":"s:7Apodini8ResponseV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response\/end","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/response\/end"},"doc://Apodini/documentation/Apodini/Handler/handle()-3440f":{"defaultImplementations":3,"role":"symbol","title":"handle()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"}],"abstract":[{"type":"text","text":"A function that is called when a request reaches the "},{"type":"codeVoice","code":"Handler"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/apodini\/handler\/handle()-3440f"},"doc://Apodini/documentation/Apodini/Connection/state":{"role":"symbol","title":"state","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ConnectionState","preciseIdentifier":"s:7Apodini15ConnectionStateO"}],"abstract":[{"type":"text","text":"Holds the state of the current client-side stream."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Connection\/state","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/connection\/state"},"doc://Apodini/documentation/Apodini/State":{"role":"symbol","title":"State","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"abstract":[{"type":"text","text":"State can be used to maintain state across multiple evaluations of the same "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":".."},{"type":"text","text":" "},{"type":"text","text":"This is especially helpful for "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s which use "},{"type":"codeVoice","code":"Connection"},{"type":"text","text":" and do not instantly return"},{"type":"text","text":" "},{"type":"codeVoice","code":"Response.final(_)"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/State","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"State"}],"url":"\/documentation\/apodini\/state"},"doc://Apodini/documentation/Apodini/BuildingBlocks":{"role":"collectionGroup","title":"Apodini’s Building Blocks","abstract":[{"type":"text","text":"This chapter introduces you to the most important building blocks of an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingblocks"},"doc://Apodini/documentation/Apodini/DynamicProperty":{"role":"symbol","title":"DynamicProperty","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicProperty"}],"abstract":[{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":" allows for wrapping "},{"type":"codeVoice","code":"Property"},{"type":"text","text":"s while maintaining their functionality. By conforming a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" to "},{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":" "},{"type":"text","text":"you make this "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"’s properties discoverable to the Apodini runtime framework. This can be used to e.g. combine"},{"type":"text","text":" "},{"type":"text","text":"two property wrappers provided by the Apodini framework into one that merges their functionality"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DynamicProperty"}],"url":"\/documentation\/apodini\/dynamicproperty"},"doc://Apodini/documentation/Apodini/Component":{"role":"symbol","title":"Component","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Component"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" is the central building block of  Apodini. Each component handles a specific functionality of the Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Component"}],"url":"\/documentation\/apodini\/component"},"doc://Apodini/documentation/Apodini/EnvironmentObject":{"role":"symbol","title":"EnvironmentObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentObject"}],"abstract":[{"type":"text","text":"A property wrapper to inject pre-defined values  to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EnvironmentObject"}],"url":"\/documentation\/apodini\/environmentobject"},"doc://Apodini/documentation/Apodini/ObservableObject":{"role":"symbol","title":"ObservableObject","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableObject"}],"abstract":[{"type":"text","text":"An object that publishes changes of "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties."},{"type":"text","text":" "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"s are used with the property wrapper "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" inside of "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s or "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"s to re-evaluate them."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservableObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservableObject"}],"url":"\/documentation\/apodini\/observableobject"},"doc://Apodini/documentation/Apodini/Response/nothing":{"role":"symbol","title":"nothing","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"nothing"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Response","preciseIdentifier":"s:7Apodini8ResponseV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response\/nothing","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/response\/nothing"},"doc://Apodini/documentation/Apodini/AllAboutReuse":{"role":"collectionGroup","title":"All About Reuse","abstract":[{"type":"text","text":"Despite its declarative nature, Apodini’s API is really flexible and enables you to build reusable components on many different levels."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/AllAboutReuse","kind":"article","type":"topic","url":"\/documentation\/apodini\/allaboutreuse"},"doc://Apodini/documentation/Apodini/Handler":{"role":"symbol","title":"Handler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Handler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" which defines an endpoint and can handle requests."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Handler"}],"url":"\/documentation\/apodini\/handler"},"doc://Apodini/documentation/Apodini/Property":{"role":"symbol","title":"Property","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Property"}],"abstract":[{"type":"text","text":"This protocol is implemented by all of Apodini’s property wrappers that are used access functionality or information on a handling "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Property"}],"url":"\/documentation\/apodini\/property"},"doc://Apodini/documentation/Apodini/Environment":{"role":"symbol","title":"Environment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Environment"}],"abstract":[{"type":"text","text":"A property wrapper to inject pre-defined values  to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Environment"}],"url":"\/documentation\/apodini\/environment"},"doc://Apodini/documentation/Apodini/CommandLineArguments":{"role":"collectionGroup","title":"Command Line Arguments Parsing","abstract":[{"type":"text","text":"Parse Command Line Arguments in an Apodini web service to dynamically adapt the configuration of the web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommandLineArguments","kind":"article","type":"topic","url":"\/documentation\/apodini\/commandlinearguments"},"doc://Apodini/documentation/Apodini/InformationAPI":{"role":"collectionGroup","title":"Information","abstract":[{"type":"text","text":"The Information API maps middleware-specific metadata of the respective wire protocol into the framework"},{"type":"text","text":" "},{"type":"text","text":"making it accessible inside a Handler."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InformationAPI","kind":"article","type":"topic","url":"\/documentation\/apodini\/informationapi"},"doc://Apodini/documentation/Apodini/Response":{"role":"symbol","title":"Response","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Response"}],"url":"\/documentation\/apodini\/response"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"doc://Apodini/documentation/Apodini/ConnectionState":{"role":"symbol","title":"ConnectionState","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConnectionState"}],"abstract":[{"type":"text","text":"Represents the state of a connection to the client."},{"type":"text","text":" "},{"type":"text","text":"For non-client-streaming requests,"},{"type":"text","text":" "},{"type":"text","text":"the default state should be "},{"type":"codeVoice","code":".end"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ConnectionState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ConnectionState"}],"url":"\/documentation\/apodini\/connectionstate"},"doc://Apodini/documentation/Apodini/EnvironmentValue":{"role":"symbol","title":"EnvironmentValue","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentValue"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Configuration"},{"type":"text","text":" which helps to store and retrieve objects using "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" and the correspond key path."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EnvironmentValue"}],"url":"\/documentation\/apodini\/environmentvalue"},"doc://Apodini/documentation/Apodini/Response/final(_:information:)-6pe1o":{"role":"symbol","title":"final(_:information:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"final"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Status","preciseIdentifier":"s:7Apodini6StatusO"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"information"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"AnyInformation","preciseIdentifier":"s:7Apodini14AnyInformationP"},{"kind":"text","text":"]) -> "},{"kind":"typeIdentifier","text":"Response","preciseIdentifier":"s:7Apodini8ResponseV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response\/final(_:information:)-6pe1o","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/response\/final(_:information:)-6pe1o"},"doc://Apodini/documentation/Apodini/InterfaceExporter":{"role":"symbol","title":"InterfaceExporter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InterfaceExporter"}],"abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" is a type which requires access to the web service’s structure and"},{"type":"text","text":" "},{"type":"text","text":"internals."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InterfaceExporter"}],"url":"\/documentation\/apodini\/interfaceexporter"},"doc://Apodini/documentation/Apodini/Response/send(_:information:)-72126":{"role":"symbol","title":"send(_:information:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Status","preciseIdentifier":"s:7Apodini6StatusO"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"information"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"AnyInformation","preciseIdentifier":"s:7Apodini14AnyInformationP"},{"kind":"text","text":"]) -> "},{"kind":"typeIdentifier","text":"Response","preciseIdentifier":"s:7Apodini8ResponseV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Response\/send(_:information:)-72126","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/response\/send(_:information:)-72126"},"doc://Apodini/documentation/Apodini/Application/connection":{"role":"symbol","title":"connection","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"connection"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Connection","preciseIdentifier":"s:7Apodini10ConnectionV"}],"abstract":[{"type":"text","text":"A Property identifying the "},{"type":"codeVoice","code":"Connection"},{"type":"text","text":" which provides an abstract view on the underlying protocol’s state."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Application\/connection","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/application\/connection"},"doc://Apodini/documentation/Apodini/ConnectionEffect":{"role":"symbol","title":"ConnectionEffect","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConnectionEffect"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ConnectionEffect"},{"type":"text","text":" describes the affect of a "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" on a connection."},{"type":"text","text":" "},{"type":"text","text":"This impacts stream connection types such as client, service or bidirectional streams"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ConnectionEffect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ConnectionEffect"}],"url":"\/documentation\/apodini\/connectioneffect"},"doc://Apodini/documentation/Apodini/Published":{"role":"symbol","title":"Published","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Published"}],"abstract":[{"type":"text","text":"Property wrapper that can be used to annotate properties inside of "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"s."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" will notify its subscribers if a "},{"type":"codeVoice","code":"Published"},{"type":"text","text":" property changes."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Published","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Published"}],"url":"\/documentation\/apodini\/published"},"doc://Apodini/documentation/Apodini/Metadata":{"role":"collectionGroup","title":"Metadata","abstract":[{"type":"text","text":"Map requirements of your web service into the implementation."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadata"},"doc://Apodini/documentation/Apodini/Connection":{"role":"symbol","title":"Connection","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Connection"}],"abstract":[{"type":"text","text":"All info related to client-connections"},{"type":"text","text":" "},{"type":"text","text":"should be handled with the "},{"type":"codeVoice","code":"Connection"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Currently, this is only the state of the connection and the request."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Connection","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Connection"}],"url":"\/documentation\/apodini\/connection"},"doc://Apodini/documentation/Apodini/ObservedObject":{"role":"symbol","title":"ObservedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservedObject"}],"abstract":[{"type":"text","text":"Property wrapper used inside of a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" that subscribes to an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Changes of "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties of the "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" will cause re-evaluations of the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservedObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservedObject"}],"url":"\/documentation\/apodini\/observedobject"}}}