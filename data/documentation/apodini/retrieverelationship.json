{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"strong","inlineContent":[{"type":"text","text":"REST"}]},{"type":"text","text":" Interface Exporter will use such relationship information to generate Hypermedia information."},{"type":"text","text":" "},{"type":"text","text":"Specifically it will generate hyperlinks which SHOULD be placed in a designated "},{"type":"codeVoice","code":"_links"},{"type":"text","text":" section."},{"type":"text","text":" "},{"type":"text","text":"A REST exporter MAY also inline those links if it can ensure that no name collisions occur."},{"type":"text","text":" "},{"type":"text","text":"This document proposes that "},{"type":"reference","isActive":true,"identifier":"https:\/\/tools.ietf.org\/html\/rfc6570"},{"type":"text","text":" SHOULD be used to encode those links."},{"type":"text","text":" "},{"type":"text","text":"Alternatively there are also more extensive JSON schemas which allow to provide more information about the structure of"},{"type":"text","text":" "},{"type":"text","text":"the endpoint (e.g. "},{"type":"reference","isActive":true,"identifier":"https:\/\/jsonapi.org"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/json-schema.org\/draft\/2019-09\/json-schema-hypermedia.html"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/kevinswiber\/siren"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"http:\/\/stateless.co\/hal_specification.html"},{"type":"text","text":")."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"strong","inlineContent":[{"type":"text","text":"GraphQL"}]},{"type":"text","text":" exporter will use such relationship information - additionally to the structure given by "},{"type":"codeVoice","code":"PathComponent"},{"type":"text","text":"s -"},{"type":"text","text":" "},{"type":"text","text":"to generate the query schema."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following chapters explain how such relationship information is retrieved."}]},{"anchor":"1-Using-the-DSL-structure","level":2,"type":"heading","text":"1. Using the DSL “structure”"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The path structure of the Webservice can be used to infer relationship information."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the following rather extensive example of a webservice:"}]},{"type":"codeListing","syntax":"swift","code":["@PathParameter var userId: User.ID","@PathParameter var postId: Post.ID","","var content: some Component {","  Group(\"user\", $userId) {","    UserHandler(userId: $userId)","    Group(\"post\", $postId) {","      PostHandler(userId: $userId, postId: $postId)","    }","    Group(\"static-info\") {","      StaticInfoHandler(userId: $userId)","      Group(\"detailed\") {","        DetailedStaticInfoHandler(userId: $userId)","      }","    }","    Group(\"a\") {","      Group(\"a\") {","        AAHandler()","      }","      Group(\"b\") {","        ABHandler()","      }","      Group(\"c\") {","        Group(\"a\") {","          ACAHandler()","        }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create Relationships for a Endpoint, Apodini will go through all subpath for the current path. A relationship is then"},{"type":"text","text":" "},{"type":"text","text":"created to all Endpoints located under that subpath. Should it be the case, that there aren’t any Endpoints registered"},{"type":"text","text":" "},{"type":"text","text":"under that subpath, Apodini will recursively search for endpoints in subpaths of the subpath."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make this more understandable consider the following pseudo code:"}]},{"type":"codeListing","syntax":"swift","code":["for child in children {","  child.collectRelationships()","}","func collectRelationships() { ","  if !endpoints.isEmpty {","    \/\/ adding endpoint to relationships","    return ","  } ","","  for child in children { ","   child.collectRelationships() ","  } ","} "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not explicitly created, but specifically important for the REST Interface Exporter: An Endpoint will always maintain a"},{"type":"text","text":" "},{"type":"text","text":"Relationship to itself with the name "},{"type":"codeVoice","code":"self"},{"type":"text","text":" (thus "},{"type":"codeVoice","code":"self"},{"type":"text","text":" is a reserved relationship name)."},{"type":"text","text":" "},{"type":"text","text":"In the case that there is also a subroute with the "},{"type":"codeVoice","code":"PathComponent"},{"type":"text","text":" named "},{"type":"codeVoice","code":"self"},{"type":"text","text":" a name conflict would occur."},{"type":"text","text":" "},{"type":"text","text":"As such a name conflict problem is unique to the REST exporter this proposal suggest that such a Relationship SHOULD"},{"type":"text","text":" "},{"type":"text","text":"be shadowed by the self referencing hyperlink."},{"type":"text","text":" "},{"type":"text","text":"The REST exporter SHOULD print a warning on startup on such occasions."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"REST:"}]},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"For the above example a "},{"type":"codeVoice","code":"GET \/user\/532"},{"type":"text","text":" request would return the following response:"}]},{"type":"codeListing","syntax":"json","code":["{","  \"id\": \"532\",","  \"name\": \"Rudi\",","  \"lastname\": \"Raser\",","  \"email\": \"rudi@raser.de\",","  \"_links\": {","    \"self\": \"https:\/\/example.api\/user\/532\",","    \"post\": \"https:\/\/example.api\/user\/532\/post\/{postId}\",","    \"static-info\": \"https:\/\/example.api\/user\/532\/static-info\",","    \"a_a\": \"https:\/\/example.api\/user\/532\/a\/a\",","    \"a_b\": \"https:\/\/example.api\/user\/532\/a\/b\",","    \"a_c_a\": \"https:\/\/example.api\/user\/532\/a\/c\/a\"","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the core concepts of REST (with HATEOAS) is, that a client does not need to know anything about the path structure."},{"type":"text","text":" "},{"type":"text","text":"Instead, just like a web browser, a client follows hyperlinks returned from the web service."},{"type":"text","text":" "},{"type":"text","text":"This allows you to change the path structure of your REST service - keeping the same named links at the same places -"},{"type":"text","text":" "},{"type":"text","text":"without breaking compatibility for your clients."},{"type":"text","text":" "},{"type":"text","text":"To support such scenarios, chapter "},{"type":"codeVoice","code":"3."},{"type":"text","text":" illustrates some ways"},{"type":"text","text":" "},{"type":"text","text":"to manually define or modify relationship information."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GraphQL:"}]},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"For the above example a GraphQL query could look like the following:"}]},{"type":"codeListing","syntax":"graphql","code":["query {","  user(id: \"532\") {","    name","    lastname","    post(id: \"123\") {","      title","    }","    static-information {","      info0","      detailed {","        detailedInfo0","      }","    }","  }","}"]},{"anchor":"2-Using-Type-Information","level":2,"type":"heading","text":"2. Using Type Information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the structure of the web service ("},{"type":"codeVoice","code":"1."},{"type":"text","text":") is already pretty powerful,"},{"type":"text","text":" "},{"type":"text","text":"but doesn’t allow for relationships between handlers which are on the same level or on different paths of the path component tree."},{"type":"text","text":" "},{"type":"text","text":"This chapter highlights how we can nonetheless retrieve relationship information by looking at type information"},{"type":"text","text":" "},{"type":"text","text":"(and without the need for the user to specify everything manually)."}]},{"anchor":"21-Indexing-Endpoints-by-their-Handler-return-type","level":3,"type":"heading","text":"2.1 Indexing Endpoints by their Handler return type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to derive relationships from type information, we first need to collect type information of all Endpoints."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The process of creating the return type Index is demonstrated using the following example web service:"}]},{"type":"codeListing","syntax":"swift","code":["struct User: Identifiable {","  var id: String","  var name: String","  var lastname: String","  var email: String","}","","struct StatusInformation {","  var uptime: UInt64","  \/\/ ...","}","","struct TestService: WebService {","  @PathParameter var userId: User.ID","","  var content: some Component {","    Group(\"status\") {","      StatusInformationHandler()","    }","    Group(\"user\", $userId) {","      UserHandler(userId: $userId)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be observed that the "},{"type":"codeVoice","code":"StatusInformationHandler"},{"type":"text","text":" returns instances of type "},{"type":"codeVoice","code":"StatusInformation"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This information is saved, so that we can for a certain type list all Endpoints which return that exact type."},{"type":"text","text":" "},{"type":"text","text":"The goal is then, that the user can annotate endpoints or data structures with type information (e.g. "},{"type":"codeVoice","code":"StatusInformation.self"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to indicate relationships. This is explained in the following chapters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we detect, that the return type of a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":" protocol, there are some"},{"type":"text","text":" "},{"type":"text","text":"additional steps we need to check."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we can match the type of the "},{"type":"codeVoice","code":".id"},{"type":"text","text":" property to any "},{"type":"codeVoice","code":"@PathParameter"},{"type":"text","text":" (with the same type) contained in the path,"},{"type":"text","text":" "},{"type":"text","text":"we save that return type to our index (Though: see note below)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We we can’t match the "},{"type":"codeVoice","code":".id"},{"type":"text","text":" property to any "},{"type":"codeVoice","code":"@PathParameter"},{"type":"text","text":" the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" will be ignored and not indexed."},{"type":"text","text":" "},{"type":"text","text":"Instead such endpoints can be used as a source of relationship information"},{"type":"text","text":" "},{"type":"text","text":"(see "},{"type":"reference","isActive":true,"identifier":"#231-implicitly"},{"type":"text","text":")."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some special cases:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Endpoints containing a "},{"type":"codeVoice","code":"@PathParameter"},{"type":"text","text":" in their path, but not returning a type"},{"type":"text","text":" "},{"type":"text","text":"conforming "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":" in their "},{"type":"codeVoice","code":"handle()"},{"type":"text","text":" (meaning we can’t match a property to the path parameter), will not be indexed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In a case where multiple "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" return the same type (e.g. multiple handlers returning "},{"type":"codeVoice","code":"StatusInformation"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"non of them are added to the index. Instead we rely on the user to mark the appropriate "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"#22-using-defaultrelationship-to-resolve-ambiguous-return-type-information"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Note: As the type of a "},{"type":"codeVoice","code":"@PathParameter"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"LosslessStringConvertible"},{"type":"text","text":" it most certainly is either a"},{"type":"text","text":" "},{"type":"codeVoice","code":"String"},{"type":"text","text":" or an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":". Meaning, checking if the type of the "},{"type":"codeVoice","code":"User.id"},{"type":"text","text":" property is equal to "},{"type":"codeVoice","code":"User.ID"},{"type":"text","text":" type might"},{"type":"text","text":" "},{"type":"text","text":"not be strong enough."},{"type":"text","text":" "},{"type":"text","text":"Thus it could be necessary for "},{"type":"codeVoice","code":"@PathParemeter"},{"type":"text","text":"s to specify the type: e.g. "},{"type":"codeVoice","code":"@PathParameter(type: User.self)"},{"type":"text","text":" where"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"type"},{"type":"text","text":" argument must conform to the "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":" protocol (or something similar, as "},{"type":"codeVoice","code":"Identifiable.ID"},{"type":"text","text":" conforms"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and we actually need "},{"type":"codeVoice","code":"LosslessStringConvertible"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"This would also need to be addressed for "},{"type":"codeVoice","code":"@Parameter(.http(.path))"},{"type":"text","text":" declarations."}]}]},{"anchor":"22-Using-defaultRelationship-to-resolve-ambiguous-return-type-information","level":3,"type":"heading","text":"2.2. Using .defaultRelationship to resolve ambiguous return type information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As describe in "},{"type":"reference","isActive":true,"identifier":"#21-indexing-endpoints-by-their-handler-return-type"},{"type":"text","text":" Apodini won’t index type information"},{"type":"text","text":" "},{"type":"text","text":"if it isn’t unambiguous."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In such cases where there are multiple "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" returning the same type, the user can use "},{"type":"codeVoice","code":".defaultRelationship"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"explicitly mark which Endpoint should be indexed for the given return type."}]},{"type":"codeListing","syntax":"swift","code":["struct StatusInformation {","  var uptime: UInt64","  \/\/ ...","}","\/\/ ...","var content: some Component {","  Group(\"status\") {","    StatusInformationHandler()","      .defaultRelationship()","  }","  Group(\"status-information\") {","    StatusInformationHandler()","  }","}"]},{"anchor":"23-Creating-Relationships-by-referencing-type-information","level":3,"type":"heading","text":"2.3. Creating Relationships by referencing type information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the last few chapters have shown how endpoints can be indexed by their return type."},{"type":"text","text":" "},{"type":"text","text":"This chapter describes how we can create relationships to those endpoints by referencing those indexed return types."}]},{"anchor":"231-Implicitly","level":4,"type":"heading","text":"2.3.1 Implicitly"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"overridingTitleInlineContent":[{"type":"text","text":"2.1"}],"isActive":true,"type":"reference","identifier":"#21-indexing-endpoints-by-their-handler-return-type","overridingTitle":"2.1"},{"type":"text","text":" we already talked about "},{"type":"codeVoice","code":"Handlers"},{"type":"text","text":" which return"},{"type":"text","text":" "},{"type":"text","text":"a type conforming to "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":", but don’t have a matching "},{"type":"codeVoice","code":"@PathParameter"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"MeUserHandler"},{"type":"text","text":" of the following example falls into this category:"}]},{"type":"codeListing","syntax":"swift","code":["struct TestService: WebService {","  @PathParameter var userId: User.ID","","  var content: some Component {","    Group(\"user\", $userId) {","      UserHandler(userId: $userId)","      \/\/ could contain other routes giving more information for the given user, e.g. .\/posts\/:postId","    }","    Group(\"me\") {","      MeUserHandler() \/\/ returns type `User`","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In such a case we can contact our type index we built in "},{"type":"codeVoice","code":"2.1"},{"type":"text","text":" and search for any endpoints responsible for this type."},{"type":"text","text":" "},{"type":"text","text":"In the example above we would find "},{"type":"codeVoice","code":"UserHandler"},{"type":"text","text":". Thus "},{"type":"codeVoice","code":"MeUserHandler"},{"type":"text","text":" will inherit any relationship information from "},{"type":"codeVoice","code":"UserHandler"},{"type":"text","text":" (most importantly the "},{"type":"codeVoice","code":"self"},{"type":"text","text":" relationship for the REST Interface Exporter)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach heavily relies on the fact that the "},{"type":"codeVoice","code":"MeUserHandler"},{"type":"text","text":" returns the same type as the "},{"type":"codeVoice","code":"UserHandler"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"As this might not always be given, one can also annotate that explicitly using the mechanism described in"},{"type":"text","text":" "},{"type":"codeVoice","code":"2.3.2.2"},{"type":"text","text":"."}]},{"anchor":"232-Explicitly","level":4,"type":"heading","text":"2.3.2 Explicitly"},{"anchor":"2321-Relationship-Metadata-References","level":5,"type":"heading","text":"2.3.2.1 Relationship Metadata: References"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this chapter we consider the following example:"}]},{"type":"codeListing","syntax":"swift","code":["struct Article: Content, Identifiable {","  var id: String","  var heading: String","  var content: String","","  var writtenBy: String","","  static var metadata: Metadata {","    References<User>(as: \"author\", identifiedBy: \\.writtenBy)","  }","}","\/\/ ...","var content: some Component {","  Group(\"user\", $userId) {","    UserHandler(userId: $userId)","  }","  Group(\"article\", $articleId) {","    ArticleHandler(articleId: $articleId)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The idea is, that every "},{"type":"codeVoice","code":"Article"},{"type":"text","text":" is written by a certain "},{"type":"codeVoice","code":"User"},{"type":"text","text":" (aka the author)."},{"type":"text","text":" "},{"type":"text","text":"As querying "},{"type":"codeVoice","code":"User"},{"type":"text","text":" instances is handled by the "},{"type":"codeVoice","code":"UserHandler"},{"type":"text","text":", the "},{"type":"codeVoice","code":"Article"},{"type":"text","text":" must be able to reference"},{"type":"text","text":" "},{"type":"text","text":"that somehow. This can be done by creating a relationship "},{"type":"codeVoice","code":"References"},{"type":"text","text":" definition for a property which holds a unique"},{"type":"text","text":" "},{"type":"text","text":"identifier for some type (conforming to "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example, the user indicates that the "},{"type":"codeVoice","code":"Article"},{"type":"text","text":" struct references a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" instance with the "},{"type":"codeVoice","code":".writtenBy"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"(meaning that property hold the value for the "},{"type":"codeVoice","code":".id"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"User"},{"type":"text","text":" type) and additionally specifies"},{"type":"text","text":" "},{"type":"text","text":"that the relationship is called "},{"type":"codeVoice","code":"author"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"With the specified type information we can search for the endpoint as describe in "},{"type":"codeVoice","code":"2.1"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Exporters which make use of relationship information (REST and GraphQL) MUST NOT incorporate the property"},{"type":"text","text":" "},{"type":"text","text":"(in the example"},{"type":"codeVoice","code":"writtenBy"},{"type":"text","text":") into the response or the query schema. Instead it is replaced by the defined relationship."},{"type":"text","text":" "},{"type":"text","text":"Other exporters should ideally rename such fields by adding a "},{"type":"codeVoice","code":"Id"},{"type":"text","text":" suffix (e.g. "},{"type":"codeVoice","code":"writtenById"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"REST:"}]},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"Below is a example response generated from a REST exporter for such a "},{"type":"codeVoice","code":"ArticleHandler"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"json","code":["{","  \"id\": \"3826\",","  \"heading\": \"Retrieving Relationship Information\",","  \"content\": \"...\",","  \"_links\": {","    \"author\": \"https:\/\/example.api\/user\/472\",","    \"self\": \"https:\/\/example.api\/article\/3826\"","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GraphQL:"}]},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"A graphql query could look like the following:"}]},{"type":"codeListing","syntax":"graphql","code":["query {","  article(id: \"3826\") {","    heading","    content","    author {","      id","      name","      lastname","    }","  }","}"]},{"anchor":"2322-Relationship-Metadata-Inherits","level":5,"type":"heading","text":"2.3.2.2 Relationship Metadata: `Inherits`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A special case to the previous chapter is when you want to create a Relationship definition for the primary identifier"},{"type":"text","text":" "},{"type":"text","text":"of the data structure (e.g. the "},{"type":"codeVoice","code":".id"},{"type":"text","text":" property of an "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have seen how this can work automatically in "},{"type":"codeVoice","code":"2.3.1"},{"type":"text","text":", when the return type of two "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is the same."},{"type":"text","text":" "},{"type":"text","text":"But as explained, this isn’t possible if the return types don’t match up."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead the user can explicitly define a "},{"type":"codeVoice","code":"self"},{"type":"text","text":" relationship. As we don’t want the user to rely on any magic string constant"},{"type":"text","text":" "},{"type":"text","text":"(e.g. by defining "},{"type":"codeVoice","code":"References<User>(as: \"self\", identifiedBy: \\.id)"},{"type":"text","text":") we introduce another relationship definition"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"Inherits<User>(identifiedBy: \\.id)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Additionally a "},{"type":"codeVoice","code":"References"},{"type":"text","text":" definition MUST NOT have the reserved name "},{"type":"codeVoice","code":"self"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Similar to "},{"type":"codeVoice","code":"2.3.1"},{"type":"text","text":" such a "},{"type":"codeVoice","code":"Inherits"},{"type":"text","text":" definition will inherit all relationship information from the"},{"type":"text","text":" "},{"type":"text","text":"destination."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below illustrates such a definition."}]},{"type":"codeListing","syntax":"swift","code":["struct MeUser: Content, Identifiable {","  var id: String","  var loginToken: String","","  static var metadata: Metadata {","    Inherits<User>(identifiedBy: \\.id)","  }","}","\/\/ ...","var content: some Component {","  Group(\"user\", $userId) {","    UserHandler(userId: $userId)","    \/\/ could contain other routes giving more information for the given user, e.g. .\/posts\/:postId","  }","  Group(\"me\") {","    MeUserHandler()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"REST:"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A REST exporter will inherit the "},{"type":"codeVoice","code":"_links"},{"type":"text","text":" section from "},{"type":"codeVoice","code":"\/user\/:userId"},{"type":"text","text":", any relationships of that route but also"},{"type":"text","text":" "},{"type":"text","text":"overwriting the "},{"type":"codeVoice","code":"self"},{"type":"text","text":" link."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A request to the "},{"type":"codeVoice","code":"me"},{"type":"text","text":" endpoint would then generate a response like the following:"}]},{"type":"codeListing","syntax":"json5","code":["{","  \"id\": \"532\",","  \"loginToken\": \"rik0O1YK5wKjUY6CASjVRik0O1YK5wKjUY6CASjV\",","  \"_links\": {","    \"self\": \"https:\/\/example.api\/user\/532\",","    \"post\": \"https:\/\/example.api\/user\/532\/post\/{postId}\"","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GraphQL:"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order for the querier to be able to access properties of "},{"type":"codeVoice","code":"User"},{"type":"text","text":", the GraphQL exporter would need to"},{"type":"text","text":" "},{"type":"text","text":"inline properties contained in "},{"type":"codeVoice","code":"User"},{"type":"text","text":" but not contained in "},{"type":"codeVoice","code":"MeUser"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A graphql query for the given example might look like the following:"}]},{"type":"codeListing","syntax":"graphql","code":["query {","  me {","    id","    loginToken","    name","    lastname","    post(postId: \"123\") {","      title","    }","  }","}"]},{"anchor":"3-Manually-defining-Relationship-Information","level":2,"type":"heading","text":"3. Manually defining Relationship Information"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This chapter imagines ways how a user could manually override or make modifications to relationship information."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To provide such functionality the proposal introduces multiple "},{"type":"codeVoice","code":"PathComponentModifiers"},{"type":"text","text":", similar to the already"},{"type":"text","text":" "},{"type":"text","text":"existing "},{"type":"codeVoice","code":"ComponentModifiers"},{"type":"text","text":". As the "},{"type":"codeVoice","code":"PathComponents"},{"type":"text","text":" are passed as arguments to a "},{"type":"codeVoice","code":"Group"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"this could quickly get messy in terms of code readability."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thus this proposal additionally introduces a "},{"type":"codeVoice","code":"PathComponentFunctionBuilder"},{"type":"text","text":" with a corresponding initializer for the "},{"type":"codeVoice","code":"Group"},{"type":"text","text":" struct."},{"type":"text","text":" "},{"type":"text","text":"Examples are shown in the following sub chapters."}]},{"anchor":"31-Overriding-the-relationship-name","level":3,"type":"heading","text":"3.1. Overriding the relationship name"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The in chapter "},{"type":"codeVoice","code":"1"},{"type":"text","text":" described inference approach uses the string"},{"type":"text","text":" "},{"type":"text","text":"description of the "},{"type":"codeVoice","code":"PathComponent"},{"type":"text","text":" as the relationship name. This may not fit everybody’s needs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Such a customization mechanism is provided with the "},{"type":"codeVoice","code":".relationship"},{"type":"text","text":" modifier (with the external parameter "},{"type":"codeVoice","code":"name"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["var content: some Component {","  Group {","    \"test\".relationship(name: \"new-name\")","  } content: {","    Handler()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same "},{"type":"codeVoice","code":"PathComponent"},{"type":"text","text":" name cannot be used multiple times on the same depth in the "},{"type":"codeVoice","code":"PathComponent"},{"type":"text","text":" tree."},{"type":"text","text":" "},{"type":"text","text":"Similarly the renamed Relationship MUST NOT collide with any other relationship name on the same depth."}]},{"anchor":"32-Adding-new-relationships","level":3,"type":"heading","text":"3.2. Adding new relationships"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To support rearranging components without breaking HATEOAS linking information or the GraphQL query schema,"},{"type":"text","text":" "},{"type":"text","text":"a user can also "},{"type":"strong","inlineContent":[{"type":"text","text":"add"}]},{"type":"text","text":" their own relationship definitions."}]},{"anchor":"321-Providing-type-hints","level":4,"type":"heading","text":"3.2.1. Providing type hints"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By using the information gained in "},{"type":"codeVoice","code":"2.1."},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"2.2."},{"type":"text","text":", the user can create manual relationships"},{"type":"text","text":" "},{"type":"text","text":"just be specifying the return type of the destination and the relationship name using the "},{"type":"codeVoice","code":".relationship(name:to:)"},{"type":"text","text":" modifier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Such a definition might look like the following:"}]},{"type":"codeListing","syntax":"swift","code":["struct TestService: WebService {","  @PathParameter var userId: User.ID","","  var content: some Component {","    Group {","      \"user\"","      $userId","        .relationship(name: \"greeter\", to: Greeting.self)","    } content: {","      Handler()","    }","    Group(\"greeting\", $userId) {","      Greeter() \/\/ returns Greeting","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"REST:"}]},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"A request to the "},{"type":"codeVoice","code":"\/user\/:userId"},{"type":"text","text":" endpoint would look like the following:"}]},{"type":"codeListing","syntax":"json","code":["{","  \"id\": \"123\",","  \"name\": \"Rudi\",","  \"lastname\": \"Raser\",","  \"_links\": {","    \"self\": \"https:\/\/example.api\/user\/123\",","    \"greeter\": \"https:\/\/example.api\/greeting\"","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"GraphQL:"}]},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"A graphql endpoint could receive the following query:"}]},{"type":"codeListing","syntax":"graphql","code":["query {","  user(id: \"123\") {","    id","    name","    lastname","    greeter {","      ...","    }","  }","}"]},{"anchor":"322-Creating-Relationship-instances","level":4,"type":"heading","text":"3.2.2. Creating `Relationship` instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As we don’t want users to manually list every "},{"type":"codeVoice","code":"PathComponent"},{"type":"text","text":" for the destination of the relationship, the user can create"},{"type":"text","text":" "},{"type":"text","text":"instances of "},{"type":"codeVoice","code":"Relationship"},{"type":"text","text":" which are then referenced with "},{"type":"codeVoice","code":".destination(of:)"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":".relationship(to:)"},{"type":"text","text":" modifiers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Those "},{"type":"codeVoice","code":"Relationship"},{"type":"text","text":" instances can be defined anywhere, preferably as a property of a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below showcases the use of a "},{"type":"codeVoice","code":"Relationship"},{"type":"text","text":" instance:"}]},{"type":"codeListing","syntax":"swift","code":["struct TestService: WebService {","  @PathParameter var userId: User.ID","","  let greeterRelationship = Relationship(\"greeter\") ","","  var content: some Component {","    Group {","      \"user\"","      $userId","        .relationship(to: greeterRelationship)","    } content: {","      Handler()","    }","    Group(\"greeting\", $userId) {","      Greeter()","        .destination(of: greeterRelationship)","    }","  }","}"]},{"anchor":"33-Hiding-Relationships","level":3,"type":"heading","text":"3.3. Hiding Relationships"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Specifically for the REST Interface Exporter it may be a sensible decision for a user to hide relationship information"},{"type":"text","text":" "},{"type":"text","text":"generated by Apodini."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is made possible by introducing a "},{"type":"codeVoice","code":".hideLink"},{"type":"text","text":" modifier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The GraphQL Interface Exporter MUST ignore the "},{"type":"codeVoice","code":"hidden"},{"type":"text","text":" flag and treat it like any other relationship."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Considering the example below, a REST exporter would not include the "},{"type":"codeVoice","code":"test"},{"type":"text","text":" relationship when serving a request to "},{"type":"codeVoice","code":"\/"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"But a request directly made to "},{"type":"codeVoice","code":"\/test"},{"type":"text","text":" will nonetheless be answered."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If GraphQL would not ignore the "},{"type":"codeVoice","code":"hidden"},{"type":"text","text":" flag, the endpoint "},{"type":"codeVoice","code":"\/test"},{"type":"text","text":" would no longer be accessible."},{"type":"text","text":" "},{"type":"text","text":"Thus GraphQL will ignore the "},{"type":"codeVoice","code":"hidden"},{"type":"text","text":" flag and the modifier is specifically named "},{"type":"codeVoice","code":"hideLink"},{"type":"text","text":" (and not "},{"type":"codeVoice","code":"hideRelationship"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to indicate this behavior."}]},{"type":"codeListing","syntax":"swift","code":["var content: some Component {","  Group {","    \"test\".hideLink()","  } content: {","    Handler()","  }","}"]},{"anchor":"4-Appendix","level":2,"type":"heading","text":"4. Appendix"},{"anchor":"41-Discussion-DSL-vs-Property-Wrapper","level":3,"type":"heading","text":"4.1. Discussion: DSL vs. Property Wrapper"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The draft version of this document proposed that instead of using a DSL approach for the two relationship definitions"},{"type":"text","text":" "},{"type":"codeVoice","code":"References"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Inherits"},{"type":"text","text":" we could use property wrappers to annotate those properties which hold the "},{"type":"codeVoice","code":"Identifiable.ID"},{"type":"text","text":" "},{"type":"text","text":"value for the referenced type."},{"type":"text","text":" "},{"type":"text","text":"This would be for one pretty elegant, but we could also treat Fluents "},{"type":"codeVoice","code":"@Parent"},{"type":"text","text":" the same way as a "},{"type":"codeVoice","code":"@References"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However this approach doesn’t meet our requirements."},{"type":"text","text":" "},{"type":"text","text":"Relationship information must be available at startup, so e.g. GraphQL can create its query schema."},{"type":"text","text":" "},{"type":"text","text":"Information stored in property wrappers can only be inspected when having a instance of that type"},{"type":"text","text":" "},{"type":"text","text":"(and experiments (ab)using "},{"type":"codeVoice","code":"createInstance"},{"type":"text","text":" of the Runtime frame have failed)."},{"type":"text","text":" "},{"type":"text","text":"Consequentially we can’t use Property Wrappers."}]},{"anchor":"42-Thought-experiment-Reverse-lookup-for-relationship-definitions","level":3,"type":"heading","text":"4.2. Thought experiment: Reverse lookup for relationship definitions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the example web service from "},{"type":"codeVoice","code":"2.3.2.1"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@PathParameter var userId: User.ID","","var content: some Component {","  Group(\"user\", $userId) {","    UserHandler(userId: $userId)","  }","  Group(\"article\", $articleId) {","    ArticleHandler(articleId: $articleId)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Background: One could imagine that in the future a REST exporter could automatically generate"},{"type":"text","text":" "},{"type":"text","text":"Pagination handlers for collection endpoints like "},{"type":"codeVoice","code":"\/user"},{"type":"text","text":" and "},{"type":"codeVoice","code":"\/article"},{"type":"text","text":". At this point the pagination"},{"type":"text","text":" "},{"type":"text","text":"generator could be extended to also incorporate some relationship functionality."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As describe in "},{"type":"codeVoice","code":"2.3.2.1"},{"type":"text","text":" we can already add a relationship to the "},{"type":"codeVoice","code":".author"},{"type":"text","text":" in every response"},{"type":"text","text":" "},{"type":"text","text":"returned on the "},{"type":"codeVoice","code":"\/article\/:articleId"},{"type":"text","text":" endpoint."},{"type":"text","text":" "},{"type":"text","text":"What we currently can’t do is the reverse lookup, retrieve all articles written by a certain "},{"type":"codeVoice","code":"User"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Right now the user would need to manually support that by supplying an appropriate "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Provided that the REST exporter is able to generate such a pagination route, this feature could be extended"},{"type":"text","text":" "},{"type":"text","text":"to incorporate relationship information and add support for a "},{"type":"codeVoice","code":"author"},{"type":"text","text":" query parameter."},{"type":"text","text":" "},{"type":"text","text":"A request to "},{"type":"codeVoice","code":"\/article?author={userId}"},{"type":"text","text":" would then return a array of articles written by the specified "},{"type":"codeVoice","code":"User"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/retrieverelationship"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/RetrieveRelationship","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This proposal describes how relationship information can be generated from the DSL, introduces some concepts"},{"type":"text","text":" "},{"type":"text","text":"to give hints for relationship retrieval and adds mechanisms to manually define hints."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Retrieving Relationship Information","role":"collectionGroup","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"]]},"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/BuildingExporters","doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation","doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","doc:\/\/Apodini\/documentation\/Apodini\/DSLComponents","doc:\/\/Apodini\/documentation\/Apodini\/Semantic-Model","doc:\/\/Apodini\/documentation\/Apodini\/Inter-Component-Communication"],"generated":true}],"references":{"#21-indexing-endpoints-by-their-handler-return-type":{"title":"2.1.","titleInlineContent":[{"type":"text","text":"2.1."}],"type":"link","identifier":"#21-indexing-endpoints-by-their-handler-return-type","url":"#21-indexing-endpoints-by-their-handler-return-type"},"#231-implicitly":{"title":"2.3.","titleInlineContent":[{"type":"text","text":"2.3."}],"type":"link","identifier":"#231-implicitly","url":"#231-implicitly"},"https://jsonapi.org":{"title":"JSON API","titleInlineContent":[{"type":"text","text":"JSON API"}],"type":"link","identifier":"https:\/\/jsonapi.org","url":"https:\/\/jsonapi.org"},"doc://Apodini/documentation/Apodini/BuildingExporters":{"role":"collectionGroup","title":"Building Exporters","abstract":[{"type":"text","text":"Writing a web service with Apodini is easy - as long as there are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s suitable for your purposes. If that is not the case, you might need to adapt one, or build a new one."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingExporters","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingexporters"},"https://tools.ietf.org/html/rfc6570":{"title":"RFC 6570 URI Template","titleInlineContent":[{"type":"text","text":"RFC 6570 URI Template"}],"type":"link","identifier":"https:\/\/tools.ietf.org\/html\/rfc6570","url":"https:\/\/tools.ietf.org\/html\/rfc6570"},"doc://Apodini/documentation/Apodini/DSLComponents":{"role":"collectionGroup","title":"DSL Components","abstract":[{"type":"text","text":"Apodini DSL central building blocks."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DSLComponents","kind":"article","type":"topic","url":"\/documentation\/apodini\/dslcomponents"},"doc://Apodini/documentation/Apodini/Semantic-Model":{"role":"collectionGroup","title":"Semantic Model","abstract":[{"type":"text","text":"The semantic model is an intermediary model that is somewhere in the middle between the web service declaration you write using the Apodini DSL and the behavior of the web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Semantic-Model","kind":"article","type":"topic","url":"\/documentation\/apodini\/semantic-model"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/ExporterConfiguration":{"role":"collectionGroup","title":"Configuration of Exporters","abstract":[{"type":"text","text":"Extensive configuration options for Apodini Exporters."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","kind":"article","type":"topic","url":"\/documentation\/apodini\/exporterconfiguration"},"doc://Apodini/documentation/Apodini/InterfaceExporter":{"role":"symbol","title":"InterfaceExporter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InterfaceExporter"}],"abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" is a type which requires access to the web service’s structure and"},{"type":"text","text":" "},{"type":"text","text":"internals."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InterfaceExporter"}],"url":"\/documentation\/apodini\/interfaceexporter"},"http://stateless.co/hal_specification.html":{"title":"HAL","titleInlineContent":[{"type":"text","text":"HAL"}],"type":"link","identifier":"http:\/\/stateless.co\/hal_specification.html","url":"http:\/\/stateless.co\/hal_specification.html"},"doc://Apodini/documentation/Apodini/ProtocolBuffers":{"role":"collectionGroup","title":"Protocol Buffers","abstract":[{"type":"text","text":"Describe how to export the webservice via IDL exporter."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","kind":"article","type":"topic","url":"\/documentation\/apodini\/protocolbuffers"},"https://json-schema.org/draft/2019-09/json-schema-hypermedia.html":{"title":"JSON Hyper-Schema","titleInlineContent":[{"type":"text","text":"JSON Hyper-Schema"}],"type":"link","identifier":"https:\/\/json-schema.org\/draft\/2019-09\/json-schema-hypermedia.html","url":"https:\/\/json-schema.org\/draft\/2019-09\/json-schema-hypermedia.html"},"https://github.com/kevinswiber/siren":{"title":"Siren","titleInlineContent":[{"type":"text","text":"Siren"}],"type":"link","identifier":"https:\/\/github.com\/kevinswiber\/siren","url":"https:\/\/github.com\/kevinswiber\/siren"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"doc://Apodini/documentation/Apodini/Inter-Component-Communication":{"role":"article","title":"Inter-Component Communication","abstract":[{"type":"text","text":"Web services deployed with Apodini Deployer can be distributed across different nodes. Inter-component communication enables the communication between components between these nodes."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Inter-Component-Communication","kind":"article","type":"topic","url":"\/documentation\/apodini\/inter-component-communication"},"doc://Apodini/documentation/Apodini/HandlerDelegation":{"role":"collectionGroup","title":"Delegating Handlers","abstract":[{"type":"text","text":"Defining reusable and assertive "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation","kind":"article","type":"topic","url":"\/documentation\/apodini\/handlerdelegation"},"#22-using-defaultrelationship-to-resolve-ambiguous-return-type-information":{"title":"2.2.","titleInlineContent":[{"type":"text","text":"2.2."}],"type":"link","identifier":"#22-using-defaultrelationship-to-resolve-ambiguous-return-type-information","url":"#22-using-defaultrelationship-to-resolve-ambiguous-return-type-information"}}}