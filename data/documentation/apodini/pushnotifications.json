{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" can handle the registration and sending of "},{"type":"strong","inlineContent":[{"type":"text","text":"push notifications"}]},{"type":"text","text":" to Apple Push Notification Service (APNS), which can send out push notifications to iOS, macOS, and tvOS devices."}]},{"anchor":"Configuration","level":2,"type":"heading","text":"Configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to send push notifications, the Apodini web server needs to be authenticated to at least one push notification service. These services are added to a web server by defining them in the "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" computed property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"APNS can be configured using either a "},{"type":"codeVoice","code":".p8"},{"type":"text","text":" or a "},{"type":"codeVoice","code":".pem"},{"type":"text","text":" certificate."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example adds APNS using a "},{"type":"codeVoice","code":".pem"},{"type":"text","text":" certificate to the web server."}]},{"type":"codeListing","syntax":"swift","code":["var configuration: Configuration {","    APNSConfiguration(.pem(pemPath: \"certificate.pem\"), identifier: \"de.tum.in.ase.Example\", environment: .sandbox)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" can also be used to register devices. This is useful to retrieve saved devices and send out push notifications to them. This feature requires a connected "},{"type":"strong","inlineContent":[{"type":"reference","isActive":true,"identifier":".\/Database.md"}]},{"type":"text","text":" to Apodini and using the special modifier "},{"type":"codeVoice","code":"addNotifications()"},{"type":"text","text":" with the "},{"type":"codeVoice","code":"DatabaseConfiguration"},{"type":"text","text":". This modifier can either take two arguments or none. When defining it with two arguments we can pass in a fluent migration and the corresponding class conforming to "},{"type":"codeVoice","code":"DeviceProtocol"},{"type":"text","text":" used as the schema. Leaving the modifier empty will create a new database table called "},{"type":"codeVoice","code":"notification_device"},{"type":"text","text":" of the default implementation of "},{"type":"codeVoice","code":"DeviceProtocol"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Additionally, this modifier will create a second database table "},{"type":"codeVoice","code":"topic"},{"type":"text","text":" which is responsible for storing push notification topics."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example configures a MongoDB database and enables the "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" to save devices to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"apodini_db"}]},{"type":"text","text":" database."}]},{"type":"codeListing","syntax":"swift","code":["var configuration: Configuration {","    \/\/ ...","    DatabaseConfiguration(.defaultMongoDB(\"mongodb:\/\/localhost:27017\/apodini_db\"))","        .addNotifications()","}"]},{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" can be injected to any "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" by using the "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" property wrapper."}]},{"type":"codeListing","syntax":"swift","code":["struct NewsAlertHandler: Handler {","    @Environment(\\.notificationCenter) var notificationCenter: NotificationCener","","    \/\/ ...","}"]},{"anchor":"Device-Registration","level":2,"type":"heading","text":"Device Registration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Devices can be registered to the "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" by conforming to "},{"type":"codeVoice","code":"DeviceProtocol"},{"type":"text","text":". This protocol consists of the following properties:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"id"}]},{"type":"text","text":": The device id for one app used by the push notification service."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"user"}]},{"type":"text","text":": The associated user of the device."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":": The push notification service to use."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"topics"}]},{"type":"text","text":": Used to group devices together. Example: All devices that want to receive news alerts."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A default implementation of this protocol called "},{"type":"codeVoice","code":"Device"},{"type":"text","text":" can also be used."}]},{"type":"codeListing","syntax":"swift","code":["public struct Device: DeviceProtocol {","    public var id: String","    public var type: PushNotificationService","    public var user: User?","    public var topics: [Topic]?","}","","public enum PushNotificationService {","    case apns","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The web service needs a specific route and "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" to handle push notification registration. The following example shows how to add a "},{"type":"codeVoice","code":"Device"},{"type":"text","text":" to the currently authenticated "},{"type":"codeVoice","code":"User"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["struct RegisterHandler: Handler {","    @Request(\\.user) var user: User  \/\/ The logged in user","","    @Parameter var device: Device  \/\/ The `Device` instance in a request body","","    @Environment(\\.notificationCenter) var notificationCenter: NotificationCener","","    func handle() -> EventLoopFuture<Void> {","        notificationCenter.register(device, to: user);","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Furthermore, the "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" allows the removal and editing of "},{"type":"codeVoice","code":"Device"},{"type":"text","text":"s and "},{"type":"codeVoice","code":"Topic"},{"type":"text","text":"s."}]},{"anchor":"Sending-Push-Notifications","level":2,"type":"heading","text":"Sending Push Notifications"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Notification"},{"type":"text","text":"s are structured as follows:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"alert"}]},{"type":"text","text":": Displayed message on the device which includes title, subtitle, and body."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"payload"}]},{"type":"text","text":": Service specific notification settings like sound, badges, etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"data"}]},{"type":"text","text":": Background data conforming to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Push notifications can also be used to send data. Objects that are sent with push notifications need to conform to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" and will be converted to JSON format. This object can then be retrieved using the "},{"type":"codeVoice","code":"data"},{"type":"text","text":" key from the payload of the push notification."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of a `Handler`` that sends a push notification to an user:"}]},{"type":"codeListing","syntax":"swift","code":["struct SendNotification: Handler {","    @Request(\\.user) var user: User","","    @Environment(\\.notificationCenter) var notificationCenter: NotificationCener","","    func handle() -> EventLoopFuture<Void> {","        let notification = Notification(alert: Alert(title: \"Hello There ðŸ‘‹\"))","        let data = \"I'm also sent!\"","        return notificationCenter.send(notification: notification, with: data, to: user)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" offers the following convenience methods to send push notifications:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send to all registered devices"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send to a subscription"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send to all devices of a user"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send to multiple users"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send to a specific device"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send to a specific token"}]}]}]},{"anchor":"Unsolicited-Push-Notifications","level":2,"type":"heading","text":"Unsolicited Push Notifications"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Events in Apodini can also trigger the sending of push notifications. For examples of this behavior refer to the documentation on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Jobs"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/pushnotifications"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/PushNotifications","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A guide to use push notifications in Apodini."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Push Notifications","role":"collectionGroup","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"],["doc:\/\/Apodini\/documentation\/Apodini","doc:\/\/Apodini\/documentation\/Apodini\/Jobs"]]},"seeAlsoSections":[{"title":"Ecosystem","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/DatabaseConnection","doc:\/\/Apodini\/documentation\/Apodini\/Authorization","doc:\/\/Apodini\/documentation\/Apodini\/Jobs","doc:\/\/Apodini\/documentation\/Apodini\/Observe","doc:\/\/Apodini\/documentation\/Apodini\/OpenAPI"],"generated":true}],"references":{"doc://Apodini/documentation/Apodini/Authorization":{"role":"collectionGroup","title":"Apodini Authorization","abstract":[{"type":"text","text":"Formulate Authorization Requirements using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata"},{"type":"text","text":" system."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Authorization","kind":"article","type":"topic","url":"\/documentation\/apodini\/authorization"},"doc://Apodini/documentation/Apodini/OpenAPI":{"role":"article","title":"OpenAPI Interface Exporter","abstract":[{"type":"text","text":"This document provides a short introduction to using the "},{"type":"codeVoice","code":"OpenAPIInterfaceExporter"},{"type":"text","text":", a static exporter for Apodini."},{"type":"text","text":" "},{"type":"text","text":"It can be used to expose an OpenAPI specification (version 3.0.3) for an exported RESTful API, as done by the "},{"type":"codeVoice","code":"RESTInterfaceExporter"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/OpenAPI","kind":"article","type":"topic","url":"\/documentation\/apodini\/openapi"},"doc://Apodini/documentation/Apodini/DatabaseConnection":{"role":"collectionGroup","title":"Database Connection","abstract":[{"type":"text","text":"Connect Apodini project to a database system."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DatabaseConnection","kind":"article","type":"topic","url":"\/documentation\/apodini\/databaseconnection"},"doc://Apodini/documentation/Apodini/Metadata":{"role":"collectionGroup","title":"Metadata","abstract":[{"type":"text","text":"Map requirements of your web service into the implementation."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadata"},"doc://Apodini/documentation/Apodini/Observe":{"role":"collectionGroup","title":"Observe a web service","abstract":[{"type":"text","text":"Instrument an Apodini web service to make it observable."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Observe","kind":"article","type":"topic","url":"\/documentation\/apodini\/observe"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/Jobs":{"role":"collectionGroup","title":"Jobs","abstract":[{"type":"text","text":"A guide to schedule repeating tasks in Apodini."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Jobs","kind":"article","type":"topic","url":"\/documentation\/apodini\/jobs"},"./Database.md":{"title":"database","titleInlineContent":[{"type":"text","text":"database"}],"type":"link","identifier":".\/Database.md","url":".\/Database.md"}}}