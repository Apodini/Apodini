{"seeAlsoSections":[{"title":"Advanced","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/BuildingExporters","doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation","doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","doc:\/\/Apodini\/documentation\/Apodini\/RetrieveRelationship","doc:\/\/Apodini\/documentation\/Apodini\/Semantic-Model","doc:\/\/Apodini\/documentation\/Apodini\/Inter-Component-Communication"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Components are the Apodini DSL’s central building block."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Web services are defined as tree-like composition of "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"s."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A component can either provide further components, or provide some functionality which can be invoked by the user."},{"type":"text","text":" "},{"type":"text","text":"The differentiation between these two main kinds of DSL constructs is expressed via the following types:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Component"},{"type":"text","text":": a component which does not expose any user-facing functionality, but provides further content (via its "},{"type":"codeVoice","code":"content"},{"type":"text","text":" property)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Handler"},{"type":"text","text":": a component which exposes user-facing functionality (ie, a component which can handle and respond to requests)."}]}]}]},{"anchor":"Example-A-Simple-Web-Service","level":3,"type":"heading","text":"Example: A Simple Web Service"},{"type":"codeListing","syntax":"swift","code":["struct RandomNumberProvider: Handler {","    func handle() -> Int {","        return Int.random()","    }","}","","struct WebService: Apodini.WebService {","    var content: some Component {","        Text(\"hello there\")","        Group(\"random\") {","            RandomNumberProvider()","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines a simple web service consisting of a greeting message and a random number generator."}]},{"anchor":"Components","level":3,"type":"heading","text":"Components"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" protocol defines a type which provides further content:"}]},{"type":"codeListing","syntax":"swift","code":["protocol Component {","    associatedtype Content: Component","    ","    @ComponentBuilder","    var content: Content { get }","}"]},{"anchor":"Handlers","level":3,"type":"heading","text":"Handlers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" protocol defines a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" which can respond to user requests:"}]},{"type":"codeListing","syntax":"swift","code":["protocol Handler: Component {","    associatedtype Response: Encodable","    ","    func handle() -> Response","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a request reaches the endpoint at which the Handler is placed, its "},{"type":"codeVoice","code":"handle"},{"type":"text","text":" function will be invoked to respond to the request."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Handlers can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":" property wrapper to access request-related data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" inherits from the "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" protocol, a handler may also implement a the "},{"type":"codeVoice","code":"content"},{"type":"text","text":" property to provide further components. By default, i.e. if the "},{"type":"codeVoice","code":"content"},{"type":"text","text":" property is not implemented, handlers do not provide any further content."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A handler can, based on the properties it defines, make use of one of several "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Apodini\/Apodini\/tree\/develop\/Documentation\/Communicational%20Patterns"},{"type":"text","text":"."}]},{"anchor":"Identifying-Handlers","level":3,"type":"heading","text":"Identifying Handlers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"IdentifiableHandler"},{"type":"text","text":" protocol is used to define a uniquely identifiable "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is important for being able to differentiate between and reference individual instances of a component within the DSL."}]},{"type":"codeListing","syntax":"swift","code":["protocol IdentifiableHandler: Handler {","    associatedtype HandlerIdentifier: AnyHandlerIdentifier","    var handlerId: HandlerIdentifier { get }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A handler’s identifier must be a static, non-random, and unique string value which must persist across multiple compilations and executions of the program (as long as the program remains unchanged). The reason for this requirement is that Apodini needs to be able to identify and find the same handler across multiple instances of a web service."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two ways an "},{"type":"codeVoice","code":"IdentifiableHandler"},{"type":"text","text":"s identifier can be provided:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AnyHandlerIdentifier"},{"type":"text","text":". A type-erased identifier type, which simply wraps around a string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ScopedHandlerIdentifier<H>"},{"type":"text","text":". A type-preserving identifier type which is scoped to a single "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" type."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Example"}]},{"type":"text","text":" Using "},{"type":"codeVoice","code":"IdentifiableHandler"},{"type":"text","text":" to resolve ambiguity between handlers"}]},{"type":"codeListing","syntax":"swift","code":["struct PostTweet: IdentifiableHandler {","  enum Behaviour {","    case regular, legacy","  }","","  class HandlerIdentifier: ScopedHandlerIdentifier<PostTweet> {","    static let normal = HandlerIdentifier(\"normal\")","    static let legacy = HandlerIdentifier(\"legacy\")","  }","","  let maxLength: Int","  let handlerId: HandlerIdentifier","","  init(_ behaviour: Behaviour) {","    switch behaviour {","    case .regular:","      maxLength = 280","      handlerId = .normal","    case .legacy:","      maxLength = 140","      handlerId = .legacy","    }","  }","","  func handle() -> Response {","    \/\/ ....","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"ScopedEndpointIdentifier"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"AnyHanderIdentifier"},{"type":"text","text":" allows us to reject identifiers for other handler types."},{"type":"text","text":" "},{"type":"text","text":"For example, if you have some other handler which defines the identifier "},{"type":"codeVoice","code":".foo"},{"type":"text","text":", you can’t pass that other handler’s "},{"type":"codeVoice","code":".foo"},{"type":"text","text":" identifier when trying to reference a "},{"type":"codeVoice","code":"PostTweet"},{"type":"text","text":" instance, since it’s an identifier for a different Handler type."}]}]}],"variants":[{"paths":["\/documentation\/apodini\/dslcomponents"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/DSLComponents","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Apodini DSL central building blocks."}],"kind":"article","metadata":{"modules":[{"name":"Apodini"}],"role":"collectionGroup","title":"DSL Components"},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"]]},"topicSections":[{"title":"Protocols","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Component","doc:\/\/Apodini\/documentation\/Apodini\/Handler"]}],"references":{"doc://Apodini/documentation/Apodini/RetrieveRelationship":{"role":"collectionGroup","title":"Retrieving Relationship Information","abstract":[{"type":"text","text":"This proposal describes how relationship information can be generated from the DSL, introduces some concepts"},{"type":"text","text":" "},{"type":"text","text":"to give hints for relationship retrieval and adds mechanisms to manually define hints."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/RetrieveRelationship","kind":"article","type":"topic","url":"\/documentation\/apodini\/retrieverelationship"},"doc://Apodini/documentation/Apodini/BuildingExporters":{"role":"collectionGroup","title":"Building Exporters","abstract":[{"type":"text","text":"Writing a web service with Apodini is easy - as long as there are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":"s suitable for your purposes. If that is not the case, you might need to adapt one, or build a new one."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingExporters","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingexporters"},"doc://Apodini/documentation/Apodini/Semantic-Model":{"role":"collectionGroup","title":"Semantic Model","abstract":[{"type":"text","text":"The semantic model is an intermediary model that is somewhere in the middle between the web service declaration you write using the Apodini DSL and the behavior of the web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Semantic-Model","kind":"article","type":"topic","url":"\/documentation\/apodini\/semantic-model"},"doc://Apodini/documentation/Apodini/ExporterConfiguration":{"role":"collectionGroup","title":"Configuration of Exporters","abstract":[{"type":"text","text":"Extensive configuration options for Apodini Exporters."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","kind":"article","type":"topic","url":"\/documentation\/apodini\/exporterconfiguration"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"doc://Apodini/documentation/Apodini/Component":{"role":"symbol","title":"Component","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Component"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" is the central building block of  Apodini. Each component handles a specific functionality of the Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Component"}],"url":"\/documentation\/apodini\/component"},"doc://Apodini/documentation/Apodini/Handler":{"role":"symbol","title":"Handler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Handler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" which defines an endpoint and can handle requests."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Handler"}],"url":"\/documentation\/apodini\/handler"},"doc://Apodini/documentation/Apodini/Parameter":{"role":"symbol","title":"Parameter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parameter"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":" property wrapper can be used to express input in "},{"type":"codeVoice","code":"Components"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parameter"}],"url":"\/documentation\/apodini\/parameter"},"https://github.com/Apodini/Apodini/tree/develop/Documentation/Communicational%20Patterns":{"title":"communication patterns","titleInlineContent":[{"type":"text","text":"communication patterns"}],"type":"link","identifier":"https:\/\/github.com\/Apodini\/Apodini\/tree\/develop\/Documentation\/Communicational%20Patterns","url":"https:\/\/github.com\/Apodini\/Apodini\/tree\/develop\/Documentation\/Communicational%20Patterns"},"doc://Apodini/documentation/Apodini/HandlerDelegation":{"role":"collectionGroup","title":"Delegating Handlers","abstract":[{"type":"text","text":"Defining reusable and assertive "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation","kind":"article","type":"topic","url":"\/documentation\/apodini\/handlerdelegation"},"doc://Apodini/documentation/Apodini/InterfaceExporter":{"role":"symbol","title":"InterfaceExporter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InterfaceExporter"}],"abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter"},{"type":"text","text":" is a type which requires access to the web service’s structure and"},{"type":"text","text":" "},{"type":"text","text":"internals."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InterfaceExporter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InterfaceExporter"}],"url":"\/documentation\/apodini\/interfaceexporter"},"doc://Apodini/documentation/Apodini/Inter-Component-Communication":{"role":"article","title":"Inter-Component Communication","abstract":[{"type":"text","text":"Web services deployed with Apodini Deployer can be distributed across different nodes. Inter-component communication enables the communication between components between these nodes."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Inter-Component-Communication","kind":"article","type":"topic","url":"\/documentation\/apodini\/inter-component-communication"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/ProtocolBuffers":{"role":"collectionGroup","title":"Protocol Buffers","abstract":[{"type":"text","text":"Describe how to export the webservice via IDL exporter."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","kind":"article","type":"topic","url":"\/documentation\/apodini\/protocolbuffers"}}}