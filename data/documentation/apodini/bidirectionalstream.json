{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The best tools to implement bidirectional streams are "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":"s."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following code describes a ping-handler that allows the client to customize the ping-interval at any time."}]},{"type":"codeListing","syntax":"swift","code":["struct TimerObservable: ObservableObject {","    @Published ","    var currentValue: Date = Date()","","    private var _interval: Int = 1","    var interval: Int {","        set {","            self.cancellable = Timer","                .publish(every: newValue)","                .sink { currentValue in","                    self.currentValue = currentValue","                }","            self._interval = newValue","        }","        get {","            self._interval","        }","    }","","    private var cancellable: AnyCancellable = Timer","        .publish(every: 1)","        .sink { currentValue in","            self.currentValue = currentValue","        }","}","","struct Ping: Handler {","    @Parameter var interval: Int","    @ObservedObject var timer: TimerObservable","","    func handle() -> Response<String> {","        if interval != timer.interval {","            timer.interval = interval","            return .nothing","        }","","        return .send(\"Ping: \\(name)\")","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/bidirectionalstream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/BidirectionalStream","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Provide a code example of bidirectional streams."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Bidirectional Stream","role":"collectionGroup","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini","doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern"]]},"seeAlsoSections":[{"title":"Pattern Implementation","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/PatternImplementation","doc:\/\/Apodini\/documentation\/Apodini\/RequestResponse","doc:\/\/Apodini\/documentation\/Apodini\/ClientSideStream","doc:\/\/Apodini\/documentation\/Apodini\/ServiceSideStream"],"generated":true}],"references":{"doc://Apodini/documentation/Apodini/PatternImplementation":{"role":"article","title":"Pattern Implementation","abstract":[{"type":"text","text":"Implemented communication patterns."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PatternImplementation","kind":"article","type":"topic","url":"\/documentation\/apodini\/patternimplementation"},"doc://Apodini/documentation/Apodini/ServiceSideStream":{"role":"article","title":"Service-Side Stream","abstract":[{"type":"text","text":"Provide a code example of service-side stream."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ServiceSideStream","kind":"article","type":"topic","url":"\/documentation\/apodini\/servicesidestream"},"doc://Apodini/documentation/Apodini/RequestResponse":{"role":"article","title":"Request-Response","abstract":[{"type":"text","text":"Usage of Request and Response pattern."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/RequestResponse","kind":"article","type":"topic","url":"\/documentation\/apodini\/requestresponse"},"doc://Apodini/documentation/Apodini/ClientSideStream":{"role":"article","title":"Client-Side Stream","abstract":[{"type":"text","text":"Provide an implementation of a client-side stream."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ClientSideStream","kind":"article","type":"topic","url":"\/documentation\/apodini\/clientsidestream"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"}}}