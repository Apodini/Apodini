{"seeAlsoSections":[{"title":"Basics","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","doc:\/\/Apodini\/documentation\/Apodini\/Metadata","doc:\/\/Apodini\/documentation\/Apodini\/AllAboutReuse","doc:\/\/Apodini\/documentation\/Apodini\/StatefulHandlers","doc:\/\/Apodini\/documentation\/Apodini\/InformationAPI","doc:\/\/Apodini\/documentation\/Apodini\/UnitTesting"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A common use case in software development are CLI arguments (eg. \/run –number=3) that can alter the runtime behavior of a program. They pass information to the executable that triggers a certain functionality or sets a certain option. This allows for greater flexibility of the program."},{"type":"text","text":" "},{"type":"text","text":"With CLI argument parsing in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" we want to achieve exactly this kind of flexibility. This enables us to change the runtime behavior of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" even after the source code was already compiled to an executable."},{"type":"text","text":" "},{"type":"text","text":"In order to achieve this, we integrate the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-argument-parser"},{"type":"text","text":" library into the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":". This library is an officially supported Apple library and offers lots of functionality. The argument parser makes it really easy to parse command line parameters in Swift in a type-safe way with the use of Property wrappers."}]},{"anchor":"CLI-argument-parsing-with-the-Swift-Argument-Parser","level":3,"type":"heading","text":"CLI argument parsing with the Swift Argument Parser"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The concept of CLI argument parsing in the Apodini "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" can be understood best with a direct code example since the implementation that has to be done by the Apodini developer is really easy and straightforward:"}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ArgumentParser","","struct ExampleWebService: WebService {","   @Option","   var hostname: String"," ","   @Option","   var port: Int","","   var configuration: Configuration {","      HTTPConfiguration(hostname: hostname, port: port)","   }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The developer is able to state the required CLI-arguments directly in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" struct, decorated with one of the three argument types (property wrappers): "},{"type":"codeVoice","code":"Argument"},{"type":"text","text":", "},{"type":"codeVoice","code":"Option"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":"."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Arguments are values given by a user and are read in order from first to last. For example, this command is called with three file names as arguments:"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".\/WebService file1.swift file2.swift file3.swift"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A possible "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" implementation that parses these parameters looks like this:"}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ArgumentParser","","struct ExampleWebService: WebService {","   @Argument","   var files: [String]","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Options are named key-value pairs. Keys start with one or two dashes ("},{"type":"codeVoice","code":"-"},{"type":"text","text":" or "},{"type":"codeVoice","code":"--"},{"type":"text","text":"), and a user can separate the key and value with an equal sign ("},{"type":"codeVoice","code":"="},{"type":"text","text":") or a space. This example command is called with two options:"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".\/WebService --count=5 --index 2"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A fitting "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" would be the following:"}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ArgumentParser","","struct ExampleWebService: WebService {","   @Option ","   var count: Int","   @Option ","   var index: Int","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Flags are like options, but without a paired value. Instead, their presence indicates a particular value (usually true). This example command is called with two flags:"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".\/WebService --verbose --strip-whitespace"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A possible "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" implementation could look like this (Flags have to specify a default value, mostly this will be "},{"type":"codeVoice","code":"false"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ArgumentParser","","struct ExampleWebService: WebService {","   @Flag ","   var verbose: Bool","   @Flag ","   var stripWhitespace: Bool","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the way we specified the "},{"type":"codeVoice","code":"Argument"},{"type":"text","text":", "},{"type":"codeVoice","code":"Option"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Flag"},{"type":"text","text":" parameters, these parameters are required. Therefore, they have to be specified during the start of the executable, else the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" will fail with an error message like this: "},{"type":"codeVoice","code":"Error: Missing <value>"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course, the developer can specify default values for all parameters or make them optional, so he\/she doesn’t have to specify the values at every startup (especially useful for the development process). Similar to the examples above, this sample provides default values for every parameter (either with an actual value or an optional, which defaults to nil):"}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ArgumentParser","","struct ExampleWebService: WebService {","   @Argument var files: [String] = []","   @Option var count: Int?","   @Option var index = 0","   @Flag var verbose = false","   @Flag var stripWhitespace = false","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, the argument parser allows to specify configurations for the respective parameters. This allows for renaming of parameters, inversion name specification for flags, decoding options and much more. An example would be:"}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ArgumentParser","","struct ExampleWebService: WebService {","   @Flag(name: .long)  \/\/ Parameter name is the name of the variable","   var stripWhitespace = false","   ","   @Flag(name: .short)  \/\/ Name of parameter gets shortend to only the first letter","   var verbose = false","","   @Option(name: .customLong(\"count\"))  \/\/ Specify a name for the parameter ourselves","   var iterationCount: Int","","   @Option(name: [.customShort(\"I\"), .long])   \/\/ Offer multiple possibilities for the name of the parameter","   var inputFile: String","","   @Flag(inversion: .prefixedNo).  \/\/ Inversion name is no-index","   var index = true","","   @Flag(inversion: .prefixedEnableDisable)   \/\/ Name of parameters either enable-required-element or disable-required-element","   var requiredElement: Bool","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This provides only a short excerpt about the capabilities of the Swift Argument Parser. Please refer to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-argument-parser\/tree\/main\/Documentation"},{"type":"text","text":" for further functionalities."}]},{"anchor":"Use-CLI-arguments-to-alter-runtime-behavior-of-the-WebService","level":3,"type":"heading","text":"Use CLI arguments to alter runtime behavior of the WebService"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We know how to specify CLI arguments in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":", now it’s time to use them to alter the behavior of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" via the user input."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A very common example is the configuration of the HTTP bindings, so the hostname, port etc. where the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" should listen to. In the following example, the developer specifies two CLI arguments; a hostname, which is a string, and a port, which is an integer. These parameters are then used to create an instance of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/HTTPConfiguration"},{"type":"text","text":" with the specified bindings. Remember that the entire parsing of the CLI arguments is done by the argument parser, so no need for the developer to check for validity, type etc. The result is a very straightforward code that is easy to write and understand."},{"type":"text","text":" "},{"type":"text","text":"Lastly, don’t forget to start the parsing of the CLI arguments via an invocation of the static "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService\/main(_:)"},{"type":"text","text":" function on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":". This automatically triggers the swift argument parser to read the CLI parameters and then executes the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService\/start(mode:app:webService:)"},{"type":"text","text":" function of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" which starts the actual web service."}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ArgumentParser","","struct ExampleWebService: WebService {","    @Option","    var hostname: String","","    @Option","    var port: Int","","    var configuration: Configuration {","        HTTPConfiguration(hostname: hostname, port: port)","    }","}","","ExampleWebService.main()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"CLI arguments can also be used for the configuration of exporters (see more details regarding this topic here "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"A perfect example is the conditional creation, depending on the user’s input, of an OpenAPI specification for the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":" done via the associated "},{"type":"codeVoice","code":"OpenAPI"},{"type":"text","text":" exporter of the "},{"type":"codeVoice","code":"REST"},{"type":"text","text":" exporter."}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ApodiniREST","import ApodiniOpenAPI","import ArgumentParser","","struct ExampleWebService: WebService {","    @Flag(help: \"Generate an OpenAPI documentation of the WebService.\")","    var generateOpenAPIDocs = false","  ","    var configuration: Configuration {","        if(generateOpenAPIDocs) {","            REST { ","                OpenAPI()","            }","        } else {","            REST()","        }","    }","}","","ExampleWebService.main()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, if the user passes the respective flag like "},{"type":"codeVoice","code":".\/WebService --generateOpenAPIDocs"},{"type":"text","text":", an additional OpenAPI documentation is generated for the exported REST webservice. If no flag is specified, the default "},{"type":"codeVoice","code":"false"},{"type":"text","text":" value prohibits the generation of the documentation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can also be driven further, so that for example the coding strategy of the exporters is configurable as well. In the following example, the developer can specify if the "},{"type":"codeVoice","code":"REST"},{"type":"text","text":" exporter should use a "},{"type":"codeVoice","code":"JSON"},{"type":"text","text":" or "},{"type":"codeVoice","code":"XML"},{"type":"text","text":" coding strategy (for further details take a look at "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration"},{"type":"text","text":"). If, and only if the coding strategy is "},{"type":"codeVoice","code":"JSON"},{"type":"text","text":", the exporter configuration DSL allows the "},{"type":"codeVoice","code":"REST"},{"type":"text","text":" exporter to have an associated "},{"type":"codeVoice","code":"OpenAPI"},{"type":"text","text":" exporter that generates documentation. In that case, the endpoint where the documentation is available can also be configured via a CLI parameter."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","import Apodini","import ApodiniREST","import OpenAPI","import SotoXML","import ArgumentParser","","struct ExampleWebService: WebService {","    @Argument var useRESTfulXML: Bool","    @Argument var openAPIOutputEndpoint: String","","    var configuration: Configuration {","        if useRESTfulXML {","            RESTfulInterfaceExporter(","                encoder:  XMLEncoder(),","                decoder: XMLDecoder()","            )","        } else {","              RESTfulInterfaceExporter(","                  encoder: JSONEncoder(),","                  decoder: JSONDecoder()","              ) {","                  OpenAPIExporter(","                      outputEndpoint: openAPIOutputEndpoint,","                      swaggerUiEndpoint: \"\/ui\/swagger\",","                      title: \"The Game - Endangered Nature Edition, built with Apodini\"","                  )","              }","        }","    }","    \/\/ some code for XML coders omitted for simplicity","}","","ExampleWebService.main()"]}]}],"variants":[{"paths":["\/documentation\/apodini\/commandlinearguments"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/CommandLineArguments","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Parse Command Line Arguments in an Apodini web service to dynamically adapt the configuration of the web service."}],"kind":"article","metadata":{"modules":[{"name":"Apodini"}],"role":"collectionGroup","title":"Command Line Arguments Parsing"},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"]]},"topicSections":[{"title":"WebService","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/WebService","doc:\/\/Apodini\/documentation\/Apodini\/WebService\/main(_:)","doc:\/\/Apodini\/documentation\/Apodini\/WebService\/start(mode:app:webService:)"]}],"references":{"doc://Apodini/documentation/Apodini/HTTPConfiguration":{"role":"symbol","title":"HTTPConfiguration","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPConfiguration"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Configuration"},{"type":"text","text":" for HTTP, HTTP\/2 and TLS."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/HTTPConfiguration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HTTPConfiguration"}],"url":"\/documentation\/apodini\/httpconfiguration"},"doc://Apodini/documentation/Apodini/UnitTesting":{"role":"collectionGroup","title":"Unit Testing in Apodini","abstract":[{"type":"text","text":"Show how to create a typical test class for an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/UnitTesting","kind":"article","type":"topic","url":"\/documentation\/apodini\/unittesting"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"https://github.com/apple/swift-argument-parser/tree/main/Documentation":{"title":"Swift Argument Parser documentation","titleInlineContent":[{"type":"text","text":"Swift Argument Parser documentation"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-argument-parser\/tree\/main\/Documentation","url":"https:\/\/github.com\/apple\/swift-argument-parser\/tree\/main\/Documentation"},"doc://Apodini/documentation/Apodini/WebService/start(mode:app:webService:)":{"role":"symbol","title":"start(mode:app:webService:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"start"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mode"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"WebServiceExecutionMode","preciseIdentifier":"s:7Apodini23WebServiceExecutionModeO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"app"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Application","preciseIdentifier":"s:7Apodini11ApplicationC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"webService"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Application","preciseIdentifier":"s:7Apodini11ApplicationC"}],"abstract":[{"type":"text","text":"This function is executed to start up an Apodini "},{"type":"codeVoice","code":"WebService"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService\/start(mode:app:webService:)","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/webservice\/start(mode:app:webservice:)"},"doc://Apodini/documentation/Apodini/BuildingBlocks":{"role":"collectionGroup","title":"Apodini’s Building Blocks","abstract":[{"type":"text","text":"This chapter introduces you to the most important building blocks of an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingblocks"},"doc://Apodini/documentation/Apodini/ExporterConfiguration":{"role":"collectionGroup","title":"Configuration of Exporters","abstract":[{"type":"text","text":"Extensive configuration options for Apodini Exporters."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ExporterConfiguration","kind":"article","type":"topic","url":"\/documentation\/apodini\/exporterconfiguration"},"doc://Apodini/documentation/Apodini/AllAboutReuse":{"role":"collectionGroup","title":"All About Reuse","abstract":[{"type":"text","text":"Despite its declarative nature, Apodini’s API is really flexible and enables you to build reusable components on many different levels."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/AllAboutReuse","kind":"article","type":"topic","url":"\/documentation\/apodini\/allaboutreuse"},"doc://Apodini/documentation/Apodini/WebService/main(_:)":{"role":"symbol","title":"main(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"main"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?)"}],"abstract":[{"type":"text","text":"Overrides  the "},{"type":"codeVoice","code":"main()"},{"type":"text","text":" method of "},{"type":"codeVoice","code":"ParsableCommand"},{"type":"text","text":" from the Swift ArgumentParser"},{"type":"text","text":" "},{"type":"text","text":"Store the values of wrapped properties in the "},{"type":"codeVoice","code":"WebService"},{"type":"text","text":" (eg. "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":")  before parsing the CLI arguments and then restore the saved values after the parsing is finished"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService\/main(_:)","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/webservice\/main(_:)"},"doc://Apodini/documentation/Apodini/WebService":{"role":"symbol","title":"WebService","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebService"}],"abstract":[{"type":"text","text":"Each Apodini program consists of a "},{"type":"codeVoice","code":"WebService"},{"type":"text","text":"component that is used to describe the Web API of the Web Service"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WebService"}],"url":"\/documentation\/apodini\/webservice"},"doc://Apodini/documentation/Apodini/Metadata":{"role":"collectionGroup","title":"Metadata","abstract":[{"type":"text","text":"Map requirements of your web service into the implementation."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadata"},"https://github.com/apple/swift-argument-parser":{"title":"swift-argument-parser","titleInlineContent":[{"type":"text","text":"swift-argument-parser"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-argument-parser","url":"https:\/\/github.com\/apple\/swift-argument-parser"},"doc://Apodini/documentation/Apodini/InformationAPI":{"role":"collectionGroup","title":"Information","abstract":[{"type":"text","text":"The Information API maps middleware-specific metadata of the respective wire protocol into the framework"},{"type":"text","text":" "},{"type":"text","text":"making it accessible inside a Handler."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InformationAPI","kind":"article","type":"topic","url":"\/documentation\/apodini\/informationapi"},"doc://Apodini/documentation/Apodini/StatefulHandlers":{"role":"collectionGroup","title":"Stateful Handlers","abstract":[{"type":"text","text":"Usually endpoints only handle one request and answer with one response. However, in certain cases, this is not enough. Apodini sets no restrictions on this."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/StatefulHandlers","kind":"article","type":"topic","url":"\/documentation\/apodini\/statefulhandlers"}}}