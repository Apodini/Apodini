{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The protocol features five types of messages:"}]},{"anchor":"OpenContextMessage","level":3,"type":"heading","text":"`OpenContextMessage`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Opens a new context (wich is identified by a "},{"type":"codeVoice","code":"<UUID>"},{"type":"text","text":") on a virtual endpoint (which is identified by the "},{"type":"codeVoice","code":"<identifier>"},{"type":"text","text":"). This message is sent by the client."}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"endpoint\": \"<identifier>\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"identifier"},{"type":"text","text":" is based on the "},{"type":"codeVoice","code":"Group"},{"type":"text","text":" "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"s:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following example service:"}]},{"type":"codeListing","syntax":"swift","code":["@PathParameter","var userId: Int","","@ComponentBuilder","var testService: some Component {","    Text(\"Hello World!\")","    Group(\"user\", $userId) {","        UserHandler(userId: $userId)","        Group(\"stream\") {","            StatefulUserHandler(userId: $userId)","        }","    }","} "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Text"},{"type":"text","text":" would be available under "},{"type":"codeVoice","code":"\"\""},{"type":"text","text":", "},{"type":"codeVoice","code":"UserHandler"},{"type":"text","text":" under "},{"type":"codeVoice","code":"\"user.:userId:\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"StatefulUserHandler"},{"type":"text","text":" would be identified by "},{"type":"codeVoice","code":"\"user.:userId:.stream\""},{"type":"text","text":"."}]},{"anchor":"CloseContextMessage","level":3,"type":"heading","text":"`CloseContextMessage`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Closes the context with the given "},{"type":"codeVoice","code":"<UUID>"},{"type":"text","text":". This message-type must be sent by both, client and server. Sending this message means "},{"type":"emphasis","inlineContent":[{"type":"text","text":"‘I am not going to send another message on this context’"}]},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\"","}"]},{"anchor":"ClientMessage","level":3,"type":"heading","text":"`ClientMessage`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sends input for a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" to a specific "},{"type":"codeVoice","code":"context"},{"type":"text","text":". The "},{"type":"codeVoice","code":"parameters"},{"type":"text","text":" must fit the input required by the "},{"type":"codeVoice","code":"context"},{"type":"text","text":"‘s "},{"type":"codeVoice","code":"endpoint"},{"type":"text","text":" in it’s current state. This message-type is only used by the client."}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"<name1>\": <value2>,","        \"<name2>\": <value2>,","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Take the following example:"}]},{"type":"codeListing","syntax":"swift","code":["struct UserHandler: Handler {","    @Parameter(\"id\")","    var userId: Int","    @Parameter","    var name: String","","    func handle() -> User {","        User(id: userId, name: name)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The valid client message for this "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" would be:"}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"id\": 5,","        \"name\": \"Richard\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course, you can use anything that is "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" as a parameter."}]},{"anchor":"Necessity-and-Nullability","level":4,"type":"heading","text":"Necessity and Nullability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":"s are not required, e.g. for the following two, the client doesn’t have to provide a value explicitly:"}]},{"type":"codeListing","syntax":"swift","code":["@Parameter var surname: String?","@Parameter var superPowers: [String] = []"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that one could set "},{"type":"codeVoice","code":"surname"},{"type":"text","text":" to JSON’s "},{"type":"codeVoice","code":"null"},{"type":"text","text":" explicitly, whereas that would result in an error for "},{"type":"codeVoice","code":"superPowers"},{"type":"text","text":"."}]},{"anchor":"Mutability","level":4,"type":"heading","text":"Mutability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a look at this modified handler, which accepts multiple inputs and returns a new "},{"type":"codeVoice","code":"User"},{"type":"text","text":" instance for each of them:"}]},{"type":"codeListing","syntax":"swift","code":["struct StatefulUserHandler: Handler {","    @Parameter(\"id\", .mutability(.constant))","    var userId: Int","    @Parameter","    var name: String","    @Apodini.Environment(\\.connection)","    var connection: Connection","","    func handle() -> Apodini.Response<User> {","        if connection.state == .end {","            return .end","        } else {","            return .send(User(id: userId, name: name))","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What is important here is the "},{"type":"codeVoice","code":".mutability(.constant)"},{"type":"text","text":" option. With this option there, succeeding requests on the same context may not alter the "},{"type":"codeVoice","code":"\"id\""},{"type":"text","text":", i.e.:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This would be fine:"}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"id\": 5,","        \"name\": \"Richard Thompson\"","    }","}","{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"id\": 5,","        \"name\": \"Richard Fleming\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But this would "},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" be fine:"}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"id\": 5,","        \"name\": \"Richard Thompson\"","    }","}","{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"id\": 15,","        \"name\": \"Richard Fleming\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Input values are cached, thus the client can omit values if it doesn’t want to change them. The following would be a valid sequence:"}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"id\": 5,","        \"name\": \"Richard Thompson\"","    }","}","{","    \"context\": \"<UUID>\",","    \"parameters\": {}","}","{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"name\": \"Richard Fleming\"","    }","}","{","    \"context\": \"<UUID>\",","    \"parameters\": {","        \"id\": 5","    }","}"]},{"anchor":"ServiceMessage","level":3,"type":"heading","text":"`ServiceMessage`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sends output of a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" to a speficic "},{"type":"codeVoice","code":"context"},{"type":"text","text":". The "},{"type":"codeVoice","code":"content"},{"type":"text","text":"’s type is the same as the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" that is returned by the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"handle()"},{"type":"text","text":" function. This message-type is only used by the server."}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"content\": <Content>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"content"},{"type":"text","text":" is encoded in JSON as you would expect:"}]},{"type":"codeListing","syntax":"swift","code":["struct User: Apodini.Content {","    let id: Int","    let name: String","}"]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"content\": {","        \"id\": 5,","        \"name\": \"Richard Thompson\"","    }","}"]},{"anchor":"ErrorMessage","level":3,"type":"heading","text":"`ErrorMessage`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sends an error-message to a speficic "},{"type":"codeVoice","code":"context"},{"type":"text","text":". This message-type is only used by the server."}]},{"type":"codeListing","syntax":"json","code":["{","    \"context\": \"<UUID>\",","    \"error\": \"<Error_Message>\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" throws anything that is not an "},{"type":"codeVoice","code":"ApodiniError"},{"type":"text","text":", this error is transformed to a generic "},{"type":"codeVoice","code":"ApodiniError"},{"type":"text","text":" with an "},{"type":"codeVoice","code":"ErrorType.other"},{"type":"text","text":". The "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"localizedDescription"},{"type":"text","text":" is reflected in the "},{"type":"codeVoice","code":"ApodiniError"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"description"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the error message of an "},{"type":"codeVoice","code":"ApodiniError"},{"type":"text","text":" changes when switching to production. The "},{"type":"codeVoice","code":"description"},{"type":"text","text":" is only exposed to the client in "},{"type":"codeVoice","code":"DEBUG"},{"type":"text","text":" mode."}]},{"anchor":"WebSocketConnectionConsequence","level":4,"type":"heading","text":"`WebSocketConnectionConsequence`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When throwing an "},{"type":"codeVoice","code":"ApodiniError"},{"type":"text","text":" you can specify what consequence this has for the associated "},{"type":"codeVoice","code":"context"},{"type":"text","text":" and WebSocket connection. There are three options: "},{"type":"codeVoice","code":".none"},{"type":"text","text":", "},{"type":"codeVoice","code":".closeContext"},{"type":"text","text":" and "},{"type":"codeVoice","code":".closeChannel"},{"type":"text","text":". In any case the "},{"type":"codeVoice","code":"ErrorMessage"},{"type":"text","text":" is sent before the context is closed or the channel is closed."}]},{"type":"codeListing","syntax":"swift","code":["struct UserHandler: Handler {","    @Throws(.badInput, \"ID 0 is reserved.\", .webSocketConnectionConsequence(.closeContext))","    var reservedIdError: ApodiniError","","    @Parameter(\"id\")","    var userId: Int","    @Parameter","    var name: String","","    func handle() throws -> User {","        if userId == 0 {","            throw reservedIdError","        }","","        return User(id: userId, name: name)","    }","}"]},{"anchor":"WebSocketErrorCode","level":4,"type":"heading","text":"`WebSocketErrorCode`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This option is only relevant if the "},{"type":"codeVoice","code":"WebSocketConnectionConsequence"},{"type":"text","text":" is "},{"type":"codeVoice","code":".closeChannel"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use any of the standard WebSocket error codes or even custom ones:"}]},{"type":"codeListing","syntax":"swift","code":["@Throws(.badInput, \"ID 0 is reserved.\", .webSocketConnectionConsequence(.closeChannel), .webSocketErrorCode(.unknown(12)))","    var reservedIdError: ApodiniError"]},{"anchor":"Defaults-by-ErrorType","level":4,"type":"heading","text":"Defaults by `ErrorType`"},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"WebSocketConnectionConsequence"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"WebSocketErrorCode"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".badInput"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".none"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".dataInconsistentWithMessage"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".notFound"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".none"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".normalClosure"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".unauthenticated"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".closeContext"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".normalClosure"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".forbidden"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".closeChannel"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".normalClosure"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".serverError"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".closeContext"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".unexpectedServerError"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".notAvailable"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".closeContext"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".normalClosure"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".other"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".closeContext"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".normalClosure"}]}]]],"header":"row"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/websocket"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/WebSocket","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The WebSocket exporter uses a custom "},{"type":"strong","inlineContent":[{"type":"text","text":"JSON"}]},{"type":"text","text":" based protocol on top of WebSocket’s "},{"type":"strong","inlineContent":[{"type":"text","text":"text"}]},{"type":"text","text":" messages. This protocol can handle multiple concurrent connections on the same or different endpoints over one WebSocket channel. The Apodini service listens on "},{"type":"codeVoice","code":"\/apodini\/websocket"},{"type":"text","text":" for clients that want to communicate via the WebSocket Interface Exporter."}],"kind":"article","metadata":{"roleHeading":"Article","title":"WebSocket Interface Exporter","role":"article","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini","doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks"]]},"seeAlsoSections":[{"title":"Configuring Middleware","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Configuration","doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers"],"generated":true}],"references":{"doc://Apodini/documentation/Apodini/BuildingBlocks":{"role":"collectionGroup","title":"Apodini’s Building Blocks","abstract":[{"type":"text","text":"This chapter introduces you to the most important building blocks of an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingblocks"},"doc://Apodini/documentation/Apodini/Configuration":{"role":"symbol","title":"Configuration","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Configuration"}],"abstract":[{"type":"codeVoice","code":"Configuration"},{"type":"text","text":"s are used to register services to Apodini."},{"type":"text","text":" "},{"type":"text","text":"Each "},{"type":"codeVoice","code":"Configuration"},{"type":"text","text":" handles different kinds of services."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Configuration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Configuration"}],"url":"\/documentation\/apodini\/configuration"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/ProtocolBuffers":{"role":"collectionGroup","title":"Protocol Buffers","abstract":[{"type":"text","text":"Describe how to export the webservice via IDL exporter."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ProtocolBuffers","kind":"article","type":"topic","url":"\/documentation\/apodini\/protocolbuffers"}}}