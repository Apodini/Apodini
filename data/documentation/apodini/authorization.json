{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The goal of "},{"type":"codeVoice","code":"ApodiniAuthorization"},{"type":"text","text":" is to easily define authentication and authorization requirements for the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The framework introduces four abstractions to deal with arbitrary authentication and authorization scenarios:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AuthenticationScheme"},{"type":"text","text":": It implements a dedicated authentication scheme by translation the scheme-specific wire protocol into a type representation (referred to as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"AuthenticationInfo"}]},{"type":"text","text":"). If applicable, it is used to sanitize and reject malformed user input. "},{"type":"codeVoice","code":"ApodiniAuthorization"},{"type":"text","text":" ships with two authentication schemes implemented out-of-the-box: "},{"type":"codeVoice","code":"BasicAuthenticationScheme"},{"type":"text","text":" and "},{"type":"codeVoice","code":"BearerAuthenticationScheme"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Authenticatable"},{"type":"text","text":": A user-defined model type that captures all state of the authenticated and authorized instance. For example, it might be some sort of user or token model."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AuthenticationVerifier"},{"type":"text","text":": It acts upon the output of an "},{"type":"codeVoice","code":"AuthenticationScheme"},{"type":"text","text":" and instantiates the respective "},{"type":"codeVoice","code":"Authenticatable"},{"type":"text","text":" instance. Additionally, it performs any required verification steps, e.g., checking the correctness of supplied credentials or validating a cryptographic signature. It may also load additional state from a database, e.g., additional data part of the user model."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AuthorizationRequirements"},{"type":"text","text":": Those are optionally defined by the user and are evaluated against the output of the "},{"type":"codeVoice","code":"AuthenticationVerifier"},{"type":"text","text":". They can be used to define further constraints against the "},{"type":"codeVoice","code":"Authenticatable"},{"type":"text","text":" instance. For example, a particular endpoint might allow access for administrator users only. By default, "},{"type":"codeVoice","code":"ApodiniAuthorization"},{"type":"text","text":" provides "},{"type":"codeVoice","code":"Allow"},{"type":"text","text":", "},{"type":"codeVoice","code":"Deny"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Verify"},{"type":"text","text":" requirements."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating authentication and authorization requirements is done via the "},{"type":"codeVoice","code":"Authorize"},{"type":"text","text":" or "},{"type":"codeVoice","code":"AuthorizeOptionally"},{"type":"text","text":" Metadata."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"AuthorizationRequirements"},{"type":"text","text":" or "},{"type":"codeVoice","code":"OptionalAuthorizationRequirements"},{"type":"text","text":" Metadata, one can supply additional "},{"type":"codeVoice","code":"AuthorizationRequirements"},{"type":"text","text":" for an already authenticated "},{"type":"codeVoice","code":"Authenticatable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" use the "},{"type":"codeVoice","code":"@Authorized"},{"type":"text","text":" property to access the authenticated and authorized "},{"type":"codeVoice","code":"Authenticatable"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"Your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" wonâ€™t be executed if one or more Authorization Metadata fail. Instead, formatted by the "},{"type":"codeVoice","code":"AuthenticationScheme"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a respective authentication or authorization error is returned to the user."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Below shows an example of using "},{"type":"codeVoice","code":"ApodiniAuthorization"},{"type":"text","text":" for authentication a "},{"type":"codeVoice","code":"MyUser"},{"type":"text","text":" using http basic authentication."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"MyUserVerifier"},{"type":"text","text":" uses the credentials provided by the "},{"type":"codeVoice","code":"BasicAuthenticationScheme"},{"type":"text","text":" to look up the user, verify the credentials"},{"type":"text","text":" "},{"type":"text","text":"and to load additional state like the name."}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ApodiniAuthorization","import ApodiniAuthorizationBasicScheme","","struct PersonalizedGreeter: Handler {","    @Authorized(MyUser.self) var authorizedUser","","    func handle() throws -> String {","        if !authorizedUser.isAuthorized {","            return \"Hello World\"","        }","","        let user = try authorizedUser()","        return \"Hello \\(user.name)\"","    }","","    var metadata: Metadata {","        AuthorizeOptionally(MyUser.self, using: BasicAuthenticationScheme(), verifiedBy: MyUserVerifier())","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next example demonstrates how "},{"type":"codeVoice","code":"AuthorizationRequirements"},{"type":"text","text":" are declared. It implements a "},{"type":"codeVoice","code":"AdministrationHandler"},{"type":"text","text":" which is only accessible for users with administration privileges."}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ApodiniAuthorization","import ApodiniAuthorizationBasicScheme","","struct AdministrationHandler: Handler {","    @Authorized(MyUser.self) var authorizedUser","","    \/\/ ...","","    var metadata: Metadata {","        Authorize(MyUser.self, using: BasicAuthenticationScheme(), verifiedBy: MyUserVerifier()) {","            Deny(ifNot: \\.isAdministrator)","        }","    }","}"]},{"anchor":"JWT","level":3,"type":"heading","text":"JWT"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the "},{"type":"codeVoice","code":"ApodiniAuthorizationJWT"},{"type":"text","text":" target we provide out-of-the-box support for JSON Web Tokens (JWTs)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As the first step, use the "},{"type":"codeVoice","code":"JWTSigner"},{"type":"text","text":" configuration (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Configuration"},{"type":"text","text":") to configure your "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/vapor\/jwt-kit"},{"type":"text","text":" "},{"type":"codeVoice","code":"JWTSigners"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, create your token model conforming to "},{"type":"codeVoice","code":"JWTAuthenticatable"},{"type":"text","text":". You may use any of the "},{"overridingTitleInlineContent":[{"type":"text","text":"JWTKit"}],"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/vapor\/jwt-kit","overridingTitle":"JWTKit"},{"type":"text","text":" provided JWT claims. By conforming to "},{"type":"codeVoice","code":"JWTAuthenticatable"},{"type":"text","text":" you do not need to specify a "},{"type":"codeVoice","code":"AuthenticationScheme"},{"type":"text","text":" or "},{"type":"codeVoice","code":"AuthenticationVerifier"},{"type":"text","text":" when declaring your authorization Metadata."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lastly "},{"type":"codeVoice","code":"ApodiniAuthorizationJWT"},{"type":"text","text":" provides additional overloads to the "},{"type":"codeVoice","code":"Verify"},{"type":"text","text":" and all the other "},{"type":"codeVoice","code":"AuthorizationRequirements"},{"type":"text","text":" to easily formulate authorization requirements for your JWT claims."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Below shows a complete example of using "},{"type":"codeVoice","code":"ApodiniAuthorizationJWT"},{"type":"text","text":" for a simple JWT token setup:"}]},{"type":"codeListing","syntax":"swift","code":["import Apodini","import ApodiniAuthorizationJWT","","struct SomeJWTToken: JWTAuthenticatable {","    let exp: ExpirationClaim","    let iss: IssuerClaim","","    let username: String?","}","","struct PrivateGreeter: Handler {","    @Authorized(SomeJWTToken.self) var authorizedToken","","    func handle() throws -> String {","        let token = try authorizedToken()","        return \"Hello \" + token.username","    }","","    var metadata: Metadata {","        Authorize(SomeJWTToken.self) {","            Verify(notExpired: \\.exp)","            Verify(issuer: \\.iss, is: \"https:\/\/ase.in.tum.de\")","","            Deny(ifNil: \\.username)","        }","    }","}","","struct MyWebService: WebService {","    var content: some Component {","        PrivateGreeter()","    }","","    var configuration: Configuration {","        JWTSigner(.hs256(key: \"secret\"))","    }","}",""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/authorization"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/Authorization","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Formulate Authorization Requirements using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata"},{"type":"text","text":" system."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Apodini Authorization","role":"collectionGroup","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"]]},"seeAlsoSections":[{"title":"Ecosystem","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/DatabaseConnection","doc:\/\/Apodini\/documentation\/Apodini\/PushNotifications","doc:\/\/Apodini\/documentation\/Apodini\/Jobs","doc:\/\/Apodini\/documentation\/Apodini\/Observe","doc:\/\/Apodini\/documentation\/Apodini\/OpenAPI"],"generated":true}],"references":{"doc://Apodini/documentation/Apodini/Configuration":{"role":"symbol","title":"Configuration","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Configuration"}],"abstract":[{"type":"codeVoice","code":"Configuration"},{"type":"text","text":"s are used to register services to Apodini."},{"type":"text","text":" "},{"type":"text","text":"Each "},{"type":"codeVoice","code":"Configuration"},{"type":"text","text":" handles different kinds of services."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Configuration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Configuration"}],"url":"\/documentation\/apodini\/configuration"},"doc://Apodini/documentation/Apodini/Jobs":{"role":"collectionGroup","title":"Jobs","abstract":[{"type":"text","text":"A guide to schedule repeating tasks in Apodini."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Jobs","kind":"article","type":"topic","url":"\/documentation\/apodini\/jobs"},"doc://Apodini/documentation/Apodini/Component":{"role":"symbol","title":"Component","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Component"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" is the central building block of  Apodini. Each component handles a specific functionality of the Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Component"}],"url":"\/documentation\/apodini\/component"},"doc://Apodini/documentation/Apodini/Observe":{"role":"collectionGroup","title":"Observe a web service","abstract":[{"type":"text","text":"Instrument an Apodini web service to make it observable."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Observe","kind":"article","type":"topic","url":"\/documentation\/apodini\/observe"},"doc://Apodini/documentation/Apodini/PushNotifications":{"role":"collectionGroup","title":"Push Notifications","abstract":[{"type":"text","text":"A guide to use push notifications in Apodini."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PushNotifications","kind":"article","type":"topic","url":"\/documentation\/apodini\/pushnotifications"},"doc://Apodini/documentation/Apodini/Metadata":{"role":"collectionGroup","title":"Metadata","abstract":[{"type":"text","text":"Map requirements of your web service into the implementation."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadata"},"https://github.com/vapor/jwt-kit":{"title":"JWTKit","titleInlineContent":[{"type":"text","text":"JWTKit"}],"type":"link","identifier":"https:\/\/github.com\/vapor\/jwt-kit","url":"https:\/\/github.com\/vapor\/jwt-kit"},"doc://Apodini/documentation/Apodini/Handler":{"role":"symbol","title":"Handler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Handler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" which defines an endpoint and can handle requests."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Handler"}],"url":"\/documentation\/apodini\/handler"},"doc://Apodini/documentation/Apodini/OpenAPI":{"role":"article","title":"OpenAPI Interface Exporter","abstract":[{"type":"text","text":"This document provides a short introduction to using the "},{"type":"codeVoice","code":"OpenAPIInterfaceExporter"},{"type":"text","text":", a static exporter for Apodini."},{"type":"text","text":" "},{"type":"text","text":"It can be used to expose an OpenAPI specification (version 3.0.3) for an exported RESTful API, as done by the "},{"type":"codeVoice","code":"RESTInterfaceExporter"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/OpenAPI","kind":"article","type":"topic","url":"\/documentation\/apodini\/openapi"},"doc://Apodini/documentation/Apodini/DatabaseConnection":{"role":"collectionGroup","title":"Database Connection","abstract":[{"type":"text","text":"Connect Apodini project to a database system."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DatabaseConnection","kind":"article","type":"topic","url":"\/documentation\/apodini\/databaseconnection"},"doc://Apodini/documentation/Apodini/WebService":{"role":"symbol","title":"WebService","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebService"}],"abstract":[{"type":"text","text":"Each Apodini program consists of a "},{"type":"codeVoice","code":"WebService"},{"type":"text","text":"component that is used to describe the Web API of the Web Service"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/WebService","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WebService"}],"url":"\/documentation\/apodini\/webservice"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"}}}