{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A service-side stream sends multiple service-messages after one client-message. In order to do that service-side stream "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s can observe an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" using the "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" property wrapper. Every time one of the properties annotated with "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" changes the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is evaluated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" sends out a ping message that is requested by the client. The client could terminate the ping message by closing the connection for protocols or middleware types that support service-side streaming."}]},{"type":"codeListing","syntax":"swift","code":["struct TimerObservable: ObservableObject {","    @Published ","    var currentValue: Date = Date()","","    private var cancellable: AnyCancellable?","","    init() {","        self.cancellable = Timer","            .publish(every: 1)","            .sink { currentValue in","                self.currentValue = currentValue","            }","    }","}","","struct Ping: Handler {","    @Parameter var name: String = \"Anonymous\"","    @ObservedObject var timer = TimerObservable()","","    func handle() -> String {","        return \"Ping: \\(name)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"s can be globally exposed using keypaths."}]},{"type":"codeListing","syntax":"swift","code":["class NewsAlertService: ObservableObject {","    @Published var latestAlert: NewsAlert","","    \/\/ ...","}","","struct NewsAlert: Handler {","    @ObservedObject(\\.newsAlertService) var newsAlertService: NewsAlertService","","    func handle() -> String {","        return newsAlertService.latestAlert.shortSummary","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/servicesidestream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/ServiceSideStream","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Provide a code example of service-side stream."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Service-Side Stream","role":"article","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini","doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern"]]},"seeAlsoSections":[{"title":"Pattern Implementation","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/PatternImplementation","doc:\/\/Apodini\/documentation\/Apodini\/RequestResponse","doc:\/\/Apodini\/documentation\/Apodini\/ClientSideStream","doc:\/\/Apodini\/documentation\/Apodini\/BidirectionalStream"],"generated":true}],"references":{"doc://Apodini/documentation/Apodini/RequestResponse":{"role":"article","title":"Request-Response","abstract":[{"type":"text","text":"Usage of Request and Response pattern."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/RequestResponse","kind":"article","type":"topic","url":"\/documentation\/apodini\/requestresponse"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"doc://Apodini/documentation/Apodini/ClientSideStream":{"role":"article","title":"Client-Side Stream","abstract":[{"type":"text","text":"Provide an implementation of a client-side stream."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ClientSideStream","kind":"article","type":"topic","url":"\/documentation\/apodini\/clientsidestream"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/PatternImplementation":{"role":"article","title":"Pattern Implementation","abstract":[{"type":"text","text":"Implemented communication patterns."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PatternImplementation","kind":"article","type":"topic","url":"\/documentation\/apodini\/patternimplementation"},"doc://Apodini/documentation/Apodini/BidirectionalStream":{"role":"collectionGroup","title":"Bidirectional Stream","abstract":[{"type":"text","text":"Provide a code example of bidirectional streams."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BidirectionalStream","kind":"article","type":"topic","url":"\/documentation\/apodini\/bidirectionalstream"}}}