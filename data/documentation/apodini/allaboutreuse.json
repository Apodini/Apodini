{"seeAlsoSections":[{"title":"Basics","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","doc:\/\/Apodini\/documentation\/Apodini\/Metadata","doc:\/\/Apodini\/documentation\/Apodini\/CommandLineArguments","doc:\/\/Apodini\/documentation\/Apodini\/StatefulHandlers","doc:\/\/Apodini\/documentation\/Apodini\/InformationAPI","doc:\/\/Apodini\/documentation\/Apodini\/UnitTesting"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a couple of primitives in Apodini that enable you to custom elements that can be easily composed to create new, unique functionality."}]},{"anchor":"DynamicProperty","level":3,"type":"heading","text":"DynamicProperty"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty"},{"type":"text","text":"s are the simplest form of reuse. They are custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s that are composed of other "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s. Just as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty"},{"type":"text","text":"s must be structs. Imagine you build a web service that is somehow related to geography. One input you will need almost everywhere is a geolocation - a pair of latitude and longitude. Instead of defining them as separate "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":"s on each and every "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":", you could define a custom "},{"type":"codeVoice","code":"Location"},{"type":"text","text":" type."}]},{"type":"codeListing","syntax":"swift","code":["typealias Coordinates = (latitude: Double, longitude: Double)","","@propertyWrapper","struct Location: DynamicProperty {","    @Parameter var latitude: Double","    @Parameter var longitude: Double","","    var wrappedValue: Coordinates {","        (latitude, longitude)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can then use this custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty"},{"type":"text","text":" on your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s just as regular "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s:"}]},{"type":"codeListing","syntax":"swift","code":["struct TemperatureHandler: Handler {","    @Parameter var date: Date","    ","    @Location var location","","    @Environment(\\.temperatureService) var temperature","","    func handle() async throws -> Double {","        try await temperature(date, location)","    }","}",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course you can also use other "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s than "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":" in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty"},{"type":"text","text":"s."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If want to be even more dynamic, you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Properties"},{"type":"text","text":" type. It provides the exact same features as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty"},{"type":"text","text":", but is based on a hash map instead of a struct. This way you can dynamically calculate at startup time what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s you need as part of your custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Binding","level":3,"type":"heading","text":"Binding"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Binding"},{"type":"text","text":" works just as in SwiftUI, except it has no setter. It allows us to reuse the same "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" in different contexts:"}]},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Handler {","    @Binding var country: String?","","    func handle() -> String {","        \"Hello, \\(country ?? \"World\")!\"","    }","}","","struct CountrySubsystem: Component {","    @PathParameter var country: String","    ","    @Environment(\\.featuredCountry) var featuredCountry: String","    ","    var content: some Component {","        Greeter(country: nil)","            .description(\"Say 'Hello' to the World.\")","        ","        Group($country) {","            Greeter(country: $country.asOptional)","                .description(\"Say 'Hello' to a chosen country.\")","        }","        Group(\"featured\") {","            Greeter(country: $featuredCountry.asOptional)","                .description(\"Say 'Hello' to the currently featured country.\")","        }","    }","}"]},{"anchor":"Delegate","level":3,"type":"heading","text":"Delegate"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In some situations, putting all of your application logic into a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" is not practical. There might be a certain part of this logic that is reusable and required in multiple "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s. You might not want to initialize certain objects before you have done some assertions. Or there is just so much going on in your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" that it becomes difficult to read. In all of these situations you need a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":"."}]},{"anchor":"Calling-a-Delegate","level":4,"type":"heading","text":"Calling a Delegate"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegating "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"}]},{"type":"text","text":" is any "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" that uses at least one "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":". A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" wraps any struct and allows you to use the same functionality on that struct as you can use on a regular "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":". The element wrapped by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" can - but doesnâ€™t have to - be a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":". "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" itself must always be used on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" - or any type that is wrapped by a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" has a throwing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/instance()"},{"type":"text","text":" function. This function returns the wrapped element. When you call this function, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" performs all the magic to its wrapped element that Apodini uses to make all the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property"},{"type":"text","text":"s on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" functional. For example, that is where it decodes the input for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":"s. After you have called the "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":", you can access all properties on the returned element and use its functionality."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course applying all this complex logic may result in errors. That is why calling the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/instance()"},{"type":"text","text":" function may throw. While in most cases youâ€™ll just pass those errors down, you could check for decoding errors here and try a different "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" if the fist one fails."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Letâ€™s look at an example."}]},{"type":"codeListing","syntax":"swift","code":["struct OrderProduct: Handler {","    \/\/ ...","}","","struct WaitForProduct: Handler {","    \/\/ ...","}","","struct ProductPage: Handler {","    @Parameter var productID: UUID","","    @Environment(\\.productService) var productService","","    var wait: Delegate(WaitForProduct())","","    var order: Delegate(OrderProduct())","","    func handle() throws -> ProductInfo {","        guard !productService.isPreReleaseItem(productID) else {","            return .preReleaseInfo(try wait.instance().handle())","        }","","        return .orderInfo(try order.instance().handle())","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" returns the contents for an online shopâ€™s product page. If the product hasnâ€™t launched yet according to the "},{"type":"codeVoice","code":"productService"},{"type":"text","text":", the "},{"type":"codeVoice","code":"ProductPage"},{"type":"text","text":" delegates handling to the "},{"type":"codeVoice","code":"WaitForProduct"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":". The latter returns information such as when the product is going to launch. If the product is already available, the call is delegated to the "},{"type":"codeVoice","code":"OrderProduct"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":", which returns information relevant to actually ordering the product."}]},{"anchor":"Manipulating-Delegate","level":4,"type":"heading","text":"Manipulating `Delegate`"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" provides functionality for the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegating"}]},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" to manipulate its contained element "},{"type":"strong","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" calling its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/instance()"},{"type":"text","text":" function. Those changes are persistent."}]},{"type":"codeListing","syntax":"swift","code":["struct SomeDelegatingHandler: Handler {","    let delegate = Delegate(SomeHandler(), .required)","","    @Parameter var someParameter: String","","    @Environment(\\My.observableService) var observableService","    ","    func handle() throws -> SomeHandler.Response {","        return try delegate","                        \/\/ sets the specified `Binding` on `SomeHandler` to a `.constant()` value","                        .set(\\.$someStringBinding, to: someParameter)","                        \/\/ sets the specified `ObservedObject` on `SomeHandler` to the given value","                        .setObservable(\\.$observable, to: observableService.getObservable(for: someParameter))","                        \/\/ injects the given value (identified by the given `KeyPath`) into the local environment","                        .environment(\\My.name, someParameter)","                        \/\/ injects the given value (identified by its type) into the local environment","                        .environmentObject(someParameter)","                        .instance()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/set(_:to:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/setObservable(_:to:)"},{"type":"text","text":" only work if you know the concrete type of your "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delegate"}]},{"type":"text","text":", "},{"type":"codeVoice","code":"Delegate\/environment(_:_:)-mc6t"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/environmentObject(_:)"},{"type":"text","text":" can be used everywhere and are applied throughout the whole hierarchy of delegation. That is, if "},{"type":"codeVoice","code":"SomeHandler"},{"type":"text","text":" would also have a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":", an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":" targeting "},{"type":"codeVoice","code":"\\My.name"},{"type":"text","text":" on that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":"â€˜s wrapped element could still access the "},{"type":"codeVoice","code":" "},{"type":"text","text":"someParameter"},{"type":"codeVoice","code":", if "},{"type":"text","text":"SomeHandler` doesnâ€™t override it."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject"},{"type":"text","text":" works just as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment"},{"type":"text","text":", except it solely uses the type for identification and not a "},{"type":"codeVoice","code":"KeyPath"},{"type":"text","text":". Furthermore, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject"},{"type":"text","text":" does have no access to the global environment, but solely to objects injected via "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":"â€™s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/environmentObject(_:)"},{"type":"text","text":" function."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You may have noticed the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Optionality\/required"},{"type":"text","text":" value passed into the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":"â€™s initializer. This parameter has no effect on the runtime-behavior of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":". Instead, it allows you to modify how potential documentation exporters perceive the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":"s hidden inside this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":". Without that parameter the framework assumes that calling this "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" is not a necessity and all wrapped "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter"},{"type":"text","text":"s are assumed to be optional. As a rule of thumb, you should always add the "},{"type":"codeVoice","code":".required"},{"type":"text","text":" argument if there all paths trough your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f"},{"type":"text","text":" function either call the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":"â€™s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/instance()"},{"type":"text","text":" function or throw an error."}]},{"anchor":"DelegationModifier","level":3,"type":"heading","text":"DelegationModifier"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":" on is not a feature you want to use everywhere. It lets you implement almost every form of reuse thinkable in Apodini, however it is also rather complex to use. That is why in most cases you donâ€™t use it directly. Instead you use predefined or custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DelegationModifier"},{"type":"text","text":"s. That is a special type of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Modifier"},{"type":"text","text":", which wraps the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s defined on the inner "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"s in another "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" using a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate"},{"type":"text","text":". While that sounds complex, the usage isnâ€™t:"}]},{"type":"codeListing","syntax":"swift","code":["struct ValidateAPIKey: Guard {","    @Parameter var apiKey: String","","    @Environment(\\.apiKeyService) var apiKeyService","","    func check() throws {","        try apiKeyService.check(apiKey)","    }","}","","struct SomeProtectedComponent: Component {","    var content: some Component {","        Group(\"api\") {","            Group(\"featureOne\") {","                FirstHandler()","            }","            \/\/ ...","        }.guard(ValidateAPIKey())","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".guard(_:)"},{"type":"text","text":" function defined on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":" takes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard"},{"type":"text","text":". In the example, "},{"type":"codeVoice","code":"FirstHandler"},{"type":"text","text":" - and all other "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s defined in the "},{"type":"codeVoice","code":"\"api\""},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Group"},{"type":"text","text":" - are protected by the "},{"type":"codeVoice","code":"ValidateAPIKey"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard"},{"type":"text","text":". The "},{"type":"codeVoice","code":".guard(_:)"},{"type":"text","text":" function takes the given "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard"},{"type":"text","text":" and wraps the inner "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s into a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"delgating"}]},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":", which first executes "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard\/check()"},{"type":"text","text":" and only delegates to the wrapped "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":", if "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard\/check()"},{"type":"text","text":" didnâ€™t throw an error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another type that is based on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DelegationModifier"},{"type":"text","text":" is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformer"},{"type":"text","text":". It does quite the opposite of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard"},{"type":"text","text":". It first evaluates the wrapped "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":" and then transforms its result using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformer\/transform(content:)"},{"type":"text","text":" function. You can wrap "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler"},{"type":"text","text":"s in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformer"},{"type":"text","text":" using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/response(_:)"},{"type":"text","text":" modifier."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want information on how to implement your own "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DelegationModifier"},{"type":"text","text":" extensions, check out the advanced document on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}]}],"variants":[{"paths":["\/documentation\/apodini\/allaboutreuse"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/AllAboutReuse","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Despite its declarative nature, Apodiniâ€™s API is really flexible and enables you to build reusable components on many different levels."}],"kind":"article","metadata":{"modules":[{"name":"Apodini"}],"role":"collectionGroup","title":"All About Reuse"},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini"]]},"topicSections":[{"title":"DynamicProperty","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty","doc:\/\/Apodini\/documentation\/Apodini\/Property","doc:\/\/Apodini\/documentation\/Apodini\/Properties","doc:\/\/Apodini\/documentation\/Apodini\/TypedProperties"]},{"title":"Binding","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Binding","doc:\/\/Apodini\/documentation\/Apodini\/Environment","doc:\/\/Apodini\/documentation\/Apodini\/Parameter","doc:\/\/Apodini\/documentation\/Apodini\/PathParameter","doc:\/\/Apodini\/documentation\/Apodini\/Binding\/constant(_:)"]},{"title":"Delegate","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/Delegate","doc:\/\/Apodini\/documentation\/Apodini\/Environment","doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject","doc:\/\/Apodini\/documentation\/Apodini\/ObservedObject","doc:\/\/Apodini\/documentation\/Apodini\/Binding"]},{"title":"DelegationModifier","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/DelegationModifier","doc:\/\/Apodini\/documentation\/Apodini\/Guard","doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformer","doc:\/\/Apodini\/documentation\/Apodini\/Delegate","doc:\/\/Apodini\/documentation\/Apodini\/DelegatingHandlerInitializer"]}],"references":{"doc://Apodini/documentation/Apodini/CommandLineArguments":{"role":"collectionGroup","title":"Command Line Arguments Parsing","abstract":[{"type":"text","text":"Parse Command Line Arguments in an Apodini web service to dynamically adapt the configuration of the web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommandLineArguments","kind":"article","type":"topic","url":"\/documentation\/apodini\/commandlinearguments"},"doc://Apodini/documentation/Apodini/DelegationModifier":{"role":"symbol","title":"DelegationModifier","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DelegationModifier"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DelegationModifier","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DelegationModifier"}],"url":"\/documentation\/apodini\/delegationmodifier"},"doc://Apodini/documentation/Apodini/Handler/handle()-3440f":{"defaultImplementations":3,"role":"symbol","title":"handle()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"}],"abstract":[{"type":"text","text":"A function that is called when a request reaches the "},{"type":"codeVoice","code":"Handler"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/handle()-3440f","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/apodini\/handler\/handle()-3440f"},"doc://Apodini/documentation/Apodini/Environment":{"role":"symbol","title":"Environment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Environment"}],"abstract":[{"type":"text","text":"A property wrapper to inject pre-defined values  to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Environment","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Environment"}],"url":"\/documentation\/apodini\/environment"},"doc://Apodini/documentation/Apodini/DynamicProperty":{"role":"symbol","title":"DynamicProperty","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicProperty"}],"abstract":[{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":" allows for wrapping "},{"type":"codeVoice","code":"Property"},{"type":"text","text":"s while maintaining their functionality. By conforming a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" to "},{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":" "},{"type":"text","text":"you make this "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"â€™s properties discoverable to the Apodini runtime framework. This can be used to e.g. combine"},{"type":"text","text":" "},{"type":"text","text":"two property wrappers provided by the Apodini framework into one that merges their functionality"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DynamicProperty","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DynamicProperty"}],"url":"\/documentation\/apodini\/dynamicproperty"},"doc://Apodini/documentation/Apodini/Metadata":{"role":"collectionGroup","title":"Metadata","abstract":[{"type":"text","text":"Map requirements of your web service into the implementation."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Metadata","kind":"article","type":"topic","url":"\/documentation\/apodini\/metadata"},"doc://Apodini/documentation/Apodini/Delegate/set(_:to:)":{"role":"symbol","title":"set(_:to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"set"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7Apodini7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Delegate","preciseIdentifier":"s:7Apodini8DelegateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Set a delegateâ€™s "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":" to a constant value. This allows for direct injection of information into"},{"type":"text","text":" "},{"type":"text","text":"a delegate."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/set(_:to:)","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/delegate\/set(_:to:)"},"doc://Apodini/documentation/Apodini/Delegate":{"role":"symbol","title":"Delegate","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Delegate"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" is a lazy version of "},{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":". That is, your delegate "},{"type":"codeVoice","code":"D"},{"type":"text","text":" can wrap"},{"type":"text","text":" "},{"type":"text","text":"multiple "},{"type":"codeVoice","code":"Property"},{"type":"text","text":"s and their functionality is maintained. The "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" type makes its wrapped"},{"type":"text","text":" "},{"type":"text","text":"instance of "},{"type":"codeVoice","code":"D"},{"type":"text","text":" discoverable to the Apodini runtime framework. Moreover, it delays initialization and verification"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":"s to the point where you call "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" as a function. This enables you to decode"},{"type":"text","text":" "},{"type":"text","text":"input lazily and to do manual error handling in case decoding fails."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Delegate"}],"url":"\/documentation\/apodini\/delegate"},"doc://Apodini/documentation/Apodini/Delegate/setObservable(_:to:)":{"role":"symbol","title":"setObservable(_:to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setObservable"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ObservedObject","preciseIdentifier":"s:7Apodini14ObservedObjectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Delegate","preciseIdentifier":"s:7Apodini8DelegateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Change a "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" to observe another "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/setObservable(_:to:)","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/delegate\/setobservable(_:to:)"},"doc://Apodini/documentation/Apodini/Guard":{"role":"symbol","title":"Guard","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Guard"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Guard"},{"type":"text","text":" can be used to inspect request and guard "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"s using the check method"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Guard"}],"url":"\/documentation\/apodini\/guard"},"doc://Apodini/documentation/Apodini/Delegate/environmentObject(_:)":{"role":"symbol","title":"environmentObject(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"environmentObject"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Delegate","preciseIdentifier":"s:7Apodini8DelegateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Inject a local "},{"type":"codeVoice","code":"value"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"EnvironmentObject"},{"type":"text","text":" properties that are of type "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/environmentObject(_:)","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/delegate\/environmentobject(_:)"},"doc://Apodini/documentation/Apodini/Component":{"role":"symbol","title":"Component","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Component"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" is the central building block of  Apodini. Each component handles a specific functionality of the Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Component"}],"url":"\/documentation\/apodini\/component"},"doc://Apodini/documentation/Apodini/Handler":{"role":"symbol","title":"Handler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Handler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Component"},{"type":"text","text":" which defines an endpoint and can handle requests."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Handler"}],"url":"\/documentation\/apodini\/handler"},"doc://Apodini/documentation/Apodini/Delegate/instance()":{"role":"symbol","title":"instance()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"instance"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"D"}],"abstract":[{"type":"text","text":"Prepare the wrapped delegate "},{"type":"codeVoice","code":"D"},{"type":"text","text":" for usage."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Delegate\/instance()","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/delegate\/instance()"},"doc://Apodini/documentation/Apodini/HandlerDelegation":{"role":"collectionGroup","title":"Delegating Handlers","abstract":[{"type":"text","text":"Defining reusable and assertive "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/HandlerDelegation","kind":"article","type":"topic","url":"\/documentation\/apodini\/handlerdelegation"},"doc://Apodini/documentation/Apodini/UnitTesting":{"role":"collectionGroup","title":"Unit Testing in Apodini","abstract":[{"type":"text","text":"Show how to create a typical test class for an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/UnitTesting","kind":"article","type":"topic","url":"\/documentation\/apodini\/unittesting"},"doc://Apodini/documentation/Apodini/EnvironmentObject":{"role":"symbol","title":"EnvironmentObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnvironmentObject"}],"abstract":[{"type":"text","text":"A property wrapper to inject pre-defined values  to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/EnvironmentObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EnvironmentObject"}],"url":"\/documentation\/apodini\/environmentobject"},"doc://Apodini/documentation/Apodini/ObservedObject":{"role":"symbol","title":"ObservedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservedObject"}],"abstract":[{"type":"text","text":"Property wrapper used inside of a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Job"},{"type":"text","text":" that subscribes to an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Changes of "},{"type":"codeVoice","code":"@Published"},{"type":"text","text":" properties of the "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" will cause re-evaluations of the "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Job"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ObservedObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservedObject"}],"url":"\/documentation\/apodini\/observedobject"},"doc://Apodini/documentation/Apodini/Optionality/required":{"role":"symbol","title":"Optionality.required","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"required"}],"abstract":[{"type":"text","text":"Default for normal "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":"s, i.e. such that are not behind a "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":". Pass this to a "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":", if there is no path"},{"type":"text","text":" "},{"type":"text","text":"through your "},{"type":"codeVoice","code":"handle()"},{"type":"text","text":" that doesnâ€™t "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" where the "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" is not called."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Optionality\/required","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/optionality\/required"},"doc://Apodini/documentation/Apodini/ResponseTransformer":{"role":"symbol","title":"ResponseTransformer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseTransformer"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ResponseTransformer"},{"type":"text","text":" transforms a "},{"type":"codeVoice","code":"response"},{"type":"text","text":" of the type "},{"type":"codeVoice","code":"InputContent"},{"type":"text","text":" to a instance conforming to "},{"type":"codeVoice","code":"Content"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"An "},{"type":"codeVoice","code":"ResponseTransformer"},{"type":"text","text":" is able to map "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" types without the need to deal with an "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" type  of the previous "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It only maps in the "},{"type":"codeVoice","code":".send"},{"type":"text","text":",  "},{"type":"codeVoice","code":".finish"},{"type":"text","text":" and "},{"type":"codeVoice","code":".automatic"},{"type":"text","text":" cases."},{"type":"text","text":" "},{"type":"text","text":"If the previous Handler or ResponseTransformer returned an "},{"type":"codeVoice","code":"Response.end"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Response.nothing"},{"type":"text","text":" it is not called and will not map anything."},{"type":"text","text":" "},{"type":"text","text":"Both types ("},{"type":"codeVoice","code":"InputContent"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"type":"text","text":") have to conform to "},{"type":"codeVoice","code":"Encodable"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ResponseTransformer"}],"url":"\/documentation\/apodini\/responsetransformer"},"doc://Apodini/documentation/Apodini/Property":{"role":"symbol","title":"Property","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Property"}],"abstract":[{"type":"text","text":"This protocol is implemented by all of Apodiniâ€™s property wrappers that are used access functionality or information on a handling "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Property","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Property"}],"url":"\/documentation\/apodini\/property"},"doc://Apodini/documentation/Apodini/Handler/response(_:)":{"role":"symbol","title":"response(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"response"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"DelegationModifier","preciseIdentifier":"s:7Apodini18DelegationModifierV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ResponseTransformingHandlerInitializer","preciseIdentifier":"s:7Apodini38ResponseTransformingHandlerInitializerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"response"},{"type":"text","text":" modifier can be used to transform the output of a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"â€™s response to a different type using a "},{"type":"codeVoice","code":"ResponseTransformer"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Handler\/response(_:)","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/handler\/response(_:)"},"doc://Apodini/documentation/Apodini/Guard/check()":{"role":"symbol","title":"check()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"check"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"check"},{"type":"text","text":" method can be used to inspect incoming requests"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Guard\/check()","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/apodini\/guard\/check()"},"doc://Apodini/documentation/Apodini/PathParameter":{"role":"symbol","title":"PathParameter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathParameter"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"@PathComponent"},{"type":"text","text":" can be used in "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"s to indicate that a part of a path is a parameter and can be read out in a "},{"type":"codeVoice","code":"Handler"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PathParameter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathParameter"}],"url":"\/documentation\/apodini\/pathparameter"},"doc://Apodini/documentation/Apodini/DelegatingHandlerInitializer":{"role":"symbol","title":"DelegatingHandlerInitializer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DelegatingHandlerInitializer"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"DelegatingHandlerInitializer"},{"type":"text","text":" is used to dynamically stack "},{"type":"strong","inlineContent":[{"type":"text","text":"delegating"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s on"},{"type":"text","text":" "},{"type":"codeVoice","code":"Component"},{"type":"text","text":"s. The "},{"type":"codeVoice","code":"DelegatingHandlerInitializer"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"instance"},{"type":"text","text":" method is called once for"},{"type":"text","text":" "},{"type":"text","text":"every related endpoint."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/DelegatingHandlerInitializer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DelegatingHandlerInitializer"}],"url":"\/documentation\/apodini\/delegatinghandlerinitializer"},"doc://Apodini/documentation/Apodini/InformationAPI":{"role":"collectionGroup","title":"Information","abstract":[{"type":"text","text":"The Information API maps middleware-specific metadata of the respective wire protocol into the framework"},{"type":"text","text":" "},{"type":"text","text":"making it accessible inside a Handler."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/InformationAPI","kind":"article","type":"topic","url":"\/documentation\/apodini\/informationapi"},"doc://Apodini/documentation/Apodini/Modifier":{"role":"symbol","title":"Modifier","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Modifier"}],"abstract":[{"type":"text","text":"A modifier which can be invoked on a "},{"type":"codeVoice","code":"Component"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Modifier","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Modifier"}],"url":"\/documentation\/apodini\/modifier"},"doc://Apodini/documentation/Apodini/Properties":{"role":"symbol","title":"Properties","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Properties"}],"abstract":[{"type":"text","text":"Properties provides same functionality as "},{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":", but for elements that are only known"},{"type":"text","text":" "},{"type":"text","text":"at statup and not compile-time. That is, "},{"type":"codeVoice","code":"Properties"},{"type":"text","text":" stores named elements and makes the ones"},{"type":"text","text":" "},{"type":"text","text":"conforming to "},{"type":"codeVoice","code":"Property"},{"type":"text","text":" discoverable to the Apodini runtime framework."},{"type":"text","text":" "},{"type":"codeVoice","code":"Properties"},{"type":"text","text":" can be used to e.g. delay the decision, which "},{"type":"codeVoice","code":"Parameter"},{"type":"text","text":"s are exported to startup-time."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Properties","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Properties"}],"url":"\/documentation\/apodini\/properties"},"doc://Apodini/documentation/Apodini/BuildingBlocks":{"role":"collectionGroup","title":"Apodiniâ€™s Building Blocks","abstract":[{"type":"text","text":"This chapter introduces you to the most important building blocks of an Apodini web service."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BuildingBlocks","kind":"article","type":"topic","url":"\/documentation\/apodini\/buildingblocks"},"doc://Apodini/documentation/Apodini/Parameter":{"role":"symbol","title":"Parameter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parameter"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":" property wrapper can be used to express input in "},{"type":"codeVoice","code":"Components"}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Parameter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parameter"}],"url":"\/documentation\/apodini\/parameter"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/Group":{"role":"symbol","title":"Group","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Group"}],"abstract":[],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Group","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Group"}],"url":"\/documentation\/apodini\/group"},"doc://Apodini/documentation/Apodini/StatefulHandlers":{"role":"collectionGroup","title":"Stateful Handlers","abstract":[{"type":"text","text":"Usually endpoints only handle one request and answer with one response. However, in certain cases, this is not enough. Apodini sets no restrictions on this."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/StatefulHandlers","kind":"article","type":"topic","url":"\/documentation\/apodini\/statefulhandlers"},"doc://Apodini/documentation/Apodini/ResponseTransformer/transform(content:)":{"role":"symbol","title":"transform(content:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"transform"},{"kind":"text","text":"("},{"kind":"externalParam","text":"content"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InputContent"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Content"}],"abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"response"},{"type":"text","text":" of the type "},{"type":"codeVoice","code":"ResponseTransformable"},{"type":"text","text":" to a instance conforming to "},{"type":"codeVoice","code":"TransformedContent"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Both types ("},{"type":"codeVoice","code":"ResponseTransformable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"TransformedContent"},{"type":"text","text":") have to conform to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ResponseTransformer\/transform(content:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/apodini\/responsetransformer\/transform(content:)"},"doc://Apodini/documentation/Apodini/Binding":{"role":"symbol","title":"Binding","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Binding"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Property"},{"type":"text","text":" that can be used on "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s for better re-usability. Depending on"},{"type":"text","text":" "},{"type":"text","text":"the context the "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":" can be bound to a "},{"type":"codeVoice","code":"Binding.constant"},{"type":"text","text":", an "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or an "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":". The latter "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":"s for the latter two are contained in their"},{"type":"text","text":" "},{"type":"codeVoice","code":"projectedValue"},{"type":"text","text":"s."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Binding","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Binding"}],"url":"\/documentation\/apodini\/binding"},"doc://Apodini/documentation/Apodini/TypedProperties":{"role":"symbol","title":"TypedProperties","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypedProperties"}],"abstract":[{"type":"text","text":"A typed version of an "},{"type":"codeVoice","code":"@Properties"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/TypedProperties","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TypedProperties"}],"url":"\/documentation\/apodini\/typedproperties"},"doc://Apodini/documentation/Apodini/Binding/constant(_:)":{"role":"symbol","title":"constant(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"constant"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7Apodini7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":" that always returns the given "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/Binding\/constant(_:)","kind":"symbol","type":"topic","url":"\/documentation\/apodini\/binding\/constant(_:)"}}}