{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to implement a client-side stream a "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":" can rely on a constant connection that can be observed using the "},{"type":"codeVoice","code":"@Environment"},{"type":"text","text":" property wrapper:"},{"type":"text","text":" "},{"type":"text","text":"You can access the connection state using the "},{"type":"codeVoice","code":"Connection"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"state"},{"type":"text","text":" property that is retrieved by the "},{"type":"codeVoice","code":"@Environment(\\.connection)"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["struct SingleParameterHandler: Handler {","    @Parameter var name: String","    @Environment(\\.connection) var connection: Connection","","","    func handle() -> Response<String> {","        print(name)","","        if connection.state == .end {","            return .final(\"End\")","        } else { \/\/ connection.state == .open","            return .nothing \/\/ Send no reponse to the client as the connection is not yet terminated","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To take full advantage of client-side streams, web services can collect content state from the client across multiple requests using "},{"type":"codeVoice","code":"@State"},{"type":"text","text":". The following code allows for collecting an undefined number of "},{"type":"codeVoice","code":"names"},{"type":"text","text":" an then greeting all of them at once."}]},{"type":"codeListing","syntax":"swift","code":["struct Greeter: Handler {","    @Parameter var name: String","    @State var names: [String] = []","    @Environment(\\.connection) var connection: Connection","","","    func handle() -> Response<String> {","        names.append(name)","        if connection.state == .end {","            return .final(\"Hello \\(names.joined(seperator: \", \"))!\")","        } else {","            return .nothing","        }","    }","}"]},{"anchor":"Collection","level":2,"type":"heading","text":"Collection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One should be implement something similar to the following concept by creating a custom "},{"type":"codeVoice","code":"DynamicProperty"},{"type":"text","text":". However, the "},{"type":"codeVoice","code":"@CollectableParameter"},{"type":"text","text":" is not part of Apodini public interface yet."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above pattern can be simplified into a single property wrapper called "},{"type":"codeVoice","code":"@CollectableParameter"},{"type":"text","text":" that manages the triplet of "},{"type":"codeVoice","code":"@Parameter"},{"type":"text","text":", "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@Environment(\\.connection)"},{"type":"text","text":" for us."}]},{"type":"codeListing","syntax":"swift","code":["struct SingleParameter: Handler {","    @CollectableParameter var names: [String]","","","    func handle() -> Response<String> {","        if $names.state == .end {","            \/\/ Joins all names in the array using commas.","            return .final(\"Hello \\(names.joined(\", \"))!\")","        } else {","            return .nothing","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Middlewares and Protocols that don’t implement client-side streaming only accept a single request that can include the "},{"type":"codeVoice","code":"@CollectableParameter"},{"type":"text","text":" as a collection."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition some types might conform to "},{"type":"codeVoice","code":"Collectable"},{"type":"text","text":" that requires a reduce function:"}]},{"type":"codeListing","syntax":"swift","code":["protocol Collectable {","   associatedtype Value","","","   static var defaultValue: Self.Value { get }","","","   static func reduce(value: inout Self.Value, nextValue: () -> Self.Value)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This enables "},{"type":"codeVoice","code":"Handler"},{"type":"text","text":"s to expose the "},{"type":"codeVoice","code":"@CollectableParameter"},{"type":"text","text":" as a single type:"}]},{"type":"codeListing","syntax":"swift","code":["struct NameCollector: Collectable {","    static var defaultValue: String = \"\""," ","","    static func reduce(value: inout String, nextValue: String) {","        value.append(\", \\(nextValue)\")","    }","}","","struct Greeter: Handler {","    @CollectableParameter(NameCollector.self) var names: String","","","    func handle() -> Response<String> {","        if $names.state == .end {","            \/\/ Joins all names in the array using commas.","            return .final(\"Hello \\(names)!\")","        } else {","            return .nothing","        }","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apodini\/clientsidestream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Apodini\/documentation\/Apodini\/ClientSideStream","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Provide an implementation of a client-side stream."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Client-Side Stream","role":"article","modules":[{"name":"Apodini"}]},"hierarchy":{"paths":[["doc:\/\/Apodini\/documentation\/Apodini","doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern"]]},"seeAlsoSections":[{"title":"Pattern Implementation","identifiers":["doc:\/\/Apodini\/documentation\/Apodini\/PatternImplementation","doc:\/\/Apodini\/documentation\/Apodini\/RequestResponse","doc:\/\/Apodini\/documentation\/Apodini\/ServiceSideStream","doc:\/\/Apodini\/documentation\/Apodini\/BidirectionalStream"],"generated":true}],"references":{"doc://Apodini/documentation/Apodini/ServiceSideStream":{"role":"article","title":"Service-Side Stream","abstract":[{"type":"text","text":"Provide a code example of service-side stream."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/ServiceSideStream","kind":"article","type":"topic","url":"\/documentation\/apodini\/servicesidestream"},"doc://Apodini/documentation/Apodini/CommunicationPattern":{"role":"collectionGroup","title":"Communication Pattern","abstract":[{"type":"text","text":"Communication patterns and their usage in different client-service protocols."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/CommunicationPattern","kind":"article","type":"topic","url":"\/documentation\/apodini\/communicationpattern"},"doc://Apodini/documentation/Apodini/RequestResponse":{"role":"article","title":"Request-Response","abstract":[{"type":"text","text":"Usage of Request and Response pattern."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/RequestResponse","kind":"article","type":"topic","url":"\/documentation\/apodini\/requestresponse"},"doc://Apodini/documentation/Apodini":{"role":"collection","title":"Apodini","abstract":[{"type":"text","text":"A declarative, composable framework to build web services using Swift."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini","kind":"symbol","type":"topic","url":"\/documentation\/apodini"},"doc://Apodini/documentation/Apodini/BidirectionalStream":{"role":"collectionGroup","title":"Bidirectional Stream","abstract":[{"type":"text","text":"Provide a code example of bidirectional streams."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/BidirectionalStream","kind":"article","type":"topic","url":"\/documentation\/apodini\/bidirectionalstream"},"doc://Apodini/documentation/Apodini/PatternImplementation":{"role":"article","title":"Pattern Implementation","abstract":[{"type":"text","text":"Implemented communication patterns."}],"identifier":"doc:\/\/Apodini\/documentation\/Apodini\/PatternImplementation","kind":"article","type":"topic","url":"\/documentation\/apodini\/patternimplementation"}}}